
UART_Serial_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d34  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00018000  2**0
                  ALLOC
  2 .data         000000a8  20000000  0c002d34  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000160  200000a8  0c002ddc  000100a8  2**2
                  ALLOC
  4 .no_init      00000014  2000ffc0  2000ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 00000c28  00000000  00000000  000100a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00013f34  00000000  00000000  00010cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000025f3  00000000  00000000  00024c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000055e3  00000000  00000000  000271f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000031b0  00000000  00000000  0002c7dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008308  00000000  00000000  0002f98c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000067de  00000000  00000000  00037c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a78  00000000  00000000  0003e472  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 00000548  00000000  00000000  0003eeea  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	d5 22 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ."..............
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	4d 1e 00 08 b1 02 00 08 5d 1e 00 08 b1 02 00 08     M.......].......
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c002d34 	.word	0x0c002d34
 800024c:	20000000 	.word	0x20000000
 8000250:	000000a8 	.word	0x000000a8
 8000254:	0c002ddc 	.word	0x0c002ddc
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c002d34 	.word	0x0c002d34
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c002d34 	.word	0x0c002d34
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	200000a8 	.word	0x200000a8
 800027c:	0000015c 	.word	0x0000015c
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000290:	10000800 	.word	0x10000800

	.align	1
    .thumb
 8000294:	080002b5 	.word	0x080002b5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	08002bb9 	.word	0x08002bb9
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	08002b5d 	.word	0x08002b5d

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002b4:	b598      	push	{r3, r4, r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <SystemInit+0x1c>)
 80002ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002be:	4614      	mov	r4, r2
 80002c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002c6:	f002 f9f3 	bl	80026b0 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002ca:	f002 fa5b 	bl	8002784 <SystemCoreClockSetup>
}
 80002ce:	bd98      	pop	{r3, r4, r7, pc}
 80002d0:	2000ffc4 	.word	0x2000ffc4

080002d4 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002da:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d03e      	beq.n	8000364 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002e6:	4b2d      	ldr	r3, [pc, #180]	; (800039c <SystemCoreClockUpdate+0xc8>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d002      	beq.n	80002f8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e002      	b.n	80002fe <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002f8:	f002 fa3a 	bl	8002770 <OSCHP_GetFrequency>
 80002fc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002fe:	4b27      	ldr	r3, [pc, #156]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	2b00      	cmp	r3, #0
 8000308:	d020      	beq.n	800034c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000312:	0e1b      	lsrs	r3, r3, #24
 8000314:	3301      	adds	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000320:	0a1b      	lsrs	r3, r3, #8
 8000322:	3301      	adds	r3, #1
 8000324:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	3301      	adds	r3, #1
 8000332:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	fb02 f303 	mul.w	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e00d      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000354:	3301      	adds	r3, #1
 8000356:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	e001      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 8000366:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	3301      	adds	r3, #1
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	fbb2 f3f3 	udiv	r3, r2, r3
 8000376:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	3301      	adds	r3, #1
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	fbb2 f3f3 	udiv	r3, r2, r3
 8000388:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <SystemCoreClockUpdate+0xd0>)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	50004600 	.word	0x50004600
 800039c:	50004710 	.word	0x50004710
 80003a0:	016e3600 	.word	0x016e3600
 80003a4:	2000ffc0 	.word	0x2000ffc0

080003a8 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	60f8      	str	r0, [r7, #12]
 80003b0:	460b      	mov	r3, r1
 80003b2:	607a      	str	r2, [r7, #4]
 80003b4:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80003b6:	7afb      	ldrb	r3, [r7, #11]
 80003b8:	089b      	lsrs	r3, r3, #2
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	4618      	mov	r0, r3
 80003be:	7afb      	ldrb	r3, [r7, #11]
 80003c0:	089b      	lsrs	r3, r3, #2
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	461a      	mov	r2, r3
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	3204      	adds	r2, #4
 80003ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003ce:	7afb      	ldrb	r3, [r7, #11]
 80003d0:	f003 0303 	and.w	r3, r3, #3
 80003d4:	00db      	lsls	r3, r3, #3
 80003d6:	4619      	mov	r1, r3
 80003d8:	23f8      	movs	r3, #248	; 0xf8
 80003da:	408b      	lsls	r3, r1
 80003dc:	43db      	mvns	r3, r3
 80003de:	ea02 0103 	and.w	r1, r2, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	1d02      	adds	r2, r0, #4
 80003e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003ee:	7afb      	ldrb	r3, [r7, #11]
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	4619      	mov	r1, r3
 80003f4:	2303      	movs	r3, #3
 80003f6:	408b      	lsls	r3, r1
 80003f8:	43db      	mvns	r3, r3
 80003fa:	401a      	ands	r2, r3
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	4a37      	ldr	r2, [pc, #220]	; (80004e0 <XMC_GPIO_Init+0x138>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d003      	beq.n	8000410 <XMC_GPIO_Init+0x68>
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	4a36      	ldr	r2, [pc, #216]	; (80004e4 <XMC_GPIO_Init+0x13c>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d10a      	bne.n	8000426 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000414:	7afb      	ldrb	r3, [r7, #11]
 8000416:	2101      	movs	r1, #1
 8000418:	fa01 f303 	lsl.w	r3, r1, r3
 800041c:	43db      	mvns	r3, r3
 800041e:	401a      	ands	r2, r3
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	661a      	str	r2, [r3, #96]	; 0x60
 8000424:	e03c      	b.n	80004a0 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	685a      	ldr	r2, [r3, #4]
 800042a:	7afb      	ldrb	r3, [r7, #11]
 800042c:	409a      	lsls	r2, r3
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000432:	7afb      	ldrb	r3, [r7, #11]
 8000434:	08db      	lsrs	r3, r3, #3
 8000436:	b2db      	uxtb	r3, r3
 8000438:	4618      	mov	r0, r3
 800043a:	7afb      	ldrb	r3, [r7, #11]
 800043c:	08db      	lsrs	r3, r3, #3
 800043e:	b2db      	uxtb	r3, r3
 8000440:	461a      	mov	r2, r3
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	3210      	adds	r2, #16
 8000446:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800044a:	7afb      	ldrb	r3, [r7, #11]
 800044c:	f003 0307 	and.w	r3, r3, #7
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	4619      	mov	r1, r3
 8000454:	2307      	movs	r3, #7
 8000456:	408b      	lsls	r3, r1
 8000458:	43db      	mvns	r3, r3
 800045a:	ea02 0103 	and.w	r1, r2, r3
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	f100 0210 	add.w	r2, r0, #16
 8000464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000468:	7afb      	ldrb	r3, [r7, #11]
 800046a:	08db      	lsrs	r3, r3, #3
 800046c:	b2db      	uxtb	r3, r3
 800046e:	4618      	mov	r0, r3
 8000470:	7afb      	ldrb	r3, [r7, #11]
 8000472:	08db      	lsrs	r3, r3, #3
 8000474:	b2db      	uxtb	r3, r3
 8000476:	461a      	mov	r2, r3
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	3210      	adds	r2, #16
 800047c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	7a1b      	ldrb	r3, [r3, #8]
 8000484:	4619      	mov	r1, r3
 8000486:	7afb      	ldrb	r3, [r7, #11]
 8000488:	f003 0307 	and.w	r3, r3, #7
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	fa01 f303 	lsl.w	r3, r1, r3
 8000492:	ea42 0103 	orr.w	r1, r2, r3
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	f100 0210 	add.w	r2, r0, #16
 800049c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80004a0:	7afb      	ldrb	r3, [r7, #11]
 80004a2:	089b      	lsrs	r3, r3, #2
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	4618      	mov	r0, r3
 80004a8:	7afb      	ldrb	r3, [r7, #11]
 80004aa:	089b      	lsrs	r3, r3, #2
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	461a      	mov	r2, r3
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	3204      	adds	r2, #4
 80004b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	4619      	mov	r1, r3
 80004be:	7afb      	ldrb	r3, [r7, #11]
 80004c0:	f003 0303 	and.w	r3, r3, #3
 80004c4:	00db      	lsls	r3, r3, #3
 80004c6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ca:	ea42 0103 	orr.w	r1, r2, r3
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	1d02      	adds	r2, r0, #4
 80004d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004d6:	3714      	adds	r7, #20
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr
 80004e0:	48028e00 	.word	0x48028e00
 80004e4:	48028f00 	.word	0x48028f00

080004e8 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80004ec:	4b03      	ldr	r3, [pc, #12]	; (80004fc <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80004ee:	681b      	ldr	r3, [r3, #0]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000ffc0 	.word	0x2000ffc0

08000500 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000508:	f7ff fee4 	bl	80002d4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 800050c:	4b0b      	ldr	r3, [pc, #44]	; (800053c <XMC_SCU_lDelay+0x3c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <XMC_SCU_lDelay+0x40>)
 8000512:	fba2 2303 	umull	r2, r3, r2, r3
 8000516:	0c9a      	lsrs	r2, r3, #18
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	fb02 f303 	mul.w	r3, r2, r3
 800051e:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000520:	2300      	movs	r3, #0
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	e003      	b.n	800052e <XMC_SCU_lDelay+0x2e>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000526:	bf00      	nop
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	3301      	adds	r3, #1
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	68fa      	ldr	r2, [r7, #12]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	429a      	cmp	r2, r3
 8000534:	d3f7      	bcc.n	8000526 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	2000ffc0 	.word	0x2000ffc0
 8000540:	431bde83 	.word	0x431bde83

08000544 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000544:	b5b0      	push	{r4, r5, r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af02      	add	r7, sp, #8
 800054a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 800054c:	2000      	movs	r0, #0
 800054e:	f000 f895 	bl	800067c <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8000552:	f000 fa17 	bl	8000984 <XMC_SCU_HIB_EnableHibernateDomain>
  if (config->enable_osculp == true)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	79db      	ldrb	r3, [r3, #7]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d00a      	beq.n	8000574 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800055e:	f000 fa4f 	bl	8000a00 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while(XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 8000562:	bf00      	nop
 8000564:	f000 fa3a 	bl	80009dc <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8000568:	4603      	mov	r3, r0
 800056a:	f083 0301 	eor.w	r3, r3, #1
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d1f7      	bne.n	8000564 <XMC_SCU_CLOCK_Init+0x20>
  }
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	7a5b      	ldrb	r3, [r3, #9]
 8000578:	4618      	mov	r0, r3
 800057a:	f000 f8f9 	bl	8000770 <XMC_SCU_HIB_SetStandbyClockSource>

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	7a1b      	ldrb	r3, [r3, #8]
 8000582:	4618      	mov	r0, r3
 8000584:	f000 f9d8 	bl	8000938 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	7c1b      	ldrb	r3, [r3, #16]
 800058c:	4618      	mov	r0, r3
 800058e:	f000 f90d 	bl	80007ac <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	7c5b      	ldrb	r3, [r3, #17]
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f930 	bl	80007fc <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	7c9b      	ldrb	r3, [r3, #18]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 f917 	bl	80007d4 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	7cdb      	ldrb	r3, [r3, #19]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 f93a 	bl	8000824 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	799b      	ldrb	r3, [r3, #6]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d00a      	beq.n	80005ce <XMC_SCU_CLOCK_Init+0x8a>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80005b8:	f000 fa54 	bl	8000a64 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80005bc:	bf00      	nop
 80005be:	f000 fa79 	bl	8000ab4 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80005c2:	4603      	mov	r3, r0
 80005c4:	f083 0301 	eor.w	r3, r3, #1
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d1f7      	bne.n	80005be <XMC_SCU_CLOCK_Init+0x7a>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	78db      	ldrb	r3, [r3, #3]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d102      	bne.n	80005dc <XMC_SCU_CLOCK_Init+0x98>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 80005d6:	f000 fa91 	bl	8000afc <XMC_SCU_CLOCK_DisableSystemPll>
 80005da:	e014      	b.n	8000606 <XMC_SCU_CLOCK_Init+0xc2>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 80005dc:	f000 fa7e 	bl	8000adc <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	8899      	ldrh	r1, [r3, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80005ec:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80005f2:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	4608      	mov	r0, r1
 80005fc:	4611      	mov	r1, r2
 80005fe:	462a      	mov	r2, r5
 8000600:	4623      	mov	r3, r4
 8000602:	f000 fa8b 	bl	8000b1c <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	68db      	ldr	r3, [r3, #12]
 800060a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800060e:	d103      	bne.n	8000618 <XMC_SCU_CLOCK_Init+0xd4>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8000610:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000614:	f000 f832 	bl	800067c <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8000618:	f7ff fe5c 	bl	80002d4 <SystemCoreClockUpdate>
}
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bdb0      	pop	{r4, r5, r7, pc}
 8000622:	bf00      	nop

08000624 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	0f1b      	lsrs	r3, r3, #28
 8000630:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000638:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	4613      	mov	r3, r2
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	4413      	add	r3, r2
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	461a      	mov	r2, r3
 8000646:	4b04      	ldr	r3, [pc, #16]	; (8000658 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8000648:	4413      	add	r3, r2
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	601a      	str	r2, [r3, #0]
}
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	50004414 	.word	0x50004414

0800065c <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000660:	f7ff ff42 	bl	80004e8 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8000664:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8000666:	4b04      	ldr	r3, [pc, #16]	; (8000678 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8000668:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 8000672:	4618      	mov	r0, r3
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	50004600 	.word	0x50004600

0800067c <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000684:	4906      	ldr	r1, [pc, #24]	; (80006a0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000688:	68db      	ldr	r3, [r3, #12]
 800068a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4313      	orrs	r3, r2
 8000692:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	50004600 	.word	0x50004600

080006a4 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80006ac:	4906      	ldr	r1, [pc, #24]	; (80006c8 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4313      	orrs	r3, r2
 80006ba:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	50004600 	.word	0x50004600

080006cc <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 80006d4:	4906      	ldr	r1, [pc, #24]	; (80006f0 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80006d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4313      	orrs	r3, r2
 80006e2:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	50004600 	.word	0x50004600

080006f4 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 80006fe:	88fb      	ldrh	r3, [r7, #6]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d108      	bne.n	8000716 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000704:	4a0a      	ldr	r2, [pc, #40]	; (8000730 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000708:	68db      	ldr	r3, [r3, #12]
 800070a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800070e:	f023 0301 	bic.w	r3, r3, #1
 8000712:	60d3      	str	r3, [r2, #12]
 8000714:	e007      	b.n	8000726 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000716:	4a06      	ldr	r2, [pc, #24]	; (8000730 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	60d3      	str	r3, [r2, #12]
  }
}
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	50004710 	.word	0x50004710

08000734 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800073e:	bf00      	nop
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 8000742:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000746:	f003 0308 	and.w	r3, r3, #8
 800074a:	2b00      	cmp	r3, #0
 800074c:	d1f8      	bne.n	8000740 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800074e:	4907      	ldr	r1, [pc, #28]	; (800076c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8000758:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800075a:	4313      	orrs	r3, r2
 800075c:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	50004000 	.word	0x50004000
 800076c:	50004300 	.word	0x50004300

08000770 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800077a:	bf00      	nop
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 800077e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000782:	f003 0308 	and.w	r3, r3, #8
 8000786:	2b00      	cmp	r3, #0
 8000788:	d1f8      	bne.n	800077c <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 800078a:	4907      	ldr	r1, [pc, #28]	; (80007a8 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8000794:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000796:	4313      	orrs	r3, r2
 8000798:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	50004000 	.word	0x50004000
 80007a8:	50004300 	.word	0x50004300

080007ac <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80007b4:	4906      	ldr	r1, [pc, #24]	; (80007d0 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007b8:	68db      	ldr	r3, [r3, #12]
 80007ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80007c2:	4313      	orrs	r3, r2
 80007c4:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	50004600 	.word	0x50004600

080007d4 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80007dc:	4906      	ldr	r1, [pc, #24]	; (80007f8 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80007e0:	6a1b      	ldr	r3, [r3, #32]
 80007e2:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80007ea:	4313      	orrs	r3, r2
 80007ec:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	50004600 	.word	0x50004600

080007fc <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000804:	4906      	ldr	r1, [pc, #24]	; (8000820 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000808:	691b      	ldr	r3, [r3, #16]
 800080a:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000812:	4313      	orrs	r3, r2
 8000814:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	50004600 	.word	0x50004600

08000824 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800082c:	4906      	ldr	r1, [pc, #24]	; (8000848 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800083a:	4313      	orrs	r3, r2
 800083c:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	50004600 	.word	0x50004600

0800084c <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000854:	4906      	ldr	r1, [pc, #24]	; (8000870 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000862:	4313      	orrs	r3, r2
 8000864:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	50004600 	.word	0x50004600

08000874 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800087c:	4906      	ldr	r1, [pc, #24]	; (8000898 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800088a:	4313      	orrs	r3, r2
 800088c:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	50004600 	.word	0x50004600

0800089c <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008a4:	4906      	ldr	r1, [pc, #24]	; (80008c0 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008b2:	4313      	orrs	r3, r2
 80008b4:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	50004600 	.word	0x50004600

080008c4 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80008ce:	4a19      	ldr	r2, [pc, #100]	; (8000934 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80008d0:	4b18      	ldr	r3, [pc, #96]	; (8000934 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80008d2:	695b      	ldr	r3, [r3, #20]
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80008da:	4a16      	ldr	r2, [pc, #88]	; (8000934 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80008dc:	4b15      	ldr	r3, [pc, #84]	; (8000934 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80008de:	695b      	ldr	r3, [r3, #20]
 80008e0:	f043 0310 	orr.w	r3, r3, #16
 80008e4:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80008e6:	4913      	ldr	r1, [pc, #76]	; (8000934 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	3b01      	subs	r3, #1
 80008f2:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80008f4:	4313      	orrs	r3, r2
 80008f6:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80008f8:	4a0e      	ldr	r2, [pc, #56]	; (8000934 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000902:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000904:	4a0b      	ldr	r2, [pc, #44]	; (8000934 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	f023 0310 	bic.w	r3, r3, #16
 800090e:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000910:	4a08      	ldr	r2, [pc, #32]	; (8000934 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800091a:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 800091c:	bf00      	nop
 800091e:	4b05      	ldr	r3, [pc, #20]	; (8000934 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000920:	691b      	ldr	r3, [r3, #16]
 8000922:	f003 0304 	and.w	r3, r3, #4
 8000926:	2b00      	cmp	r3, #0
 8000928:	d0f9      	beq.n	800091e <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	50004710 	.word	0x50004710

08000938 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000942:	4a0f      	ldr	r2, [pc, #60]	; (8000980 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000944:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800094c:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d10e      	bne.n	8000972 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000954:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000956:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800095e:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000960:	2064      	movs	r0, #100	; 0x64
 8000962:	f7ff fdcd 	bl	8000500 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000966:	4a06      	ldr	r2, [pc, #24]	; (8000980 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000970:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000972:	2064      	movs	r0, #100	; 0x64
 8000974:	f7ff fdc4 	bl	8000500 <XMC_SCU_lDelay>
}
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	50004710 	.word	0x50004710

08000984 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f003 0301 	and.w	r3, r3, #1
 8000990:	2b00      	cmp	r3, #0
 8000992:	d109      	bne.n	80009a8 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000996:	2201      	movs	r2, #1
 8000998:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 800099a:	bf00      	nop
 800099c:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d0f9      	beq.n	800099c <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80009a8:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d00a      	beq.n	80009ca <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80009b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009ba:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 80009bc:	bf00      	nop
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d1f9      	bne.n	80009be <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	50004200 	.word	0x50004200
 80009d8:	50004400 	.word	0x50004400

080009dc <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f003 0308 	and.w	r3, r3, #8
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	bf0c      	ite	eq
 80009ec:	2301      	moveq	r3, #1
 80009ee:	2300      	movne	r3, #0
 80009f0:	b2db      	uxtb	r3, r3
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	50004300 	.word	0x50004300

08000a00 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8000a04:	bf00      	nop
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>)
 8000a08:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d1f8      	bne.n	8000a06 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until the update of OSCULCTRL register in hibernate domain is completed */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000a14:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a16:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a1e:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000a20:	bf00      	nop
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>)
 8000a24:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a28:	f003 0308 	and.w	r3, r3, #8
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d1f8      	bne.n	8000a22 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000a30:	4a0b      	ldr	r2, [pc, #44]	; (8000a60 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a34:	68db      	ldr	r3, [r3, #12]
 8000a36:	f043 0308 	orr.w	r3, r3, #8
 8000a3a:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8000a3c:	bf00      	nop
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>)
 8000a40:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a44:	f003 0304 	and.w	r3, r3, #4
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d1f8      	bne.n	8000a3e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a4e:	2208      	movs	r2, #8
 8000a50:	609a      	str	r2, [r3, #8]
}
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	50004000 	.word	0x50004000
 8000a60:	50004300 	.word	0x50004300

08000a64 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000a64:	b5b0      	push	{r4, r5, r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000a68:	4a0f      	ldr	r2, [pc, #60]	; (8000aa8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a72:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000a74:	4d0d      	ldr	r5, [pc, #52]	; (8000aac <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000a7e:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000a82:	f001 fe75 	bl	8002770 <OSCHP_GetFrequency>
 8000a86:	4602      	mov	r2, r0
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8000a8e:	0d1b      	lsrs	r3, r3, #20
 8000a90:	3b01      	subs	r3, #1
 8000a92:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000a94:	4323      	orrs	r3, r4
 8000a96:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000a98:	4a03      	ldr	r2, [pc, #12]	; (8000aa8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000a9a:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000aa2:	6053      	str	r3, [r2, #4]
}
 8000aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	50004710 	.word	0x50004710
 8000aac:	50004700 	.word	0x50004700
 8000ab0:	6b5fca6b 	.word	0x6b5fca6b

08000ab4 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000ac0:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000ac4:	bf0c      	ite	eq
 8000ac6:	2301      	moveq	r3, #1
 8000ac8:	2300      	movne	r3, #0
 8000aca:	b2db      	uxtb	r3, r3
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	50004710 	.word	0x50004710

08000adc <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000ae0:	4a05      	ldr	r2, [pc, #20]	; (8000af8 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000ae2:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000aea:	f023 0302 	bic.w	r3, r3, #2
 8000aee:	6053      	str	r3, [r2, #4]
}
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	50004710 	.word	0x50004710

08000afc <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b00:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b02:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b0a:	f043 0302 	orr.w	r3, r3, #2
 8000b0e:	6053      	str	r3, [r2, #4]
}
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	50004710 	.word	0x50004710

08000b1c <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60ba      	str	r2, [r7, #8]
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	4603      	mov	r3, r0
 8000b28:	81fb      	strh	r3, [r7, #14]
 8000b2a:	460b      	mov	r3, r1
 8000b2c:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000b2e:	89fb      	ldrh	r3, [r7, #14]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fddf 	bl	80006f4 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000b36:	7b7b      	ldrb	r3, [r7, #13]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	f040 8084 	bne.w	8000c46 <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000b3e:	89fb      	ldrh	r3, [r7, #14]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d109      	bne.n	8000b58 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000b44:	f001 fe14 	bl	8002770 <OSCHP_GetFrequency>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	4b4b      	ldr	r3, [pc, #300]	; (8000c78 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8000b4c:	fba3 2302 	umull	r2, r3, r3, r2
 8000b50:	0c9b      	lsrs	r3, r3, #18
 8000b52:	059b      	lsls	r3, r3, #22
 8000b54:	617b      	str	r3, [r7, #20]
 8000b56:	e002      	b.n	8000b5e <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000b58:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000b5c:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	fb02 f203 	mul.w	r2, r2, r3
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6c:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	4a42      	ldr	r2, [pc, #264]	; (8000c7c <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8000b72:	fba2 2303 	umull	r2, r3, r2, r3
 8000b76:	091b      	lsrs	r3, r3, #4
 8000b78:	0d9b      	lsrs	r3, r3, #22
 8000b7a:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000b7c:	4a40      	ldr	r2, [pc, #256]	; (8000c80 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000b7e:	4b40      	ldr	r3, [pc, #256]	; (8000c80 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000b88:	4a3d      	ldr	r2, [pc, #244]	; (8000c80 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000b8a:	4b3d      	ldr	r3, [pc, #244]	; (8000c80 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f043 0310 	orr.w	r3, r3, #16
 8000b92:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000b94:	493a      	ldr	r1, [pc, #232]	; (8000c80 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000b96:	4b3a      	ldr	r3, [pc, #232]	; (8000c80 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000b98:	689a      	ldr	r2, [r3, #8]
 8000b9a:	4b3a      	ldr	r3, [pc, #232]	; (8000c84 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8000b9c:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	3a01      	subs	r2, #1
 8000ba2:	0212      	lsls	r2, r2, #8
 8000ba4:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000bac:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000bb8:	4a31      	ldr	r2, [pc, #196]	; (8000c80 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bba:	4b31      	ldr	r3, [pc, #196]	; (8000c80 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bc2:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000bc4:	4a2e      	ldr	r2, [pc, #184]	; (8000c80 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bc6:	4b2e      	ldr	r3, [pc, #184]	; (8000c80 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f023 0310 	bic.w	r3, r3, #16
 8000bce:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000bd0:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bd2:	4b2b      	ldr	r3, [pc, #172]	; (8000c80 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bda:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000bdc:	bf00      	nop
 8000bde:	4b28      	ldr	r3, [pc, #160]	; (8000c80 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f003 0304 	and.w	r3, r3, #4
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d0f9      	beq.n	8000bde <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000bea:	4a25      	ldr	r2, [pc, #148]	; (8000c80 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bec:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f023 0301 	bic.w	r3, r3, #1
 8000bf4:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000bf6:	bf00      	nop
 8000bf8:	4b21      	ldr	r3, [pc, #132]	; (8000c80 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f003 0301 	and.w	r3, r3, #1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1f9      	bne.n	8000bf8 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	4a20      	ldr	r2, [pc, #128]	; (8000c88 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8000c08:	fba2 2303 	umull	r2, r3, r2, r3
 8000c0c:	095b      	lsrs	r3, r3, #5
 8000c0e:	0d9b      	lsrs	r3, r3, #22
 8000c10:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c12:	6a3a      	ldr	r2, [r7, #32]
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d202      	bcs.n	8000c20 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000c1a:	6938      	ldr	r0, [r7, #16]
 8000c1c:	f000 f838 	bl	8000c90 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	085b      	lsrs	r3, r3, #1
 8000c24:	4a19      	ldr	r2, [pc, #100]	; (8000c8c <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8000c26:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2a:	095b      	lsrs	r3, r3, #5
 8000c2c:	0d9b      	lsrs	r3, r3, #22
 8000c2e:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c30:	6a3a      	ldr	r2, [r7, #32]
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d202      	bcs.n	8000c3e <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000c38:	6938      	ldr	r0, [r7, #16]
 8000c3a:	f000 f829 	bl	8000c90 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000c3e:	6a38      	ldr	r0, [r7, #32]
 8000c40:	f000 f826 	bl	8000c90 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000c44:	e015      	b.n	8000c72 <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000c46:	490e      	ldr	r1, [pc, #56]	; (8000c80 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c48:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000c50:	6a3b      	ldr	r3, [r7, #32]
 8000c52:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000c54:	4313      	orrs	r3, r2
 8000c56:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c58:	4a09      	ldr	r2, [pc, #36]	; (8000c80 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f043 0301 	orr.w	r3, r3, #1
 8000c62:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000c64:	bf00      	nop
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d0f9      	beq.n	8000c66 <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000c72:	3718      	adds	r7, #24
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	431bde83 	.word	0x431bde83
 8000c7c:	aaaaaaab 	.word	0xaaaaaaab
 8000c80:	50004710 	.word	0x50004710
 8000c84:	f08080ff 	.word	0xf08080ff
 8000c88:	88888889 	.word	0x88888889
 8000c8c:	b60b60b7 	.word	0xb60b60b7

08000c90 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000c98:	4907      	ldr	r1, [pc, #28]	; (8000cb8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8000cac:	2032      	movs	r0, #50	; 0x32
 8000cae:	f7ff fc27 	bl	8000500 <XMC_SCU_lDelay>
}
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	50004710 	.word	0x50004710

08000cbc <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	70fb      	strb	r3, [r7, #3]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000cd0:	78fb      	ldrb	r3, [r7, #3]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	408b      	lsls	r3, r1
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	401a      	ands	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000ce6:	78bb      	ldrb	r3, [r7, #2]
 8000ce8:	78f9      	ldrb	r1, [r7, #3]
 8000cea:	0049      	lsls	r1, r1, #1
 8000cec:	408b      	lsls	r3, r1
 8000cee:	431a      	orrs	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	675a      	str	r2, [r3, #116]	; 0x74
}
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000d12:	b2db      	uxtb	r3, r3
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	683a      	ldr	r2, [r7, #0]
 8000d2e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop

08000d3c <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8000d46:	2310      	movs	r3, #16
 8000d48:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f000 f88c 	bl	8000e68 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	79db      	ldrb	r3, [r3, #7]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d002      	beq.n	8000d5e <XMC_UART_CH_Init+0x22>
  {
    oversampling = (uint32_t)config->oversampling;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	79db      	ldrb	r3, [r3, #7]
 8000d5c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	4619      	mov	r1, r3
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	f000 f8ca 	bl	8000f00 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	799b      	ldrb	r3, [r3, #6]
 8000d70:	3b01      	subs	r3, #1
 8000d72:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	085b      	lsrs	r3, r3, #1
 8000d78:	3301      	adds	r3, #1
 8000d7a:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	791b      	ldrb	r3, [r3, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	061b      	lsls	r3, r3, #24
 8000d92:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	795b      	ldrb	r3, [r3, #5]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d009      	beq.n	8000db6 <XMC_UART_CH_Init+0x7a>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	795b      	ldrb	r3, [r3, #5]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	041b      	lsls	r3, r3, #16
 8000dae:	431a      	orrs	r2, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	635a      	str	r2, [r3, #52]	; 0x34
 8000db4:	e008      	b.n	8000dc8 <XMC_UART_CH_Init+0x8c>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	791b      	ldrb	r3, [r3, #4]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	041b      	lsls	r3, r3, #16
 8000dc2:	431a      	orrs	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000dce:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	891b      	ldrh	r3, [r3, #8]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	460b      	mov	r3, r1
 8000df2:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000dfa:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d110      	bne.n	8000e24 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8000e02:	bf00      	nop
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ff7b 	bl	8000d00 <XMC_USIC_CH_GetTransmitBufferStatus>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b80      	cmp	r3, #128	; 0x80
 8000e0e:	d0f9      	beq.n	8000e04 <XMC_UART_CH_Transmit+0x1c>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e16:	f7ff ff83 	bl	8000d20 <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 8000e1a:	887a      	ldrh	r2, [r7, #2]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000e22:	e003      	b.n	8000e2c <XMC_UART_CH_Transmit+0x44>
  }
  else
  {
    channel->IN[0U] = data;
 8000e24:	887a      	ldrh	r2, [r7, #2]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop

08000e34 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000e42:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d103      	bne.n	8000e52 <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e4e:	81fb      	strh	r3, [r7, #14]
 8000e50:	e003      	b.n	8000e5a <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8000e58:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8000e5a:	89fb      	ldrh	r3, [r7, #14]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a1a      	ldr	r2, [pc, #104]	; (8000edc <XMC_USIC_CH_Enable+0x74>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d003      	beq.n	8000e80 <XMC_USIC_CH_Enable+0x18>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a19      	ldr	r2, [pc, #100]	; (8000ee0 <XMC_USIC_CH_Enable+0x78>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d103      	bne.n	8000e88 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8000e80:	4818      	ldr	r0, [pc, #96]	; (8000ee4 <XMC_USIC_CH_Enable+0x7c>)
 8000e82:	f000 f979 	bl	8001178 <XMC_USIC_Enable>
 8000e86:	e016      	b.n	8000eb6 <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a17      	ldr	r2, [pc, #92]	; (8000ee8 <XMC_USIC_CH_Enable+0x80>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d003      	beq.n	8000e98 <XMC_USIC_CH_Enable+0x30>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a16      	ldr	r2, [pc, #88]	; (8000eec <XMC_USIC_CH_Enable+0x84>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d103      	bne.n	8000ea0 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8000e98:	4815      	ldr	r0, [pc, #84]	; (8000ef0 <XMC_USIC_CH_Enable+0x88>)
 8000e9a:	f000 f96d 	bl	8001178 <XMC_USIC_Enable>
 8000e9e:	e00a      	b.n	8000eb6 <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a14      	ldr	r2, [pc, #80]	; (8000ef4 <XMC_USIC_CH_Enable+0x8c>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d003      	beq.n	8000eb0 <XMC_USIC_CH_Enable+0x48>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a13      	ldr	r2, [pc, #76]	; (8000ef8 <XMC_USIC_CH_Enable+0x90>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d102      	bne.n	8000eb6 <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8000eb0:	4812      	ldr	r0, [pc, #72]	; (8000efc <XMC_USIC_CH_Enable+0x94>)
 8000eb2:	f000 f961 	bl	8001178 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2203      	movs	r2, #3
 8000eba:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8000ebc:	bf00      	nop
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d0f9      	beq.n	8000ebe <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f023 020f 	bic.w	r2, r3, #15
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40030000 	.word	0x40030000
 8000ee0:	40030200 	.word	0x40030200
 8000ee4:	40030008 	.word	0x40030008
 8000ee8:	48020000 	.word	0x48020000
 8000eec:	48020200 	.word	0x48020200
 8000ef0:	48020008 	.word	0x48020008
 8000ef4:	48024000 	.word	0x48024000
 8000ef8:	48024200 	.word	0x48024200
 8000efc:	48024008 	.word	0x48024008

08000f00 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08e      	sub	sp, #56	; 0x38
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	2b63      	cmp	r3, #99	; 0x63
 8000f10:	d958      	bls.n	8000fc4 <XMC_USIC_CH_SetBaudrate+0xc4>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d055      	beq.n	8000fc4 <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8000f18:	f7ff fba0 	bl	800065c <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	4b2e      	ldr	r3, [pc, #184]	; (8000fd8 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8000f20:	fba3 2302 	umull	r2, r3, r3, r2
 8000f24:	095b      	lsrs	r3, r3, #5
 8000f26:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	4a2b      	ldr	r2, [pc, #172]	; (8000fd8 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8000f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f30:	095b      	lsrs	r3, r3, #5
 8000f32:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 8000f34:	2301      	movs	r3, #1
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8000f3c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8000f42:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000f46:	633b      	str	r3, [r7, #48]	; 0x30
 8000f48:	e022      	b.n	8000f90 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8000f4a:	6a3b      	ldr	r3, [r7, #32]
 8000f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f4e:	fb02 f203 	mul.w	r2, r2, r3
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	6879      	ldr	r1, [r7, #4]
 8000f56:	fb01 f303 	mul.w	r3, r1, r3
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	0a9b      	lsrs	r3, r3, #10
 8000f64:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f6c:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f74:	d209      	bcs.n	8000f8a <XMC_USIC_CH_SetBaudrate+0x8a>
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d205      	bcs.n	8000f8a <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8000f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8000f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	633b      	str	r3, [r7, #48]	; 0x30
 8000f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1d9      	bne.n	8000f4a <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8000f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f98:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	695a      	ldr	r2, [r3, #20]
 8000fa4:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <XMC_USIC_CH_SetBaudrate+0xdc>)
 8000fa6:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	3a01      	subs	r2, #1
 8000fac:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8000fae:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8000fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8000fb6:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000fc2:	e002      	b.n	8000fca <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 8000fca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3738      	adds	r7, #56	; 0x38
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	51eb851f 	.word	0x51eb851f
 8000fdc:	fc0080ef 	.word	0xfc0080ef

08000fe0 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	4613      	mov	r3, r2
 8000fee:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000ff6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8001008:	4013      	ands	r3, r2
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	0211      	lsls	r1, r2, #8
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 8001012:	79fa      	ldrb	r2, [r7, #7]
 8001014:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001016:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 8001018:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	f8ffc0c0 	.word	0xf8ffc0c0

08001030 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	4613      	mov	r3, r2
 800103e:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001046:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 8001058:	4013      	ands	r3, r2
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	0211      	lsls	r1, r2, #8
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 8001062:	79fa      	ldrb	r2, [r7, #7]
 8001064:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 8001066:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001068:	4313      	orrs	r3, r2
 800106a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	efffc0c0 	.word	0xefffc0c0

08001084 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
}

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	460b      	mov	r3, r1
 800108e:	607a      	str	r2, [r7, #4]
 8001090:	72fb      	strb	r3, [r7, #11]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001098:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80010a8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	021b      	lsls	r3, r3, #8
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 80010b0:	431a      	orrs	r2, r3
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
 80010b2:	7afb      	ldrb	r3, [r7, #11]
 80010b4:	061b      	lsls	r3, r3, #24
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 80010b6:	431a      	orrs	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
}
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <XMC_USIC_CH_SetInterruptNodePointer>:

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	460b      	mov	r3, r1
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	699a      	ldr	r2, [r3, #24]
 80010da:	7afb      	ldrb	r3, [r7, #11]
 80010dc:	2107      	movs	r1, #7
 80010de:	fa01 f303 	lsl.w	r3, r1, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
 80010e6:	7afb      	ldrb	r3, [r7, #11]
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80010ee:	431a      	orrs	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop

08001100 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	460b      	mov	r3, r1
 800110a:	607a      	str	r2, [r7, #4]
 800110c:	72fb      	strb	r3, [r7, #11]
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001114:	7afb      	ldrb	r3, [r7, #11]
 8001116:	2107      	movs	r1, #7
 8001118:	fa01 f303 	lsl.w	r3, r1, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 8001120:	7afb      	ldrb	r3, [r7, #11]
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001128:	431a      	orrs	r2, r3
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (service_request << (uint32_t)interrupt_node));
}
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop

0800113c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	460b      	mov	r3, r1
 8001146:	607a      	str	r2, [r7, #4]
 8001148:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001150:	7afb      	ldrb	r3, [r7, #11]
 8001152:	2107      	movs	r1, #7
 8001154:	fa01 f303 	lsl.w	r3, r1, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 800115c:	7afb      	ldrb	r3, [r7, #11]
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001164:	431a      	orrs	r2, r3
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (service_request << (uint32_t)interrupt_node));
}
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop

08001178 <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a0d      	ldr	r2, [pc, #52]	; (80011b8 <XMC_USIC_Enable+0x40>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d104      	bne.n	8001192 <XMC_USIC_Enable+0x1a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8001188:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800118c:	f7ff fa4a 	bl	8000624 <XMC_SCU_RESET_DeassertPeripheralReset>
 8001190:	e00e      	b.n	80011b0 <XMC_USIC_Enable+0x38>
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a09      	ldr	r2, [pc, #36]	; (80011bc <XMC_USIC_Enable+0x44>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d103      	bne.n	80011a2 <XMC_USIC_Enable+0x2a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 800119a:	4809      	ldr	r0, [pc, #36]	; (80011c0 <XMC_USIC_Enable+0x48>)
 800119c:	f7ff fa42 	bl	8000624 <XMC_SCU_RESET_DeassertPeripheralReset>
 80011a0:	e006      	b.n	80011b0 <XMC_USIC_Enable+0x38>
#endif	
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <XMC_USIC_Enable+0x4c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d102      	bne.n	80011b0 <XMC_USIC_Enable+0x38>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 80011aa:	4807      	ldr	r0, [pc, #28]	; (80011c8 <XMC_USIC_Enable+0x50>)
 80011ac:	f7ff fa3a 	bl	8000624 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40030008 	.word	0x40030008
 80011bc:	48020008 	.word	0x48020008
 80011c0:	10000080 	.word	0x10000080
 80011c4:	48024008 	.word	0x48024008
 80011c8:	10000100 	.word	0x10000100

080011cc <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
                                                           const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 80011d6:	783b      	ldrb	r3, [r7, #0]
 80011d8:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	461a      	mov	r2, r3
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 80011e0:	78bb      	ldrb	r3, [r7, #2]
 80011e2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 80011ea:	4313      	orrs	r3, r2
 80011ec:	60fb      	str	r3, [r7, #12]
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	68fa      	ldr	r2, [r7, #12]
 80011f2:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80011f6:	78fb      	ldrb	r3, [r7, #3]
 80011f8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
 8001200:	78fb      	ldrb	r3, [r7, #3]
 8001202:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001206:	b2db      	uxtb	r3, r3
 8001208:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 800120a:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001212:	b2db      	uxtb	r3, r3
 8001214:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8001216:	4313      	orrs	r3, r2
 8001218:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4313      	orrs	r3, r2
 8001224:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001246:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop

0800125c <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800126a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop

08001280 <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 8001284:	2001      	movs	r0, #1
 8001286:	f7ff f9cd 	bl	8000624 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 800128a:	bd80      	pop	{r7, pc}

0800128c <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  uint32_t reg;
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 8001296:	f7ff fff3 	bl	8001280 <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	695a      	ldr	r2, [r3, #20]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	68da      	ldr	r2, [r3, #12]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	691a      	ldr	r2, [r3, #16]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop

080012e0 <XMC_VADC_GLOBAL_InputClassInit>:

/* API to Set the Global IClass registers*/
void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	4613      	mov	r3, r2
 80012ee:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_CONV_EMUX))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLASS_SET))

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d109      	bne.n	800130a <XMC_VADC_GLOBAL_InputClassInit+0x2a>
  {
#endif
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	f240 731f 	movw	r3, #1823	; 0x71f
 80012fc:	4013      	ands	r3, r2
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	6839      	ldr	r1, [r7, #0]
 8001302:	3128      	adds	r1, #40	; 0x28
 8001304:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001308:	e007      	b.n	800131a <XMC_VADC_GLOBAL_InputClassInit+0x3a>
                                      (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk);
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  }
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <XMC_VADC_GLOBAL_InputClassInit+0x44>)
 800130e:	4013      	ands	r3, r2
 8001310:	68fa      	ldr	r2, [r7, #12]
 8001312:	6839      	ldr	r1, [r7, #0]
 8001314:	3128      	adds	r1, #40	; 0x28
 8001316:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
#endif
}
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	071f0000 	.word	0x071f0000

08001328 <XMC_VADC_GLOBAL_StartupCalibration>:

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001336:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001340:	2300      	movs	r3, #0
 8001342:	73fb      	strb	r3, [r7, #15]
 8001344:	e016      	b.n	8001374 <XMC_VADC_GLOBAL_StartupCalibration+0x4c>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	4a0e      	ldr	r2, [pc, #56]	; (8001384 <XMC_VADC_GLOBAL_StartupCalibration+0x5c>)
 800134a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134e:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001356:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d007      	beq.n	800136e <XMC_VADC_GLOBAL_StartupCalibration+0x46>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 800135e:	bf00      	nop
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f8      	bne.n	8001360 <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	3301      	adds	r3, #1
 8001372:	73fb      	strb	r3, [r7, #15]
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	2b03      	cmp	r3, #3
 8001378:	d9e5      	bls.n	8001346 <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    /* NOP */
  }
#endif
}
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	08002c04 	.word	0x08002c04

08001388 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>:
  global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
}

/* API to bind request source event with a service request line */
void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	70fb      	strb	r3, [r7, #3]
  uint32_t node;
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	2b03      	cmp	r3, #3
 8001398:	d903      	bls.n	80013a2 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1a>
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 800139a:	78fb      	ldrb	r3, [r7, #3]
 800139c:	3b04      	subs	r3, #4
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	e001      	b.n	80013a6 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1e>
  }
  else
  {
    node = (uint32_t)sr;
 80013a2:	78fb      	ldrb	r3, [r7, #3]
 80013a4:	60fb      	str	r3, [r7, #12]
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013ac:	f023 020f 	bic.w	r2, r3, #15
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	431a      	orrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <XMC_VADC_GROUP_Init>:

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	6859      	ldr	r1, [r3, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	2300      	movs	r3, #0
 80013e4:	f000 f828 	bl	8001438 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	6859      	ldr	r1, [r3, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	2300      	movs	r3, #0
 80013f2:	f000 f821 	bl	8001438 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	6899      	ldr	r1, [r3, #8]
 80013fc:	2200      	movs	r2, #0
 80013fe:	2301      	movs	r3, #1
 8001400:	f000 f81a 	bl	8001438 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	6899      	ldr	r1, [r3, #8]
 800140a:	2201      	movs	r2, #1
 800140c:	2301      	movs	r3, #1
 800140e:	f000 f813 	bl	8001438 <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	691a      	ldr	r2, [r3, #16]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	68da      	ldr	r2, [r3, #12]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	6819      	ldr	r1, [r3, #0]
 800142c:	f7ff fece 	bl	80011cc <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop

08001438 <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8001438:	b480      	push	{r7}
 800143a:	b08d      	sub	sp, #52	; 0x34
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	4613      	mov	r3, r2
 8001446:	71fb      	strb	r3, [r7, #7]

  /* 
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d113      	bne.n	8001476 <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 800144e:	2308      	movs	r3, #8
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 8001452:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 8001458:	2300      	movs	r3, #0
 800145a:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 800145c:	231f      	movs	r3, #31
 800145e:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 8001460:	7a3b      	ldrb	r3, [r7, #8]
 8001462:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001466:	b2db      	uxtb	r3, r3
 8001468:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 800146a:	7a7b      	ldrb	r3, [r7, #9]
 800146c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001470:	b2db      	uxtb	r3, r3
 8001472:	76fb      	strb	r3, [r7, #27]
 8001474:	e013      	b.n	800149e <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 8001476:	2318      	movs	r3, #24
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 800147a:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 8001480:	2310      	movs	r3, #16
 8001482:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 8001484:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 8001488:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 800148a:	7abb      	ldrb	r3, [r7, #10]
 800148c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001490:	b2db      	uxtb	r3, r3
 8001492:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 8001494:	7afb      	ldrb	r3, [r7, #11]
 8001496:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	3228      	adds	r2, #40	; 0x28
 80014a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a8:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	43db      	mvns	r3, r3
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	4013      	ands	r3, r2
 80014b2:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 80014b4:	7efa      	ldrb	r2, [r7, #27]
 80014b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	4313      	orrs	r3, r2
 80014c0:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 80014c2:	6a3b      	ldr	r3, [r7, #32]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	4013      	ands	r3, r2
 80014ca:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 80014cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ce:	69fa      	ldr	r2, [r7, #28]
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	697a      	ldr	r2, [r7, #20]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	3228      	adds	r2, #40	; 0x28
 80014e0:	6979      	ldr	r1, [r7, #20]
 80014e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80014e6:	3734      	adds	r7, #52	; 0x34
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001502:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f023 0303 	bic.w	r3, r3, #3
 800150a:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 800150c:	78fb      	ldrb	r3, [r7, #3]
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	4313      	orrs	r3, r2
 8001512:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop

08001528 <XMC_VADC_GLOBAL_BackgroundInit>:
}
#endif

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001532:	2300      	movs	r3, #0
 8001534:	75fb      	strb	r3, [r7, #23]
 8001536:	e009      	b.n	800154c <XMC_VADC_GLOBAL_BackgroundInit+0x24>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 8001538:	7dfb      	ldrb	r3, [r7, #23]
 800153a:	4a39      	ldr	r2, [pc, #228]	; (8001620 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 800153c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fe8b 	bl	800125c <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001546:	7dfb      	ldrb	r3, [r7, #23]
 8001548:	3301      	adds	r3, #1
 800154a:	75fb      	strb	r3, [r7, #23]
 800154c:	7dfb      	ldrb	r3, [r7, #23]
 800154e:	2b03      	cmp	r3, #3
 8001550:	d9f2      	bls.n	8001538 <XMC_VADC_GLOBAL_BackgroundInit+0x10>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  
  conv_start_mask = (uint32_t) 0;
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	f003 0303 	and.w	r3, r3, #3
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	d002      	beq.n	800156a <XMC_VADC_GLOBAL_BackgroundInit+0x42>
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 8001564:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001568:	613b      	str	r3, [r7, #16]
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800156a:	2300      	movs	r3, #0
 800156c:	75fb      	strb	r3, [r7, #23]
 800156e:	e021      	b.n	80015b4 <XMC_VADC_GLOBAL_BackgroundInit+0x8c>
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
 8001570:	7dfb      	ldrb	r3, [r7, #23]
 8001572:	4a2b      	ldr	r2, [pc, #172]	; (8001620 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800157c:	60fb      	str	r3, [r7, #12]

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001584:	60fb      	str	r3, [r7, #12]

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800158e:	b2db      	uxtb	r3, r3
 8001590:	021b      	lsls	r3, r3, #8
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	4313      	orrs	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]
  
    /* Program the start mode */
    reg |= conv_start_mask;
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	60fb      	str	r3, [r7, #12]

    g_xmc_vadc_group_array[i]->ARBPR = reg;
 80015a0:	7dfb      	ldrb	r3, [r7, #23]
 80015a2:	4a1f      	ldr	r2, [pc, #124]	; (8001620 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 80015a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80015ae:	7dfb      	ldrb	r3, [r7, #23]
 80015b0:	3301      	adds	r3, #1
 80015b2:	75fb      	strb	r3, [r7, #23]
 80015b4:	7dfb      	ldrb	r3, [r7, #23]
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d9da      	bls.n	8001570 <XMC_VADC_GLOBAL_BackgroundInit+0x48>
  
  }
  #endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f043 0201 	orr.w	r2, r3, #1
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d107      	bne.n	80015f8 <XMC_VADC_GLOBAL_BackgroundInit+0xd0>
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80015ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	75fb      	strb	r3, [r7, #23]
 80015fc:	e009      	b.n	8001612 <XMC_VADC_GLOBAL_BackgroundInit+0xea>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 80015fe:	7dfb      	ldrb	r3, [r7, #23]
 8001600:	4a07      	ldr	r2, [pc, #28]	; (8001620 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fe16 	bl	8001238 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800160c:	7dfb      	ldrb	r3, [r7, #23]
 800160e:	3301      	adds	r3, #1
 8001610:	75fb      	strb	r3, [r7, #23]
 8001612:	7dfb      	ldrb	r3, [r7, #23]
 8001614:	2b03      	cmp	r3, #3
 8001616:	d9f2      	bls.n	80015fe <XMC_VADC_GLOBAL_BackgroundInit+0xd6>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  #endif
  
}
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	08002c04 	.word	0x08002c04

08001624 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 8001624:	b480      	push	{r7}
 8001626:	b089      	sub	sp, #36	; 0x24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	7a1b      	ldrb	r3, [r3, #8]
 8001634:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800163c:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	2201      	movs	r2, #1
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43db      	mvns	r3, r3
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	4013      	ands	r3, r2
 800164c:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	4313      	orrs	r3, r2
 800165a:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7a5b      	ldrb	r3, [r3, #9]
 8001668:	b25b      	sxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	db29      	blt.n	80016c2 <XMC_VADC_GROUP_ChannelInit+0x9e>
  {
    mask = (uint32_t)0;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d10a      	bne.n	800168e <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 8001678:	2308      	movs	r3, #8
 800167a:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001682:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800168c:	e00c      	b.n	80016a8 <XMC_VADC_GROUP_ChannelInit+0x84>
    }
    else if ((uint32_t)0 == ch_num)
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d109      	bne.n	80016a8 <XMC_VADC_GROUP_ChannelInit+0x84>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800169e:	f023 021f 	bic.w	r2, r3, #31
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	7a52      	ldrb	r2, [r2, #9]
 80016b2:	b251      	sxtb	r1, r2
 80016b4:	69fa      	ldr	r2, [r7, #28]
 80016b6:	fa01 f202 	lsl.w	r2, r1, r2
 80016ba:	431a      	orrs	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	431a      	orrs	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6819      	ldr	r1, [r3, #0]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	3280      	adds	r2, #128	; 0x80
 80016de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 80016e2:	3724      	adds	r7, #36	; 0x24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <_init>:
  }
}

/* Init */
void _init(void)
{}
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <XMC_USIC_CH_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  channel->CCR |= event;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	431a      	orrs	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	43db      	mvns	r3, r3
 800172a:	401a      	ands	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop

0800173c <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001748:	b2db      	uxtb	r3, r3
 800174a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800174e:	b2db      	uxtb	r3, r3
}
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800176c:	409a      	lsls	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	669a      	str	r2, [r3, #104]	; 0x68
}
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	43db      	mvns	r3, r3
 80017b4:	401a      	ands	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop

080017c8 <XMC_USIC_CH_TXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017d6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <XMC_USIC_CH_TXFIFO_IsFull>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80017f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	bf14      	ite	ne
 80017fa:	2301      	movne	r3, #1
 80017fc:	2300      	moveq	r3, #0
 80017fe:	b2db      	uxtb	r3, r3
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <XMC_USIC_CH_TXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800181a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800181e:	2b00      	cmp	r3, #0
 8001820:	bf14      	ite	ne
 8001822:	2301      	movne	r3, #1
 8001824:	2300      	moveq	r3, #0
 8001826:	b2db      	uxtb	r3, r3
}
 8001828:	4618      	mov	r0, r3
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	43db      	mvns	r3, r3
 8001848:	401a      	ands	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop

0800185c <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	2b00      	cmp	r3, #0
 8001870:	bf14      	ite	ne
 8001872:	2301      	movne	r3, #1
 8001874:	2300      	moveq	r3, #0
 8001876:	b2db      	uxtb	r3, r3
}
 8001878:	4618      	mov	r0, r3
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <UART_Init>:
 *          UART_SUCCESS: for successful UART initialization.<BR>
 *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 *
 */
UART_STATUS_t UART_Init(const UART_t *const handle)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 800188c:	2300      	movs	r3, #0
 800188e:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))))

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	4798      	blx	r3
 8001898:	4603      	mov	r3, r0
 800189a:	73fb      	strb	r3, [r7, #15]

  return status;
 800189c:	7bfb      	ldrb	r3, [r7, #15]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop

080018a8 <UART_Transmit>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 80018b4:	2304      	movs	r3, #4
 80018b6:	75fb      	strb	r3, [r7, #23]

  switch(handle->config->transmit_mode)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d000      	beq.n	80018c6 <UART_Transmit+0x1e>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartTransmitPolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
 80018c4:	e007      	b.n	80018d6 <UART_Transmit+0x2e>

  switch(handle->config->transmit_mode)
  {
#ifdef UART_TX_INTERRUPT_USED
  case UART_TRANSFER_MODE_INTERRUPT:
    ret_stat = UART_StartTransmitIRQ(handle, data_ptr, count);
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	68b9      	ldr	r1, [r7, #8]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	f000 f808 	bl	80018e0 <UART_StartTransmitIRQ>
 80018d0:	4603      	mov	r3, r0
 80018d2:	75fb      	strb	r3, [r7, #23]
    break;
 80018d4:	bf00      	nop
    break;
#endif
  default:
    break;
  }
  return ret_stat;
 80018d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <UART_StartTransmitIRQ>:
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 80018ec:	2304      	movs	r3, #4
 80018ee:	75fb      	strb	r3, [r7, #23]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	613b      	str	r3, [r7, #16]

  XMC_ASSERT("UART_StartTransmitIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->transmit_mode == UART_TRANSFER_MODE_INTERRUPT)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d144      	bne.n	800198c <UART_StartTransmitIRQ+0xac>
  {
    ret_stat = UART_STATUS_BUSY;
 8001902:	2302      	movs	r3, #2
 8001904:	75fb      	strb	r3, [r7, #23]
    if (ptr_runtime->tx_busy == false)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	7e1b      	ldrb	r3, [r3, #24]
 800190a:	b2db      	uxtb	r3, r3
 800190c:	f083 0301 	eor.w	r3, r3, #1
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d03a      	beq.n	800198c <UART_StartTransmitIRQ+0xac>
    {
      /*If there is no transmission in progress*/
      if ((data_ptr != NULL) && (count > 0U))
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d035      	beq.n	8001988 <UART_StartTransmitIRQ+0xa8>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d032      	beq.n	8001988 <UART_StartTransmitIRQ+0xa8>
      {
        /*Obtain the address of data, size of data*/
        ptr_runtime->tx_data = data_ptr;
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	601a      	str	r2, [r3, #0]
        ptr_runtime->tx_data_count = count;
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	609a      	str	r2, [r3, #8]
        /*Initialize to first index and set the busy flag*/
        ptr_runtime->tx_data_index = 0U;
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	2200      	movs	r2, #0
 8001932:	60da      	str	r2, [r3, #12]
        ptr_runtime->tx_busy = true;
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	2201      	movs	r2, #1
 8001938:	761a      	strb	r2, [r3, #24]

        /*Enable the transmit buffer event*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00c      	beq.n	8001960 <UART_StartTransmitIRQ+0x80>
        {
          /*Clear the transmit FIFO*/
          XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ff3c 	bl	80017c8 <XMC_USIC_CH_TXFIFO_Flush>
          /*Enable transmit buffer interrupt*/
          XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800195a:	f7ff ff0f 	bl	800177c <XMC_USIC_CH_TXFIFO_EnableEvent>
 800195e:	e006      	b.n	800196e <UART_StartTransmitIRQ+0x8e>
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800196a:	f7ff fec5 	bl	80016f8 <XMC_USIC_CH_EnableEvent>
        }
        ret_stat = UART_STATUS_SUCCESS;
 800196e:	2300      	movs	r3, #0
 8001970:	75fb      	strb	r3, [r7, #23]
        /*Trigger the transmit buffer interrupt*/
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800197e:	4610      	mov	r0, r2
 8001980:	4619      	mov	r1, r3
 8001982:	f7ff feeb 	bl	800175c <XMC_USIC_CH_TriggerServiceRequest>
 8001986:	e001      	b.n	800198c <UART_StartTransmitIRQ+0xac>
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
 8001988:	2303      	movs	r3, #3
 800198a:	75fb      	strb	r3, [r7, #23]
      }
    }
  }
  return ret_stat;
 800198c:	7dfb      	ldrb	r3, [r7, #23]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop

08001998 <UART_lTransmitHandler>:
 *  * param[in]  handle UART APP handle pointer of type UART_t*
 *
 *  * return void
 */
void UART_lTransmitHandler(const UART_t * const handle)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	60fb      	str	r3, [r7, #12]

  if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	68da      	ldr	r2, [r3, #12]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d240      	bcs.n	8001a34 <UART_lTransmitHandler+0x9c>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d027      	beq.n	8001a0e <UART_lTransmitHandler+0x76>
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 80019be:	e01a      	b.n	80019f6 <UART_lTransmitHandler+0x5e>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	68da      	ldr	r2, [r3, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d212      	bcs.n	80019f2 <UART_lTransmitHandler+0x5a>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6819      	ldr	r1, [r3, #0]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	4413      	add	r3, r2
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	4608      	mov	r0, r1
 80019e0:	4619      	mov	r1, r3
 80019e2:	f7ff fa01 	bl	8000de8 <XMC_UART_CH_Transmit>
          (ptr_runtime->tx_data_index)++;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	60da      	str	r2, [r3, #12]
 80019f0:	e001      	b.n	80019f6 <UART_lTransmitHandler+0x5e>
        }
        else
        {
          break;
 80019f2:	bf00      	nop
 80019f4:	e053      	b.n	8001a9e <UART_lTransmitHandler+0x106>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fef2 	bl	80017e4 <XMC_USIC_CH_TXFIFO_IsFull>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f083 0301 	eor.w	r3, r3, #1
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1d9      	bne.n	80019c0 <UART_lTransmitHandler+0x28>
 8001a0c:	e047      	b.n	8001a9e <UART_lTransmitHandler+0x106>
      }
    }
    else
    {
      /*When Transmit FIFO is disabled*/
      XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6819      	ldr	r1, [r3, #0]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	4608      	mov	r0, r1
 8001a22:	4619      	mov	r1, r3
 8001a24:	f7ff f9e0 	bl	8000de8 <XMC_UART_CH_Transmit>
      (ptr_runtime->tx_data_index)++;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	1c5a      	adds	r2, r3, #1
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	e034      	b.n	8001a9e <UART_lTransmitHandler+0x106>
    }
  }
  else
  {
    if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff fee7 	bl	800180c <XMC_USIC_CH_TXFIFO_IsEmpty>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d02c      	beq.n	8001a9e <UART_lTransmitHandler+0x106>
    {
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d007      	beq.n	8001a60 <UART_lTransmitHandler+0xc8>
      {
        /*Disable the transmit FIFO event*/
        XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a5a:	f7ff fea1 	bl	80017a0 <XMC_USIC_CH_TXFIFO_DisableEvent>
 8001a5e:	e006      	b.n	8001a6e <UART_lTransmitHandler+0xd6>
      }
      else
      {
        /*Disable the standard transmit event*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a6a:	f7ff fe55 	bl	8001718 <XMC_USIC_CH_DisableEvent>
      }

      /*Wait for the transmit buffer to be free to ensure that all data is transmitted*/
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001a6e:	bf00      	nop
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fe61 	bl	800173c <XMC_USIC_CH_GetTransmitBufferStatus>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b80      	cmp	r3, #128	; 0x80
 8001a7e:	d0f7      	beq.n	8001a70 <UART_lTransmitHandler+0xd8>
      {

      }
      /*All data is transmitted*/
      ptr_runtime->tx_busy = false;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	761a      	strb	r2, [r3, #24]
      ptr_runtime->tx_data = NULL;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]

      if (handle->config->tx_cbhandler != NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <UART_lTransmitHandler+0x106>
      {
        /*Execute the callback function provided in the UART APP UI*/
        handle->config->tx_cbhandler();
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	4798      	blx	r3
      }
    }
  }
}
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <UART_lReceiveHandler>:
 * param[in]  handle UART APP handle pointer of type UART_t*
 *
 * return void
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
 8001aa4:	b590      	push	{r4, r7, lr}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	60fb      	str	r3, [r7, #12]

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d04e      	beq.n	8001b5c <UART_lReceiveHandler+0xb8>
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8001abe:	e032      	b.n	8001b26 <UART_lReceiveHandler+0x82>
    {
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	695a      	ldr	r2, [r3, #20]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d211      	bcs.n	8001af0 <UART_lReceiveHandler+0x4c>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	18d4      	adds	r4, r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff f9aa 	bl	8000e34 <XMC_UART_CH_GetReceivedData>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	7023      	strb	r3, [r4, #0]
        (ptr_runtime->rx_data_index)++;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	1c5a      	adds	r2, r3, #1
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	615a      	str	r2, [r3, #20]
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	695a      	ldr	r2, [r3, #20]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d114      	bne.n	8001b26 <UART_lReceiveHandler+0x82>
      {
        /*Reception complete*/
        ptr_runtime->rx_busy = false;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	765a      	strb	r2, [r3, #25]
        /*Disable both standard receive and alternative receive FIFO events*/
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8001b0c:	f7ff fe92 	bl	8001834 <XMC_USIC_CH_RXFIFO_DisableEvent>
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        if (handle->config->rx_cbhandler != NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d004      	beq.n	8001b24 <UART_lReceiveHandler+0x80>
        {
          /*Execute the 'End of reception' callback function*/
          handle->config->rx_cbhandler();
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	4798      	blx	r3
        }
        break;
 8001b22:	e00b      	b.n	8001b3c <UART_lReceiveHandler+0x98>
 8001b24:	e00a      	b.n	8001b3c <UART_lReceiveHandler+0x98>
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fe96 	bl	800185c <XMC_USIC_CH_RXFIFO_IsEmpty>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f083 0301 	eor.w	r3, r3, #1
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1c1      	bne.n	8001ac0 <UART_lReceiveHandler+0x1c>
        }
        break;
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	695a      	ldr	r2, [r3, #20]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d23a      	bcs.n	8001bbe <UART_lReceiveHandler+0x11a>
    {
      UART_lReconfigureRxFIFO(handle,
          (uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	695b      	ldr	r3, [r3, #20]
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
    {
      UART_lReconfigureRxFIFO(handle,
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	4619      	mov	r1, r3
 8001b56:	f000 f835 	bl	8001bc4 <UART_lReconfigureRxFIFO>
 8001b5a:	e030      	b.n	8001bbe <UART_lReceiveHandler+0x11a>
    }
  }
  else
  {
    /*When RxFIFO is disabled*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	695a      	ldr	r2, [r3, #20]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d211      	bcs.n	8001b8c <UART_lReceiveHandler+0xe8>
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	18d4      	adds	r4, r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff f95c 	bl	8000e34 <XMC_UART_CH_GetReceivedData>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	7023      	strb	r3, [r4, #0]
      (ptr_runtime->rx_data_index)++;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	1c5a      	adds	r2, r3, #1
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	615a      	str	r2, [r3, #20]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	695a      	ldr	r2, [r3, #20]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d112      	bne.n	8001bbe <UART_lReceiveHandler+0x11a>
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	765a      	strb	r2, [r3, #25]
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001ba8:	f7ff fdb6 	bl	8001718 <XMC_USIC_CH_DisableEvent>
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      if (handle->config->rx_cbhandler != NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <UART_lReceiveHandler+0x11a>
      {
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	4798      	blx	r3
      }
    }
  }
}
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd90      	pop	{r4, r7, pc}

08001bc4 <UART_lReconfigureRxFIFO>:
 * param[in] uint8_t  number of bytes to be received.
 *
 * return void.
 */
static void UART_lReconfigureRxFIFO(const UART_t * const handle, uint32_t data_size)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001bda:	461a      	mov	r2, r3
 8001bdc:	2301      	movs	r3, #1
 8001bde:	4093      	lsls	r3, r2
 8001be0:	60bb      	str	r3, [r7, #8]
  /*If data size is more than FIFO size, configure the limit to the FIFO size*/
  if (data_size < fifo_size)
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d203      	bcs.n	8001bf2 <UART_lReconfigureRxFIFO+0x2e>
  {
    ret_limit_val = (uint32_t)(data_size - 1U);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	3b01      	subs	r3, #1
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	e002      	b.n	8001bf8 <UART_lReconfigureRxFIFO+0x34>
  }
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	60fb      	str	r3, [r7, #12]
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681a      	ldr	r2, [r3, #0]
        handle->config->rx_fifo_size, ret_limit_val);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 8001c00:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001c04:	4610      	mov	r0, r2
 8001c06:	4619      	mov	r1, r3
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	f7ff fa3b 	bl	8001084 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
        handle->config->rx_fifo_size, ret_limit_val);
}
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c18:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <NVIC_GetPriorityGrouping+0x18>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c20:	0a1b      	lsrs	r3, r3, #8
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001c3a:	4908      	ldr	r1, [pc, #32]	; (8001c5c <NVIC_EnableIRQ+0x2c>)
 8001c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c40:	095b      	lsrs	r3, r3, #5
 8001c42:	79fa      	ldrb	r2, [r7, #7]
 8001c44:	f002 021f 	and.w	r2, r2, #31
 8001c48:	2001      	movs	r0, #1
 8001c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	e000e100 	.word	0xe000e100

08001c60 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	6039      	str	r1, [r7, #0]
 8001c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	da0b      	bge.n	8001c8c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c74:	490d      	ldr	r1, [pc, #52]	; (8001cac <NVIC_SetPriority+0x4c>)
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	f003 030f 	and.w	r3, r3, #15
 8001c7c:	3b04      	subs	r3, #4
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	0092      	lsls	r2, r2, #2
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	440b      	add	r3, r1
 8001c88:	761a      	strb	r2, [r3, #24]
 8001c8a:	e009      	b.n	8001ca0 <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8c:	4908      	ldr	r1, [pc, #32]	; (8001cb0 <NVIC_SetPriority+0x50>)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	0092      	lsls	r2, r2, #2
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000ed00 	.word	0xe000ed00
 8001cb0:	e000e100 	.word	0xe000e100

08001cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b089      	sub	sp, #36	; 0x24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f1c3 0307 	rsb	r3, r3, #7
 8001cce:	2b06      	cmp	r3, #6
 8001cd0:	bf28      	it	cs
 8001cd2:	2306      	movcs	r3, #6
 8001cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3306      	adds	r3, #6
 8001cda:	2b06      	cmp	r3, #6
 8001cdc:	d902      	bls.n	8001ce4 <NVIC_EncodePriority+0x30>
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	e000      	b.n	8001ce6 <NVIC_EncodePriority+0x32>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	2201      	movs	r2, #1
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	1e5a      	subs	r2, r3, #1
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	401a      	ands	r2, r3
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001d02:	1e59      	subs	r1, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001d08:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3724      	adds	r7, #36	; 0x24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop

08001d18 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	70fb      	strb	r3, [r7, #3]
 8001d24:	4613      	mov	r3, r2
 8001d26:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8001d28:	78f8      	ldrb	r0, [r7, #3]
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	3306      	adds	r3, #6
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8001d3a:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	1d83      	adds	r3, r0, #6
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop

08001d54 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	f023 030f 	bic.w	r3, r3, #15
 8001d64:	f043 0202 	orr.w	r2, r3, #2
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop

08001d78 <UART_0_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t UART_0_init()
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	71fb      	strb	r3, [r7, #7]
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, 4U, &UART_0_rx_pin_config);
 8001d82:	482d      	ldr	r0, [pc, #180]	; (8001e38 <UART_0_init+0xc0>)
 8001d84:	2104      	movs	r1, #4
 8001d86:	4a2d      	ldr	r2, [pc, #180]	; (8001e3c <UART_0_init+0xc4>)
 8001d88:	f7fe fb0e 	bl	80003a8 <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH0, &UART_0_channel_config);
 8001d8c:	482c      	ldr	r0, [pc, #176]	; (8001e40 <UART_0_init+0xc8>)
 8001d8e:	492d      	ldr	r1, [pc, #180]	; (8001e44 <UART_0_init+0xcc>)
 8001d90:	f7fe ffd4 	bl	8000d3c <XMC_UART_CH_Init>
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH0, XMC_USIC_CH_INPUT_DX0, 1U);
 8001d94:	482a      	ldr	r0, [pc, #168]	; (8001e40 <UART_0_init+0xc8>)
 8001d96:	2100      	movs	r1, #0
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f7ff ffbd 	bl	8001d18 <XMC_USIC_CH_SetInputSource>
  /*Configure transmit FIFO*/
  XMC_USIC_CH_TXFIFO_Configure(XMC_UART0_CH0,
 8001d9e:	4828      	ldr	r0, [pc, #160]	; (8001e40 <UART_0_init+0xc8>)
 8001da0:	2120      	movs	r1, #32
 8001da2:	2205      	movs	r2, #5
 8001da4:	2301      	movs	r3, #1
 8001da6:	f7ff f91b 	bl	8000fe0 <XMC_USIC_CH_TXFIFO_Configure>
        32U,
        XMC_USIC_CH_FIFO_SIZE_32WORDS,
        1U);
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART0_CH0,
 8001daa:	4825      	ldr	r0, [pc, #148]	; (8001e40 <UART_0_init+0xc8>)
 8001dac:	2100      	movs	r1, #0
 8001dae:	2205      	movs	r2, #5
 8001db0:	2300      	movs	r3, #0
 8001db2:	f7ff f93d 	bl	8001030 <XMC_USIC_CH_RXFIFO_Configure>
        0U,
        XMC_USIC_CH_FIFO_SIZE_32WORDS,
        0U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART0_CH0);
 8001db6:	4822      	ldr	r0, [pc, #136]	; (8001e40 <UART_0_init+0xc8>)
 8001db8:	f7ff ffcc 	bl	8001d54 <XMC_UART_CH_Start>

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, 5U, &UART_0_tx_pin_config);
 8001dbc:	481e      	ldr	r0, [pc, #120]	; (8001e38 <UART_0_init+0xc0>)
 8001dbe:	2105      	movs	r1, #5
 8001dc0:	4a21      	ldr	r2, [pc, #132]	; (8001e48 <UART_0_init+0xd0>)
 8001dc2:	f7fe faf1 	bl	80003a8 <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 8001dc6:	481e      	ldr	r0, [pc, #120]	; (8001e40 <UART_0_init+0xc8>)
 8001dc8:	2110      	movs	r1, #16
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f7ff f97c 	bl	80010c8 <XMC_USIC_CH_SetInterruptNodePointer>
     0U);
  /*Set service request for tx FIFO transmit interrupt*/
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
 8001dd0:	481b      	ldr	r0, [pc, #108]	; (8001e40 <UART_0_init+0xc8>)
 8001dd2:	2110      	movs	r1, #16
 8001dd4:	2203      	movs	r2, #3
 8001dd6:	f7ff f993 	bl	8001100 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
      3U);
  /*Set service request for rx FIFO receive interrupt*/
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
 8001dda:	4819      	ldr	r0, [pc, #100]	; (8001e40 <UART_0_init+0xc8>)
 8001ddc:	2110      	movs	r1, #16
 8001dde:	2205      	movs	r2, #5
 8001de0:	f7ff f9ac 	bl	800113c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x5U);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
 8001de4:	4816      	ldr	r0, [pc, #88]	; (8001e40 <UART_0_init+0xc8>)
 8001de6:	2113      	movs	r1, #19
 8001de8:	2205      	movs	r2, #5
 8001dea:	f7ff f9a7 	bl	800113c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x5U);
  /*Set priority and enable NVIC node for transmit interrupt*/
  NVIC_SetPriority((IRQn_Type)87, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8001dee:	f7ff ff11 	bl	8001c14 <NVIC_GetPriorityGrouping>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4618      	mov	r0, r3
 8001df6:	213f      	movs	r1, #63	; 0x3f
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f7ff ff5b 	bl	8001cb4 <NVIC_EncodePriority>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2057      	movs	r0, #87	; 0x57
 8001e02:	4619      	mov	r1, r3
 8001e04:	f7ff ff2c 	bl	8001c60 <NVIC_SetPriority>
                        63U, 0U));
  NVIC_EnableIRQ((IRQn_Type)87);
 8001e08:	2057      	movs	r0, #87	; 0x57
 8001e0a:	f7ff ff11 	bl	8001c30 <NVIC_EnableIRQ>
  /*Set priority and enable NVIC node for receive interrupt*/
  NVIC_SetPriority((IRQn_Type)89, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8001e0e:	f7ff ff01 	bl	8001c14 <NVIC_GetPriorityGrouping>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4618      	mov	r0, r3
 8001e16:	213f      	movs	r1, #63	; 0x3f
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f7ff ff4b 	bl	8001cb4 <NVIC_EncodePriority>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2059      	movs	r0, #89	; 0x59
 8001e22:	4619      	mov	r1, r3
 8001e24:	f7ff ff1c 	bl	8001c60 <NVIC_SetPriority>
                      63U, 0U));
  NVIC_EnableIRQ((IRQn_Type)89);
 8001e28:	2059      	movs	r0, #89	; 0x59
 8001e2a:	f7ff ff01 	bl	8001c30 <NVIC_EnableIRQ>
  return status;
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	48028100 	.word	0x48028100
 8001e3c:	08002c68 	.word	0x08002c68
 8001e40:	40030000 	.word	0x40030000
 8001e44:	08002c14 	.word	0x08002c14
 8001e48:	08002c20 	.word	0x08002c20

08001e4c <USIC0_3_IRQHandler>:
/*Interrupt handlers*/
/*Transmit ISR*/
void UART_0_TX_HANDLER()
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  UART_lTransmitHandler(&UART_0);
 8001e50:	4801      	ldr	r0, [pc, #4]	; (8001e58 <USIC0_3_IRQHandler+0xc>)
 8001e52:	f7ff fda1 	bl	8001998 <UART_lTransmitHandler>
}
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000000 	.word	0x20000000

08001e5c <USIC0_5_IRQHandler>:

/*Receive ISR*/
void UART_0_RX_HANDLER()
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  UART_lReceiveHandler(&UART_0);
 8001e60:	4801      	ldr	r0, [pc, #4]	; (8001e68 <USIC0_5_IRQHandler+0xc>)
 8001e62:	f7ff fe1f 	bl	8001aa4 <UART_lReceiveHandler>
}
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000000 	.word	0x20000000

08001e6c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e70:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <NVIC_GetPriorityGrouping+0x18>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e78:	0a1b      	lsrs	r3, r3, #8
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	6039      	str	r1, [r7, #0]
 8001e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	da0b      	bge.n	8001eb4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9c:	490d      	ldr	r1, [pc, #52]	; (8001ed4 <NVIC_SetPriority+0x4c>)
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	3b04      	subs	r3, #4
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	0092      	lsls	r2, r2, #2
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	440b      	add	r3, r1
 8001eb0:	761a      	strb	r2, [r3, #24]
 8001eb2:	e009      	b.n	8001ec8 <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb4:	4908      	ldr	r1, [pc, #32]	; (8001ed8 <NVIC_SetPriority+0x50>)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	0092      	lsls	r2, r2, #2
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000ed00 	.word	0xe000ed00
 8001ed8:	e000e100 	.word	0xe000e100

08001edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b089      	sub	sp, #36	; 0x24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f1c3 0307 	rsb	r3, r3, #7
 8001ef6:	2b06      	cmp	r3, #6
 8001ef8:	bf28      	it	cs
 8001efa:	2306      	movcs	r3, #6
 8001efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3306      	adds	r3, #6
 8001f02:	2b06      	cmp	r3, #6
 8001f04:	d902      	bls.n	8001f0c <NVIC_EncodePriority+0x30>
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	e000      	b.n	8001f0e <NVIC_EncodePriority+0x32>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	2201      	movs	r2, #1
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	1e5a      	subs	r2, r3, #1
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	401a      	ands	r2, r3
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2101      	movs	r1, #1
 8001f26:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2a:	1e59      	subs	r1, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001f30:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3724      	adds	r7, #36	; 0x24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop

08001f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f50:	d301      	bcc.n	8001f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f52:	2301      	movs	r3, #1
 8001f54:	e00f      	b.n	8001f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f56:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <SysTick_Config+0x40>)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f62:	213f      	movs	r1, #63	; 0x3f
 8001f64:	f7ff ff90 	bl	8001e88 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <SysTick_Config+0x40>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f6e:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <SysTick_Config+0x40>)
 8001f70:	2207      	movs	r2, #7
 8001f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	e000e010 	.word	0xe000e010

08001f84 <SYSTIMER_lInsertTimerList>:
**********************************************************************************************************************/
/*
 * This function is called to insert a timer into the timer list.
 */
static void SYSTIMER_lInsertTimerList(uint32_t tbl_index)
{
 8001f84:	b490      	push	{r4, r7}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  int32_t delta_ticks;
  int32_t timer_count;
  bool found_flag = false;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]
   /* Get timer time */
  timer_count = (int32_t)g_timer_tbl[tbl_index].count;
 8001f90:	496b      	ldr	r1, [pc, #428]	; (8002140 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4413      	add	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	3318      	adds	r3, #24
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	60bb      	str	r3, [r7, #8]
  /* Check if Timer list is NULL */
  if (NULL == g_timer_list)
 8001fa4:	4b67      	ldr	r3, [pc, #412]	; (8002144 <SYSTIMER_lInsertTimerList+0x1c0>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d109      	bne.n	8001fc0 <SYSTIMER_lInsertTimerList+0x3c>
  {
    /* Set this as first Timer */
    g_timer_list = &g_timer_tbl[tbl_index];
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4a62      	ldr	r2, [pc, #392]	; (8002140 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001fb8:	4413      	add	r3, r2
 8001fba:	4a62      	ldr	r2, [pc, #392]	; (8002144 <SYSTIMER_lInsertTimerList+0x1c0>)
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	e0bb      	b.n	8002138 <SYSTIMER_lInsertTimerList+0x1b4>
  }
  /* If not, find the correct place, and insert the specified timer */
  else
  {
    object_ptr = g_timer_list;
 8001fc0:	4b60      	ldr	r3, [pc, #384]	; (8002144 <SYSTIMER_lInsertTimerList+0x1c0>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    delta_ticks = timer_count;
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 8001fca:	e0ab      	b.n	8002124 <SYSTIMER_lInsertTimerList+0x1a0>
    {
      /* Get timer Count Difference */
      delta_ticks -= (int32_t)object_ptr->count;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1a9b      	subs	r3, r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
      /* Check for delta ticks < 0 */
      if (delta_ticks <= 0)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	dc7a      	bgt.n	80020d4 <SYSTIMER_lInsertTimerList+0x150>
      {
        /* Check If head item */
        if (NULL != object_ptr->prev)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d026      	beq.n	8002034 <SYSTIMER_lInsertTimerList+0xb0>
        {
          /* If Insert to list */
          object_ptr->prev->next = &g_timer_tbl[tbl_index];
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	6859      	ldr	r1, [r3, #4]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4a52      	ldr	r2, [pc, #328]	; (8002140 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001ff6:	4413      	add	r3, r2
 8001ff8:	600b      	str	r3, [r1, #0]
          g_timer_tbl[tbl_index].prev = object_ptr->prev;
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	6859      	ldr	r1, [r3, #4]
 8001ffe:	4850      	ldr	r0, [pc, #320]	; (8002140 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4403      	add	r3, r0
 800200c:	6059      	str	r1, [r3, #4]
          g_timer_tbl[tbl_index].next = object_ptr;
 800200e:	494c      	ldr	r1, [pc, #304]	; (8002140 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4413      	add	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	601a      	str	r2, [r3, #0]
          object_ptr->prev = &g_timer_tbl[tbl_index];
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4a45      	ldr	r2, [pc, #276]	; (8002140 <SYSTIMER_lInsertTimerList+0x1bc>)
 800202c:	441a      	add	r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	e01c      	b.n	800206e <SYSTIMER_lInsertTimerList+0xea>
        }
        else
        {
          /* Set Timer as first item */
          g_timer_tbl[tbl_index].next = g_timer_list;
 8002034:	4b43      	ldr	r3, [pc, #268]	; (8002144 <SYSTIMER_lInsertTimerList+0x1c0>)
 8002036:	6819      	ldr	r1, [r3, #0]
 8002038:	4841      	ldr	r0, [pc, #260]	; (8002140 <SYSTIMER_lInsertTimerList+0x1bc>)
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	4413      	add	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4403      	add	r3, r0
 8002046:	6019      	str	r1, [r3, #0]
          g_timer_list->prev = &g_timer_tbl[tbl_index];
 8002048:	4b3e      	ldr	r3, [pc, #248]	; (8002144 <SYSTIMER_lInsertTimerList+0x1c0>)
 800204a:	6819      	ldr	r1, [r3, #0]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4a3a      	ldr	r2, [pc, #232]	; (8002140 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002058:	4413      	add	r3, r2
 800205a:	604b      	str	r3, [r1, #4]
          g_timer_list = &g_timer_tbl[tbl_index];
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4413      	add	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4a36      	ldr	r2, [pc, #216]	; (8002140 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002068:	4413      	add	r3, r2
 800206a:	4a36      	ldr	r2, [pc, #216]	; (8002144 <SYSTIMER_lInsertTimerList+0x1c0>)
 800206c:	6013      	str	r3, [r2, #0]
        }
        g_timer_tbl[tbl_index].count = g_timer_tbl[tbl_index].next->count + (uint32_t)delta_ticks;
 800206e:	4934      	ldr	r1, [pc, #208]	; (8002140 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	699a      	ldr	r2, [r3, #24]
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	18d1      	adds	r1, r2, r3
 8002084:	482e      	ldr	r0, [pc, #184]	; (8002140 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4403      	add	r3, r0
 8002092:	3318      	adds	r3, #24
 8002094:	6019      	str	r1, [r3, #0]
        g_timer_tbl[tbl_index].next->count  -= g_timer_tbl[tbl_index].count;
 8002096:	492a      	ldr	r1, [pc, #168]	; (8002140 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4413      	add	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	6819      	ldr	r1, [r3, #0]
 80020a6:	4826      	ldr	r0, [pc, #152]	; (8002140 <SYSTIMER_lInsertTimerList+0x1bc>)
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4413      	add	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4403      	add	r3, r0
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6998      	ldr	r0, [r3, #24]
 80020b8:	4c21      	ldr	r4, [pc, #132]	; (8002140 <SYSTIMER_lInsertTimerList+0x1bc>)
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4413      	add	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4423      	add	r3, r4
 80020c6:	3318      	adds	r3, #24
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	1ac3      	subs	r3, r0, r3
 80020cc:	618b      	str	r3, [r1, #24]
        found_flag = true;
 80020ce:	2301      	movs	r3, #1
 80020d0:	73fb      	strb	r3, [r7, #15]
 80020d2:	e024      	b.n	800211e <SYSTIMER_lInsertTimerList+0x19a>
      }
      /* Check for last item in list */
      else
      {
        if ((delta_ticks > 0) && (NULL == object_ptr->next))
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	dd21      	ble.n	800211e <SYSTIMER_lInsertTimerList+0x19a>
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d11d      	bne.n	800211e <SYSTIMER_lInsertTimerList+0x19a>
        {
          /* Yes, insert into */
          g_timer_tbl[tbl_index].prev = object_ptr;
 80020e2:	4917      	ldr	r1, [pc, #92]	; (8002140 <SYSTIMER_lInsertTimerList+0x1bc>)
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	4413      	add	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	605a      	str	r2, [r3, #4]
          object_ptr->next = &g_timer_tbl[tbl_index];
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4a10      	ldr	r2, [pc, #64]	; (8002140 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002100:	441a      	add	r2, r3
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	601a      	str	r2, [r3, #0]
          g_timer_tbl[tbl_index].count = (uint32_t)delta_ticks;
 8002106:	6939      	ldr	r1, [r7, #16]
 8002108:	480d      	ldr	r0, [pc, #52]	; (8002140 <SYSTIMER_lInsertTimerList+0x1bc>)
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4403      	add	r3, r0
 8002116:	3318      	adds	r3, #24
 8002118:	6019      	str	r1, [r3, #0]
          found_flag = true;
 800211a:	2301      	movs	r3, #1
 800211c:	73fb      	strb	r3, [r7, #15]
        }
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	617b      	str	r3, [r7, #20]
  {
    object_ptr = g_timer_list;
    /* Get timer tick */
    delta_ticks = timer_count;
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d006      	beq.n	8002138 <SYSTIMER_lInsertTimerList+0x1b4>
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	f083 0301 	eor.w	r3, r3, #1
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	f47f af4a 	bne.w	8001fcc <SYSTIMER_lInsertTimerList+0x48>
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
    }
  }
}
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bc90      	pop	{r4, r7}
 800213e:	4770      	bx	lr
 8002140:	200000e0 	.word	0x200000e0
 8002144:	200000c4 	.word	0x200000c4

08002148 <SYSTIMER_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void SYSTIMER_lRemoveTimerList(uint32_t tbl_index)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = &g_timer_tbl[tbl_index];
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4413      	add	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4a29      	ldr	r2, [pc, #164]	; (8002200 <SYSTIMER_lRemoveTimerList+0xb8>)
 800215c:	4413      	add	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  if ((NULL == object_ptr->prev) && (NULL == object_ptr->next ))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d107      	bne.n	8002178 <SYSTIMER_lRemoveTimerList+0x30>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d103      	bne.n	8002178 <SYSTIMER_lRemoveTimerList+0x30>
  {
    /* set timer list as NULL */ 
    g_timer_list = NULL;                  
 8002170:	4b24      	ldr	r3, [pc, #144]	; (8002204 <SYSTIMER_lRemoveTimerList+0xbc>)
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	e03d      	b.n	80021f4 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the first item in timer list */
  else if (NULL == object_ptr->prev)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d114      	bne.n	80021aa <SYSTIMER_lRemoveTimerList+0x62>
  {
    /* Remove timer from list, and reset timer list */
    g_timer_list  = object_ptr->next;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a1f      	ldr	r2, [pc, #124]	; (8002204 <SYSTIMER_lRemoveTimerList+0xbc>)
 8002186:	6013      	str	r3, [r2, #0]
    g_timer_list->prev = NULL;
 8002188:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <SYSTIMER_lRemoveTimerList+0xbc>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2200      	movs	r2, #0
 800218e:	605a      	str	r2, [r3, #4]
    g_timer_list->count += object_ptr->count;
 8002190:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <SYSTIMER_lRemoveTimerList+0xbc>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a1b      	ldr	r2, [pc, #108]	; (8002204 <SYSTIMER_lRemoveTimerList+0xbc>)
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	6991      	ldr	r1, [r2, #24]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	6992      	ldr	r2, [r2, #24]
 800219e:	440a      	add	r2, r1
 80021a0:	619a      	str	r2, [r3, #24]
    object_ptr->next    = NULL;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	e024      	b.n	80021f4 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the last item in timer list */
  else if (NULL == object_ptr->next)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d107      	bne.n	80021c2 <SYSTIMER_lRemoveTimerList+0x7a>
  {
    /* Remove timer from list */
    object_ptr->prev->next = NULL;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	e018      	b.n	80021f4 <SYSTIMER_lRemoveTimerList+0xac>
  }
  else                       
  {
    /* Remove timer from list */
    object_ptr->prev->next  =  object_ptr->next;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	601a      	str	r2, [r3, #0]
    object_ptr->next->prev  =  object_ptr->prev;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	6852      	ldr	r2, [r2, #4]
 80021d4:	605a      	str	r2, [r3, #4]
    object_ptr->next->count += object_ptr->count;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	6812      	ldr	r2, [r2, #0]
 80021de:	6991      	ldr	r1, [r2, #24]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	6992      	ldr	r2, [r2, #24]
 80021e4:	440a      	add	r2, r1
 80021e6:	619a      	str	r2, [r3, #24]
    object_ptr->next = NULL;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	605a      	str	r2, [r3, #4]
  }
}
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	200000e0 	.word	0x200000e0
 8002204:	200000c4 	.word	0x200000c4

08002208 <SYSTIMER_lTimerHandler>:

/*
 * Handler function called from SysTick event handler.
 */
static void SYSTIMER_lTimerHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
 800220e:	4b2f      	ldr	r3, [pc, #188]	; (80022cc <SYSTIMER_lTimerHandler+0xc4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	607b      	str	r3, [r7, #4]
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8002214:	e050      	b.n	80022b8 <SYSTIMER_lTimerHandler+0xb0>
  {
    if (true == object_ptr->delete_swtmr)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 3020 	ldrb.w	r3, [r3, #32]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d013      	beq.n	8002248 <SYSTIMER_lTimerHandler+0x40>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff ff8f 	bl	8002148 <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      object_ptr->state = SYSTIMER_STATE_NOT_INITIALIZED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	735a      	strb	r2, [r3, #13]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << object_ptr->id);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	461a      	mov	r2, r3
 8002236:	2301      	movs	r3, #1
 8002238:	4093      	lsls	r3, r2
 800223a:	43da      	mvns	r2, r3
 800223c:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <SYSTIMER_lTimerHandler+0xc8>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4013      	ands	r3, r2
 8002242:	4a23      	ldr	r2, [pc, #140]	; (80022d0 <SYSTIMER_lTimerHandler+0xc8>)
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	e034      	b.n	80022b2 <SYSTIMER_lTimerHandler+0xaa>
    }
    /* Check whether timer is a one shot timer */
    else if (SYSTIMER_MODE_ONE_SHOT == object_ptr->mode)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	7b1b      	ldrb	r3, [r3, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d112      	bne.n	8002276 <SYSTIMER_lTimerHandler+0x6e>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	7b5b      	ldrb	r3, [r3, #13]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d12c      	bne.n	80022b2 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff ff73 	bl	8002148 <SYSTIMER_lRemoveTimerList>
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        object_ptr->state = SYSTIMER_STATE_STOPPED;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2202      	movs	r2, #2
 8002266:	735a      	strb	r2, [r3, #13]
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6912      	ldr	r2, [r2, #16]
 8002270:	4610      	mov	r0, r2
 8002272:	4798      	blx	r3
 8002274:	e01d      	b.n	80022b2 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    /* Check whether timer is periodic timer */
    else if (SYSTIMER_MODE_PERIODIC == object_ptr->mode)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	7b1b      	ldrb	r3, [r3, #12]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d118      	bne.n	80022b0 <SYSTIMER_lTimerHandler+0xa8>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	7b5b      	ldrb	r3, [r3, #13]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d115      	bne.n	80022b2 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff ff5c 	bl	8002148 <SYSTIMER_lRemoveTimerList>
        /* Reset timer tick */
        object_ptr->count = object_ptr->reload;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69da      	ldr	r2, [r3, #28]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	619a      	str	r2, [r3, #24]
        /* Insert timer into timer list */
        SYSTIMER_lInsertTimerList((uint32_t)object_ptr->id);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fe71 	bl	8001f84 <SYSTIMER_lInsertTimerList>
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6912      	ldr	r2, [r2, #16]
 80022aa:	4610      	mov	r0, r2
 80022ac:	4798      	blx	r3
 80022ae:	e000      	b.n	80022b2 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    else
    {
      break;
 80022b0:	e009      	b.n	80022c6 <SYSTIMER_lTimerHandler+0xbe>
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
 80022b2:	4b06      	ldr	r3, [pc, #24]	; (80022cc <SYSTIMER_lTimerHandler+0xc4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	607b      	str	r3, [r7, #4]
static void SYSTIMER_lTimerHandler(void)
{
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <SYSTIMER_lTimerHandler+0xbe>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0a7      	beq.n	8002216 <SYSTIMER_lTimerHandler+0xe>
      break;
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
  }
}
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	200000c4 	.word	0x200000c4
 80022d0:	200000c8 	.word	0x200000c8

080022d4 <SysTick_Handler>:

/*
 *  SysTick Event Handler.
 */
void SysTick_Handler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = g_timer_list;
 80022da:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <SysTick_Handler+0x40>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	607b      	str	r3, [r7, #4]
  g_systick_count++;
 80022e0:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <SysTick_Handler+0x44>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	3301      	adds	r3, #1
 80022e6:	4a0c      	ldr	r2, [pc, #48]	; (8002318 <SysTick_Handler+0x44>)
 80022e8:	6013      	str	r3, [r2, #0]

  if (NULL != object_ptr)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00e      	beq.n	800230e <SysTick_Handler+0x3a>
  {
    if (object_ptr->count > 1UL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d905      	bls.n	8002304 <SysTick_Handler+0x30>
    {
      object_ptr->count--;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	1e5a      	subs	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	619a      	str	r2, [r3, #24]
 8002302:	e004      	b.n	800230e <SysTick_Handler+0x3a>
    }
    else
    {
      object_ptr->count = 0U;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	619a      	str	r2, [r3, #24]
      SYSTIMER_lTimerHandler();
 800230a:	f7ff ff7d 	bl	8002208 <SYSTIMER_lTimerHandler>
    }
  }
}
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	200000c4 	.word	0x200000c4
 8002318:	200000cc 	.word	0x200000cc

0800231c <SYSTIMER_Init>:

/*
 * Initialization function which initializes the SYSTIMER APP, configures SysTick timer and SysTick exception.
 */
SYSTIMER_STATUS_t SYSTIMER_Init(SYSTIMER_t *handle)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status = SYSTIMER_STATUS_SUCCESS;
 8002324:	2300      	movs	r3, #0
 8002326:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_Init: SYSTIMER APP handle pointer uninitialized", (handle != NULL));

  /* Check APP initialization status to ensure whether SYSTIMER_Init called or not, initialize SYSTIMER if
   * SYSTIMER_Init called first time.
   */
  if (false == handle->init_status)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	f083 0301 	eor.w	r3, r3, #1
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d020      	beq.n	8002378 <SYSTIMER_Init+0x5c>
  {
    /* Initialize the header of the list */
    g_timer_list = NULL;
 8002336:	4b13      	ldr	r3, [pc, #76]	; (8002384 <SYSTIMER_Init+0x68>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
    /* Initialize SysTick timer */
    status = (SYSTIMER_STATUS_t)SysTick_Config((uint32_t)(SYSTIMER_SYSTICK_CLOCK * SYSTIMER_TICK_PERIOD));
 800233c:	4812      	ldr	r0, [pc, #72]	; (8002388 <SYSTIMER_Init+0x6c>)
 800233e:	f7ff fdff 	bl	8001f40 <SysTick_Config>
 8002342:	4603      	mov	r3, r0
 8002344:	73fb      	strb	r3, [r7, #15]

    if (SYSTIMER_STATUS_FAILURE == status)
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d015      	beq.n	8002378 <SYSTIMER_Init+0x5c>
    }
    else
    {
#if (UC_FAMILY == XMC4)
      /* setting of First SW Timer period is always and subpriority value for XMC4000 devices */
      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(
 800234c:	f7ff fd8e 	bl	8001e6c <NVIC_GetPriorityGrouping>
 8002350:	4603      	mov	r3, r0
 8002352:	4618      	mov	r0, r3
 8002354:	213f      	movs	r1, #63	; 0x3f
 8002356:	2200      	movs	r2, #0
 8002358:	f7ff fdc0 	bl	8001edc <NVIC_EncodePriority>
 800235c:	4603      	mov	r3, r0
 800235e:	f04f 30ff 	mov.w	r0, #4294967295
 8002362:	4619      	mov	r1, r3
 8002364:	f7ff fd90 	bl	8001e88 <NVIC_SetPriority>
      NVIC_GetPriorityGrouping(), SYSTIMER_PRIORITY, SYSTIMER_SUBPRIORITY));
#elif (UC_FAMILY == XMC1)
      /* setting of priority value for XMC1000 devices */
      NVIC_SetPriority(SysTick_IRQn, SYSTIMER_PRIORITY);
#endif      
      g_timer_tracker = 0U;
 8002368:	4b08      	ldr	r3, [pc, #32]	; (800238c <SYSTIMER_Init+0x70>)
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
      /* Update the Initialization status of the SYSTIMER APP instance */
      handle->init_status = true;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	701a      	strb	r2, [r3, #0]
      status = SYSTIMER_STATUS_SUCCESS;
 8002374:	2300      	movs	r3, #0
 8002376:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 8002378:	7bfb      	ldrb	r3, [r7, #15]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	200000c4 	.word	0x200000c4
 8002388:	0001d4c0 	.word	0x0001d4c0
 800238c:	200000c8 	.word	0x200000c8

08002390 <SYSTIMER_CreateTimer>:
  uint32_t period,
  SYSTIMER_MODE_t mode,
  SYSTIMER_CALLBACK_t callback,
  void  *args
)
{
 8002390:	b480      	push	{r7}
 8002392:	b089      	sub	sp, #36	; 0x24
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	607a      	str	r2, [r7, #4]
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	460b      	mov	r3, r1
 800239e:	72fb      	strb	r3, [r7, #11]
  uint32_t id = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	61fb      	str	r3, [r7, #28]
  uint32_t count = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	61bb      	str	r3, [r7, #24]
  uint32_t period_ratio = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
            ((period >= SYSTIMER_TICK_PERIOD_US) && (period > 0U) && (period <= 0xFFFFFFFFU)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Timer creation failure due to invalid timer mode",
            ((SYSTIMER_MODE_ONE_SHOT == mode) || (SYSTIMER_MODE_PERIODIC == mode)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Can not create software without user callback", (NULL != callback));
  
  if (period < SYSTIMER_TICK_PERIOD_US)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023b2:	d202      	bcs.n	80023ba <SYSTIMER_CreateTimer+0x2a>
  {
    id = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]
 80023b8:	e07b      	b.n	80024b2 <SYSTIMER_CreateTimer+0x122>
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 80023ba:	2300      	movs	r3, #0
 80023bc:	61bb      	str	r3, [r7, #24]
 80023be:	e075      	b.n	80024ac <SYSTIMER_CreateTimer+0x11c>
    {
      /* Check for free timer ID */
      if (0U == (g_timer_tracker & (1U << count)))
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	2201      	movs	r2, #1
 80023c4:	409a      	lsls	r2, r3
 80023c6:	4b3e      	ldr	r3, [pc, #248]	; (80024c0 <SYSTIMER_CreateTimer+0x130>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d16a      	bne.n	80024a6 <SYSTIMER_CreateTimer+0x116>
      {
        /* If yes, assign ID to this timer */
        g_timer_tracker |= (1U << count);
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	2201      	movs	r2, #1
 80023d4:	409a      	lsls	r2, r3
 80023d6:	4b3a      	ldr	r3, [pc, #232]	; (80024c0 <SYSTIMER_CreateTimer+0x130>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4313      	orrs	r3, r2
 80023dc:	4a38      	ldr	r2, [pc, #224]	; (80024c0 <SYSTIMER_CreateTimer+0x130>)
 80023de:	6013      	str	r3, [r2, #0]
        /* Initialize the timer as per input values */
        g_timer_tbl[count].id     = count;
 80023e0:	4938      	ldr	r1, [pc, #224]	; (80024c4 <SYSTIMER_CreateTimer+0x134>)
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4613      	mov	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4413      	add	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	3310      	adds	r3, #16
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].mode   = mode;
 80023f4:	4933      	ldr	r1, [pc, #204]	; (80024c4 <SYSTIMER_CreateTimer+0x134>)
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4613      	mov	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4413      	add	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	3308      	adds	r3, #8
 8002404:	7afa      	ldrb	r2, [r7, #11]
 8002406:	711a      	strb	r2, [r3, #4]
        g_timer_tbl[count].state  = SYSTIMER_STATE_STOPPED;
 8002408:	492e      	ldr	r1, [pc, #184]	; (80024c4 <SYSTIMER_CreateTimer+0x134>)
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4613      	mov	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4413      	add	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	3308      	adds	r3, #8
 8002418:	2202      	movs	r2, #2
 800241a:	715a      	strb	r2, [r3, #5]
        period_ratio = (uint32_t)(period / SYSTIMER_TICK_PERIOD_US);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4a2a      	ldr	r2, [pc, #168]	; (80024c8 <SYSTIMER_CreateTimer+0x138>)
 8002420:	fba2 2303 	umull	r2, r3, r2, r3
 8002424:	099b      	lsrs	r3, r3, #6
 8002426:	617b      	str	r3, [r7, #20]
        g_timer_tbl[count].count  = (period_ratio + HW_TIMER_ADDITIONAL_CNT);
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	1c59      	adds	r1, r3, #1
 800242c:	4825      	ldr	r0, [pc, #148]	; (80024c4 <SYSTIMER_CreateTimer+0x134>)
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4613      	mov	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	4413      	add	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4403      	add	r3, r0
 800243a:	3318      	adds	r3, #24
 800243c:	6019      	str	r1, [r3, #0]
        g_timer_tbl[count].reload  = period_ratio;
 800243e:	4921      	ldr	r1, [pc, #132]	; (80024c4 <SYSTIMER_CreateTimer+0x134>)
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4613      	mov	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	4413      	add	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	440b      	add	r3, r1
 800244c:	3318      	adds	r3, #24
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].callback = callback;
 8002452:	491c      	ldr	r1, [pc, #112]	; (80024c4 <SYSTIMER_CreateTimer+0x134>)
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4613      	mov	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	4413      	add	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	440b      	add	r3, r1
 8002460:	3308      	adds	r3, #8
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].args = args;
 8002466:	4917      	ldr	r1, [pc, #92]	; (80024c4 <SYSTIMER_CreateTimer+0x134>)
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4613      	mov	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4413      	add	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	440b      	add	r3, r1
 8002474:	3310      	adds	r3, #16
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].prev   = NULL;
 800247a:	4912      	ldr	r1, [pc, #72]	; (80024c4 <SYSTIMER_CreateTimer+0x134>)
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4613      	mov	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	4413      	add	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	2200      	movs	r2, #0
 800248a:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].next   = NULL;
 800248c:	490d      	ldr	r1, [pc, #52]	; (80024c4 <SYSTIMER_CreateTimer+0x134>)
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4613      	mov	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4413      	add	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
        id = count + 1U;
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	3301      	adds	r3, #1
 80024a2:	61fb      	str	r3, [r7, #28]
        break;
 80024a4:	e005      	b.n	80024b2 <SYSTIMER_CreateTimer+0x122>
  {
    id = 0U;
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	3301      	adds	r3, #1
 80024aa:	61bb      	str	r3, [r7, #24]
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	2b07      	cmp	r3, #7
 80024b0:	d986      	bls.n	80023c0 <SYSTIMER_CreateTimer+0x30>
      }
    }

  }
  
  return (id);
 80024b2:	69fb      	ldr	r3, [r7, #28]
}  
 80024b4:	4618      	mov	r0, r3
 80024b6:	3724      	adds	r7, #36	; 0x24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	200000c8 	.word	0x200000c8
 80024c4:	200000e0 	.word	0x200000e0
 80024c8:	10624dd3 	.word	0x10624dd3

080024cc <SYSTIMER_StartTimer>:

/*
 *  API to start the software timer.
 */
SYSTIMER_STATUS_t SYSTIMER_StartTimer(uint32_t id)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status;
  status = SYSTIMER_STATUS_FAILURE;
 80024d4:	2301      	movs	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_StartTimer: Failure in timer restart operation due to invalid timer ID",
            ((id <= SYSTIMER_CFG_MAX_TMR) && (id > 0U)));
  XMC_ASSERT("SYSTIMER_StartTimer: Error during start of software timer", (0U != (g_timer_tracker & (1U << (id - 1U)))));
  
  /* Check if timer is running */
  if (SYSTIMER_STATE_STOPPED == g_timer_tbl[id - 1U].state)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	1e5a      	subs	r2, r3, #1
 80024dc:	491a      	ldr	r1, [pc, #104]	; (8002548 <SYSTIMER_StartTimer+0x7c>)
 80024de:	4613      	mov	r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4413      	add	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	440b      	add	r3, r1
 80024e8:	3308      	adds	r3, #8
 80024ea:	795b      	ldrb	r3, [r3, #5]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d126      	bne.n	800253e <SYSTIMER_StartTimer+0x72>
  {
    g_timer_tbl[id - 1U].count = (g_timer_tbl[id - 1U].reload + HW_TIMER_ADDITIONAL_CNT);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	1e5a      	subs	r2, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	1e59      	subs	r1, r3, #1
 80024f8:	4813      	ldr	r0, [pc, #76]	; (8002548 <SYSTIMER_StartTimer+0x7c>)
 80024fa:	460b      	mov	r3, r1
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	440b      	add	r3, r1
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4403      	add	r3, r0
 8002504:	3318      	adds	r3, #24
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	1c59      	adds	r1, r3, #1
 800250a:	480f      	ldr	r0, [pc, #60]	; (8002548 <SYSTIMER_StartTimer+0x7c>)
 800250c:	4613      	mov	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4413      	add	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4403      	add	r3, r0
 8002516:	3318      	adds	r3, #24
 8002518:	6019      	str	r1, [r3, #0]
    /* set timer status as SYSTIMER_STATE_RUNNING */
    g_timer_tbl[id - 1U].state = SYSTIMER_STATE_RUNNING;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	1e5a      	subs	r2, r3, #1
 800251e:	490a      	ldr	r1, [pc, #40]	; (8002548 <SYSTIMER_StartTimer+0x7c>)
 8002520:	4613      	mov	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	4413      	add	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	3308      	adds	r3, #8
 800252c:	2201      	movs	r2, #1
 800252e:	715a      	strb	r2, [r3, #5]
    /* Insert this timer into timer list */
    SYSTIMER_lInsertTimerList((id - 1U));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3b01      	subs	r3, #1
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff fd25 	bl	8001f84 <SYSTIMER_lInsertTimerList>
    status = SYSTIMER_STATUS_SUCCESS;
 800253a:	2300      	movs	r3, #0
 800253c:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 800253e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	200000e0 	.word	0x200000e0

0800254c <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	3310      	adds	r3, #16
 8002560:	4619      	mov	r1, r3
 8002562:	2301      	movs	r3, #1
 8002564:	408b      	lsls	r3, r1
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	7e1b      	ldrb	r3, [r3, #24]
 8002584:	2b02      	cmp	r3, #2
 8002586:	d149      	bne.n	800261c <GLOBAL_ADC_Init+0xa4>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	695a      	ldr	r2, [r3, #20]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	4610      	mov	r0, r2
 8002592:	4619      	mov	r1, r3
 8002594:	f7fe fe7a 	bl	800128c <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8002598:	2300      	movs	r3, #0
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	e02f      	b.n	80025fe <GLOBAL_ADC_Init+0x86>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a6:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	4608      	mov	r0, r1
 80025b4:	4619      	mov	r1, r3
 80025b6:	f7fe ff0b 	bl	80013d0 <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	2103      	movs	r1, #3
 80025c8:	f7fe ff92 	bl	80014f0 <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d4:	7a1b      	ldrb	r3, [r3, #8]
 80025d6:	f083 0301 	eor.w	r3, r3, #1
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <GLOBAL_ADC_Init+0x74>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	4618      	mov	r0, r3
 80025e6:	68f9      	ldr	r1, [r7, #12]
 80025e8:	f7ff ffb0 	bl	800254c <XMC_VADC_GLOBAL_DisablePostCalibration>

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f4:	2200      	movs	r2, #0
 80025f6:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	3301      	adds	r3, #1
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2b03      	cmp	r3, #3
 8002602:	d9cc      	bls.n	800259e <GLOBAL_ADC_Init+0x26>
    }
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetClockDivider(handle_ptr->global_shs_ptr, (uint8_t) GLOBAL_ADC_DIVS_VALUE);
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
    if((bool)true == handle_ptr->enable_startup_calibration)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	7e5b      	ldrb	r3, [r3, #25]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d004      	beq.n	8002616 <GLOBAL_ADC_Init+0x9e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	4618      	mov	r0, r3
 8002612:	f7fe fe89 	bl	8001328 <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	7e1b      	ldrb	r3, [r3, #24]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6819      	ldr	r1, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	7c1a      	ldrb	r2, [r3, #16]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3304      	adds	r3, #4
 800263c:	4608      	mov	r0, r1
 800263e:	4611      	mov	r1, r2
 8002640:	461a      	mov	r2, r3
 8002642:	f7fd feb1 	bl	80003a8 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6819      	ldr	r1, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	7c1a      	ldrb	r2, [r3, #16]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	7c5b      	ldrb	r3, [r3, #17]
 8002652:	4608      	mov	r0, r1
 8002654:	4611      	mov	r1, r2
 8002656:	461a      	mov	r2, r3
 8002658:	f7fe fb30 	bl	8000cbc <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop

08002668 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002678:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <NVIC_SetPriorityGrouping+0x44>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002684:	4013      	ands	r3, r2
 8002686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8002690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002698:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800269a:	4a04      	ldr	r2, [pc, #16]	; (80026ac <NVIC_SetPriorityGrouping+0x44>)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	60d3      	str	r3, [r2, #12]
}
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 80026b6:	2001      	movs	r0, #1
 80026b8:	f7ff ffd6 	bl	8002668 <NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026bc:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 80026be:	4b21      	ldr	r3, [pc, #132]	; (8002744 <SystemCoreSetup+0x94>)
 80026c0:	4a21      	ldr	r2, [pc, #132]	; (8002748 <SystemCoreSetup+0x98>)
 80026c2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80026c4:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80026c8:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80026ca:	4a1e      	ldr	r2, [pc, #120]	; (8002744 <SystemCoreSetup+0x94>)
 80026cc:	4b1d      	ldr	r3, [pc, #116]	; (8002744 <SystemCoreSetup+0x94>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 80026da:	4b1c      	ldr	r3, [pc, #112]	; (800274c <SystemCoreSetup+0x9c>)
 80026dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026e0:	3314      	adds	r3, #20
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f023 030f 	bic.w	r3, r3, #15
 80026ec:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f043 0303 	orr.w	r3, r3, #3
 80026f4:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 80026f6:	4b15      	ldr	r3, [pc, #84]	; (800274c <SystemCoreSetup+0x9c>)
 80026f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026fc:	3314      	adds	r3, #20
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8002702:	4a10      	ldr	r2, [pc, #64]	; (8002744 <SystemCoreSetup+0x94>)
 8002704:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <SystemCoreSetup+0x94>)
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	f023 0310 	bic.w	r3, r3, #16
 800270c:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 800270e:	4a0d      	ldr	r2, [pc, #52]	; (8002744 <SystemCoreSetup+0x94>)
 8002710:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <SystemCoreSetup+0x94>)
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	f023 0308 	bic.w	r3, r3, #8
 8002718:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800271a:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <SystemCoreSetup+0x94>)
 800271c:	4b09      	ldr	r3, [pc, #36]	; (8002744 <SystemCoreSetup+0x94>)
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002724:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8002726:	4a07      	ldr	r2, [pc, #28]	; (8002744 <SystemCoreSetup+0x94>)
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <SystemCoreSetup+0x94>)
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002730:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8002732:	4a04      	ldr	r2, [pc, #16]	; (8002744 <SystemCoreSetup+0x94>)
 8002734:	4b03      	ldr	r3, [pc, #12]	; (8002744 <SystemCoreSetup+0x94>)
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800273c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	e000ed00 	.word	0xe000ed00
 8002748:	08000000 	.word	0x08000000
 800274c:	58001000 	.word	0x58001000

08002750 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8002758:	2300      	movs	r3, #0
 800275a:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	701a      	strb	r2, [r3, #0]

  return (status);
 8002762:	7bfb      	ldrb	r3, [r7, #15]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8002774:	4b02      	ldr	r3, [pc, #8]	; (8002780 <OSCHP_GetFrequency+0x10>)
}
 8002776:	4618      	mov	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	00b71b00 	.word	0x00b71b00

08002784 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8002784:	b5b0      	push	{r4, r5, r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 800278a:	4b12      	ldr	r3, [pc, #72]	; (80027d4 <SystemCoreClockSetup+0x50>)
 800278c:	1d3c      	adds	r4, r7, #4
 800278e:	461d      	mov	r5, r3
 8002790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002794:	682b      	ldr	r3, [r5, #0]
 8002796:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8002798:	1d3b      	adds	r3, r7, #4
 800279a:	4618      	mov	r0, r3
 800279c:	f7fd fed2 	bl	8000544 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 80027a0:	2000      	movs	r0, #0
 80027a2:	f7fd ffc7 	bl	8000734 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 80027a6:	2000      	movs	r0, #0
 80027a8:	f7fd ff7c 	bl	80006a4 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 80027ac:	2004      	movs	r0, #4
 80027ae:	f7fe f84d 	bl	800084c <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 80027b2:	2001      	movs	r0, #1
 80027b4:	2120      	movs	r1, #32
 80027b6:	f7fe f885 	bl	80008c4 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 80027ba:	2000      	movs	r0, #0
 80027bc:	f7fd ff86 	bl	80006cc <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 80027c0:	2001      	movs	r0, #1
 80027c2:	f7fe f86b 	bl	800089c <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 80027c6:	2001      	movs	r0, #1
 80027c8:	f7fe f854 	bl	8000874 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bdb0      	pop	{r4, r5, r7, pc}
 80027d2:	bf00      	nop
 80027d4:	08002d04 	.word	0x08002d04

080027d8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027dc:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <NVIC_GetPriorityGrouping+0x18>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80027e4:	0a1b      	lsrs	r3, r3, #8
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80027fe:	4908      	ldr	r1, [pc, #32]	; (8002820 <NVIC_EnableIRQ+0x2c>)
 8002800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002804:	095b      	lsrs	r3, r3, #5
 8002806:	79fa      	ldrb	r2, [r7, #7]
 8002808:	f002 021f 	and.w	r2, r2, #31
 800280c:	2001      	movs	r0, #1
 800280e:	fa00 f202 	lsl.w	r2, r0, r2
 8002812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	e000e100 	.word	0xe000e100

08002824 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	6039      	str	r1, [r7, #0]
 800282e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002834:	2b00      	cmp	r3, #0
 8002836:	da0b      	bge.n	8002850 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002838:	490d      	ldr	r1, [pc, #52]	; (8002870 <NVIC_SetPriority+0x4c>)
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	f003 030f 	and.w	r3, r3, #15
 8002840:	3b04      	subs	r3, #4
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	0092      	lsls	r2, r2, #2
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	440b      	add	r3, r1
 800284c:	761a      	strb	r2, [r3, #24]
 800284e:	e009      	b.n	8002864 <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002850:	4908      	ldr	r1, [pc, #32]	; (8002874 <NVIC_SetPriority+0x50>)
 8002852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	0092      	lsls	r2, r2, #2
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	440b      	add	r3, r1
 8002860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	e000ed00 	.word	0xe000ed00
 8002874:	e000e100 	.word	0xe000e100

08002878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002878:	b480      	push	{r7}
 800287a:	b089      	sub	sp, #36	; 0x24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f1c3 0307 	rsb	r3, r3, #7
 8002892:	2b06      	cmp	r3, #6
 8002894:	bf28      	it	cs
 8002896:	2306      	movcs	r3, #6
 8002898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	3306      	adds	r3, #6
 800289e:	2b06      	cmp	r3, #6
 80028a0:	d902      	bls.n	80028a8 <NVIC_EncodePriority+0x30>
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3b01      	subs	r3, #1
 80028a6:	e000      	b.n	80028aa <NVIC_EncodePriority+0x32>
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	2201      	movs	r2, #1
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	1e5a      	subs	r2, r3, #1
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	401a      	ands	r2, r3
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2101      	movs	r1, #1
 80028c2:	fa01 f303 	lsl.w	r3, r1, r3
 80028c6:	1e59      	subs	r1, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80028cc:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3724      	adds	r7, #36	; 0x24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop

080028dc <XMC_VADC_GLOBAL_BackgroundTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80028ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop

08002900 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>:
 *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global_ptr,
                                                                    const uint32_t grp_num,
                                                                    const uint32_t ch_num)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	3260      	adds	r2, #96	; 0x60
 8002912:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2101      	movs	r1, #1
 800291a:	fa01 f303 	lsl.w	r3, r1, r3
 800291e:	ea42 0103 	orr.w	r1, r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	3260      	adds	r2, #96	; 0x60
 8002928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop

08002938 <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
                                               const uint32_t res_reg_num,
                                               const XMC_VADC_RESULT_CONFIG_t *config)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6819      	ldr	r1, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	32a0      	adds	r2, #160	; 0xa0
 800294e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <ADC_MEASUREMENT_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
 800295c:	b590      	push	{r4, r7, lr}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL))

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	7e1b      	ldrb	r3, [r3, #24]
 8002968:	2b02      	cmp	r3, #2
 800296a:	f040 8099 	bne.w	8002aa0 <ADC_MEASUREMENT_Init+0x144>
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fe00 	bl	8002578 <GLOBAL_ADC_Init>
 8002978:	4603      	mov	r3, r0
 800297a:	73bb      	strb	r3, [r7, #14]
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	4610      	mov	r0, r2
 8002988:	6819      	ldr	r1, [r3, #0]
 800298a:	2200      	movs	r2, #0
 800298c:	2300      	movs	r3, #0
 800298e:	f7fe fca7 	bl	80012e0 <XMC_VADC_GLOBAL_InputClassInit>
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
    		                              XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
#endif
  
    /* Initialize the Background Scan hardware */
    XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_config_handle);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	695a      	ldr	r2, [r3, #20]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	4610      	mov	r0, r2
 800299e:	4619      	mov	r1, r3
 80029a0:	f7fe fdc2 	bl	8001528 <XMC_VADC_GLOBAL_BackgroundInit>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 80029a4:	2300      	movs	r3, #0
 80029a6:	73fb      	strb	r3, [r7, #15]
 80029a8:	e02e      	b.n	8002a08 <ADC_MEASUREMENT_Init+0xac>
    {
      indexed = handle_ptr->array->channel_array[j];
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	7bfa      	ldrb	r2, [r7, #15]
 80029b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b4:	60bb      	str	r3, [r7, #8]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	7b5b      	ldrb	r3, [r3, #13]
 80029be:	4619      	mov	r1, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4610      	mov	r0, r2
 80029c6:	461a      	mov	r2, r3
 80029c8:	f7fe fe2c 	bl	8001624 <XMC_VADC_GROUP_ChannelInit>
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	789b      	ldrb	r3, [r3, #2]
 80029d6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	4619      	mov	r1, r3
                                indexed->res_handle);
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	685b      	ldr	r3, [r3, #4]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 80029e2:	4610      	mov	r0, r2
 80029e4:	461a      	mov	r2, r3
 80029e6:	f7ff ffa7 	bl	8002938 <XMC_VADC_GROUP_ResultInit>
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	695a      	ldr	r2, [r3, #20]
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	7b1b      	ldrb	r3, [r3, #12]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 80029f4:	4619      	mov	r1, r3
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	7b5b      	ldrb	r3, [r3, #13]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 80029fa:	4610      	mov	r0, r2
 80029fc:	461a      	mov	r2, r3
 80029fe:	f7ff ff7f 	bl	8002900 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	3301      	adds	r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0cd      	beq.n	80029aa <ADC_MEASUREMENT_Init+0x4e>
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
      }
#endif
    }
#if(UC_SERIES != XMC11)
    if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle != NULL ))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	7a1b      	ldrb	r3, [r3, #8]
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d02c      	beq.n	8002a78 <ADC_MEASUREMENT_Init+0x11c>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d028      	beq.n	8002a78 <ADC_MEASUREMENT_Init+0x11c>
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	b2dc      	uxtb	r4, r3
 8002a2e:	f7ff fed3 	bl	80027d8 <NVIC_GetPriorityGrouping>
 8002a32:	4601      	mov	r1, r0
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 8002a38:	685a      	ldr	r2, [r3, #4]
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	4608      	mov	r0, r1
 8002a42:	4611      	mov	r1, r2
 8002a44:	461a      	mov	r2, r3
 8002a46:	f7ff ff17 	bl	8002878 <NVIC_EncodePriority>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	b263      	sxtb	r3, r4
 8002a4e:	4618      	mov	r0, r3
 8002a50:	4611      	mov	r1, r2
 8002a52:	f7ff fee7 	bl	8002824 <NVIC_SetPriority>
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
#endif
      /* Connect background Request Source Event to NVIC node */
      XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(handle_ptr->global_handle->module_ptr,
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	695a      	ldr	r2, [r3, #20]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	7e5b      	ldrb	r3, [r3, #25]
 8002a60:	4610      	mov	r0, r2
 8002a62:	4619      	mov	r1, r3
 8002a64:	f7fe fc90 	bl	8001388 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>
    		                                         (XMC_VADC_SR_t) handle_ptr->srv_req_node);
    
      /* Enable Background Scan Request source IRQ */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->req_src_intr_handle->node_id);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	b25b      	sxtb	r3, r3
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff febe 	bl	80027f4 <NVIC_EnableIRQ>
    /* Enable Background Scan Request source IRQ */
    NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
#endif
#endif
    /* Mux Configuration is done*/
    if (handle_ptr->mux_config != NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d002      	beq.n	8002a86 <ADC_MEASUREMENT_Init+0x12a>
    {
    	(handle_ptr->mux_config)();
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	4798      	blx	r3
    }
  
    if (handle_ptr->start_conversion != (bool)false)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	7e9b      	ldrb	r3, [r3, #26]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <ADC_MEASUREMENT_Init+0x13e>
    {
      /* Start conversion manually using load event trigger*/
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ff21 	bl	80028dc <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
    }
    handle_ptr->init_state = status;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	7bba      	ldrb	r2, [r7, #14]
 8002a9e:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	7e1b      	ldrb	r3, [r3, #24]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd90      	pop	{r4, r7, pc}

08002aac <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8002ab6:	4819      	ldr	r0, [pc, #100]	; (8002b1c <DAVE_Init+0x70>)
 8002ab8:	f7ff fe4a 	bl	8002750 <CLOCK_XMC4_Init>
 8002abc:	4603      	mov	r3, r0
 8002abe:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d104      	bne.n	8002ad0 <DAVE_Init+0x24>
  {
	 /**  Initialization of UART APP instance UART_0 */
	 init_status = (DAVE_STATUS_t)UART_Init(&UART_0); 
 8002ac6:	4816      	ldr	r0, [pc, #88]	; (8002b20 <DAVE_Init+0x74>)
 8002ac8:	f7fe fedc 	bl	8001884 <UART_Init>
 8002acc:	4603      	mov	r3, r0
 8002ace:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002ad0:	79fb      	ldrb	r3, [r7, #7]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d104      	bne.n	8002ae0 <DAVE_Init+0x34>
  {
	 /**  Initialization of DIGITAL_IO APP instance dhDIGITAL_OUT_0 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&dhDIGITAL_OUT_0); 
 8002ad6:	4813      	ldr	r0, [pc, #76]	; (8002b24 <DAVE_Init+0x78>)
 8002ad8:	f7ff fda6 	bl	8002628 <DIGITAL_IO_Init>
 8002adc:	4603      	mov	r3, r0
 8002ade:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d104      	bne.n	8002af0 <DAVE_Init+0x44>
  {
	 /**  Initialization of SYSTIMER APP instance dhSYSTIMER_0 */
	 init_status = (DAVE_STATUS_t)SYSTIMER_Init(&dhSYSTIMER_0); 
 8002ae6:	4810      	ldr	r0, [pc, #64]	; (8002b28 <DAVE_Init+0x7c>)
 8002ae8:	f7ff fc18 	bl	800231c <SYSTIMER_Init>
 8002aec:	4603      	mov	r3, r0
 8002aee:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002af0:	79fb      	ldrb	r3, [r7, #7]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d104      	bne.n	8002b00 <DAVE_Init+0x54>
  {
	 /**  Initialization of DIGITAL_IO APP instance dhDIGITAL_IN_0 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&dhDIGITAL_IN_0); 
 8002af6:	480d      	ldr	r0, [pc, #52]	; (8002b2c <DAVE_Init+0x80>)
 8002af8:	f7ff fd96 	bl	8002628 <DIGITAL_IO_Init>
 8002afc:	4603      	mov	r3, r0
 8002afe:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d104      	bne.n	8002b10 <DAVE_Init+0x64>
  {
	 /**  Initialization of ADC_MEASUREMENT APP instance dhADC_MEASUREMENT_0 */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_Init(&dhADC_MEASUREMENT_0); 
 8002b06:	480a      	ldr	r0, [pc, #40]	; (8002b30 <DAVE_Init+0x84>)
 8002b08:	f7ff ff28 	bl	800295c <ADC_MEASUREMENT_Init>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8002b10:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	200000d4 	.word	0x200000d4
 8002b20:	20000000 	.word	0x20000000
 8002b24:	08002cdc 	.word	0x08002cdc
 8002b28:	200000d0 	.word	0x200000d0
 8002b2c:	08002cf0 	.word	0x08002cf0
 8002b30:	20000078 	.word	0x20000078

08002b34 <CB_Timer_20ms>:
//uint8_t state = OFF;
uint8_t read_data[]   = {0x0, 0x1};
uint8_t send_data[] = "\nHello world!";

void CB_Timer_20ms()
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
	flag = !flag;
 8002b38:	4b07      	ldr	r3, [pc, #28]	; (8002b58 <CB_Timer_20ms+0x24>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	b25b      	sxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	bf0c      	ite	eq
 8002b42:	2301      	moveq	r3, #1
 8002b44:	2300      	movne	r3, #0
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	4b03      	ldr	r3, [pc, #12]	; (8002b58 <CB_Timer_20ms+0x24>)
 8002b4c:	701a      	strb	r2, [r3, #0]
}
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	200000dc 	.word	0x200000dc

08002b5c <main>:

int main(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
	DAVE_STATUS_t status;
	status = DAVE_Init();           /* Initialization of DAVE APPs  */
 8002b62:	f7ff ffa3 	bl	8002aac <DAVE_Init>
 8002b66:	4603      	mov	r3, r0
 8002b68:	71fb      	strb	r3, [r7, #7]

	if(status != DAVE_STATUS_SUCCESS)
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d000      	beq.n	8002b72 <main+0x16>
		XMC_DEBUG("DAVE APPs initialization failed\n");

		while(1U)
		{
			//Is Error
		}
 8002b70:	e7fe      	b.n	8002b70 <main+0x14>
	}

	Timer_20ms_Id = SYSTIMER_CreateTimer(20000, SYSTIMER_MODE_PERIODIC, (void*) CB_Timer_20ms, NULL);	//creat 20ms timmer
 8002b72:	f644 6020 	movw	r0, #20000	; 0x4e20
 8002b76:	2101      	movs	r1, #1
 8002b78:	4a0a      	ldr	r2, [pc, #40]	; (8002ba4 <main+0x48>)
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f7ff fc08 	bl	8002390 <SYSTIMER_CreateTimer>
 8002b80:	4602      	mov	r2, r0
 8002b82:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <main+0x4c>)
 8002b84:	601a      	str	r2, [r3, #0]
	SYSTIMER_StartTimer(Timer_20ms_Id);	//20ms start Timer!
 8002b86:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <main+0x4c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fc9e 	bl	80024cc <SYSTIMER_StartTimer>
	{
		/* Read the data */
			//UART_Receive(&UART_0, read_data,1);

		  /* Transmit the message */
		UART_Transmit(&UART_0, send_data, sizeof(send_data));
 8002b90:	4806      	ldr	r0, [pc, #24]	; (8002bac <main+0x50>)
 8002b92:	4907      	ldr	r1, [pc, #28]	; (8002bb0 <main+0x54>)
 8002b94:	220e      	movs	r2, #14
 8002b96:	f7fe fe87 	bl	80018a8 <UART_Transmit>
		  //UART_Transmit(&UART_0, Tx_Data, sizeof(Tx_Data));
		  read_data[0] = 0x0;
 8002b9a:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <main+0x58>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
//				//DIGITAL_IO_SetOutputHigh(&dhDIGITAL_OUT_0);	//Check run LED
//				UART_Transmit(&dhUART_0, Tx_Data, sizeof(Tx_Data));	//Tx_Data's data send
//			}
//			flag = !flag;
//		}
	}
 8002ba0:	e7f6      	b.n	8002b90 <main+0x34>
 8002ba2:	bf00      	nop
 8002ba4:	08002b35 	.word	0x08002b35
 8002ba8:	20000200 	.word	0x20000200
 8002bac:	20000000 	.word	0x20000000
 8002bb0:	20000098 	.word	0x20000098
 8002bb4:	20000094 	.word	0x20000094

08002bb8 <__libc_init_array>:
 8002bb8:	b570      	push	{r4, r5, r6, lr}
 8002bba:	4b0e      	ldr	r3, [pc, #56]	; (8002bf4 <__libc_init_array+0x3c>)
 8002bbc:	4c0e      	ldr	r4, [pc, #56]	; (8002bf8 <__libc_init_array+0x40>)
 8002bbe:	1ae4      	subs	r4, r4, r3
 8002bc0:	10a4      	asrs	r4, r4, #2
 8002bc2:	2500      	movs	r5, #0
 8002bc4:	461e      	mov	r6, r3
 8002bc6:	42a5      	cmp	r5, r4
 8002bc8:	d004      	beq.n	8002bd4 <__libc_init_array+0x1c>
 8002bca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bce:	4798      	blx	r3
 8002bd0:	3501      	adds	r5, #1
 8002bd2:	e7f8      	b.n	8002bc6 <__libc_init_array+0xe>
 8002bd4:	f7fe fd8a 	bl	80016ec <_init>
 8002bd8:	4c08      	ldr	r4, [pc, #32]	; (8002bfc <__libc_init_array+0x44>)
 8002bda:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <__libc_init_array+0x48>)
 8002bdc:	1ae4      	subs	r4, r4, r3
 8002bde:	10a4      	asrs	r4, r4, #2
 8002be0:	2500      	movs	r5, #0
 8002be2:	461e      	mov	r6, r3
 8002be4:	42a5      	cmp	r5, r4
 8002be6:	d004      	beq.n	8002bf2 <__libc_init_array+0x3a>
 8002be8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bec:	4798      	blx	r3
 8002bee:	3501      	adds	r5, #1
 8002bf0:	e7f8      	b.n	8002be4 <__libc_init_array+0x2c>
 8002bf2:	bd70      	pop	{r4, r5, r6, pc}
 8002bf4:	200000a8 	.word	0x200000a8
 8002bf8:	200000a8 	.word	0x200000a8
 8002bfc:	200000a8 	.word	0x200000a8
 8002c00:	200000a8 	.word	0x200000a8

08002c04 <g_xmc_vadc_group_array>:
 8002c04:	40004400 40004800 40004c00 40005000     .D.@.H.@.L.@.P.@

08002c14 <UART_0_channel_config>:
 8002c14:	00002580 10010808 00000000              .%..........

08002c20 <UART_0_tx_pin_config>:
 8002c20:	00000090 00000001 00000002              ............

08002c2c <UART_0_tx_pin>:
 8002c2c:	48028100 00000005 08002c20              ...H.... ,..

08002c38 <UART_0_config>:
 8002c38:	08002c14 08001d79 00000000 00000000     .,..y...........
	...
 8002c5c:	08002c2c 05000000 00000305              ,,..........

08002c68 <UART_0_rx_pin_config>:
 8002c68:	00000000 00000001 00000002              ............

08002c74 <group_init_handle0>:
	...

08002c88 <group_init_handle1>:
	...

08002c9c <group_init_handle2>:
	...

08002cb0 <group_init_handle3>:
	...

08002cc4 <global_config>:
 8002cc4:	00000000 00000003 00000000 00000000     ................
	...

08002cdc <dhDIGITAL_OUT_0>:
 8002cdc:	48028100 00000080 00010000 00000000     ...H............
 8002cec:	00000001                                ....

08002cf0 <dhDIGITAL_IN_0>:
 8002cf0:	48028100 00000000 00000000 00000000     ...H............
 8002d00:	0000000e 01040250 00010000 00000000     ....P...........
 8002d10:	00010000 01010101                       ........

08002d18 <global_iclass_config>:
 8002d18:	00000200                                ....

08002d1c <backgnd_rs_intr_handle>:
 8002d1c:	00000010 0000003f 00000000              ....?.......

08002d28 <backgnd_config>:
 8002d28:	00000005 00000000 00000008              ............
