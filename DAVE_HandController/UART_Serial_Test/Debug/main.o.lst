   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "main.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.UART_IsTxBusy,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	UART_IsTxBusy:
  25              	.LFB264:
  26              	 .file 1 "C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART/uart.h"
   1:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
   2:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @file uart.h
   3:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @date 2015-12-17
   4:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
   5:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * NOTE:
   6:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
   8:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @cond
   9:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  10:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * UART v4.1.8 - Configures a USIC channel to perform transmit & receive operations using UART prot
  11:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
  12:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  13:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * All rights reserved.
  14:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
  15:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  16:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * following conditions are met:
  17:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
  18:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  19:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   disclaimer.
  20:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
  21:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  22:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   disclaimer in the documentation and/or other materials provided with the distribution.
  23:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
  24:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  25:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   products derived from this software without specific prior written permission.
  26:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
  27:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  28:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  29:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  30:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  31:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  32:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  33:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
  35:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  36:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * with Infineon Technologies AG (dave@infineon.com).
  37:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  38:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
  39:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Change History
  40:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * --------------
  41:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
  42:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * 2015-02-16:
  43:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     - Initial version for DAVEv4
  44:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
  45:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * 2015-06-20:
  46:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     - Changed the abort API name from UART_Abort_Receive to UART_AbortReceive and added return t
  47:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
  48:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * 2015-07-01:
  49:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     - Changed structure name from UART_DYNAMIC_t to UART_RUNTIME_t
  50:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
  51:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * 2015-07-09:
  52:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     - Renamed UART_GetProtocolStatus as UART_GetFlagStatus and UART_ClearProtocolStatus as UART_
  53:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     - Removed APIs UART_GetTXFIFOStatus, UART_GetRXFIFOStatus, UART_ClearTXFIFOStatus,
  54:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       UART_ClearRXFIFOStatus
  55:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
  56:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * 2015-07-14:
  57:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     - Added support for DMA and Direct mode
  58:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
  59:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @endcond
  60:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
  61:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
  62:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
  63:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**************************************************************************************************
  64:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * HEADER FILES
  65:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  66:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #ifndef UART_H
  67:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #define UART_H
  68:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
  69:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #include <xmc_scu.h>
  70:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #include <xmc_gpio.h>
  71:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #include <xmc_uart.h>
  72:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
  73:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  74:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****        (XMC_LIB_MINOR_VERSION >= 0U) && \
  75:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****        (XMC_LIB_PATCH_VERSION >= 0U)))
  76:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #error "UART requires XMC Peripheral Library v2.0.0 or higher"
  77:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #endif
  78:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
  79:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #include <DAVE_common.h>
  80:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #include "uart_conf.h"
  81:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #if ((defined UART_TX_DMA_USED) || (defined UART_RX_DMA_USED))
  82:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #include "../GLOBAL_DMA/global_dma.h"
  83:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #endif
  84:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
  85:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**************************************************************************************************
  86:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * MACROS
  87:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  88:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /*
  89:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Represents the maximum data size for DMA transaction*/
  90:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #define UART_DMA_MAXCOUNT (4095U)
  91:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
  92:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**************************************************************************************************
  93:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * ENUMS
  94:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  95:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
  96:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @ingroup UART_enumerations
  97:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @{
  98:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
  99:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
 100:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
 101:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Enum to describe the possible status values, returned
 102:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  by UART APIs.
 103:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
 104:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** typedef enum UART_STATUS
 105:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** {
 106:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   UART_STATUS_SUCCESS,        /**< Indicates App initialization state successful */
 107:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
 108:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   UART_STATUS_FAILURE,        /**< Unknown error */
 109:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
 110:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   UART_STATUS_BUSY,           /**< UART Busy */
 111:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
 112:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   UART_STATUS_BUFFER_INVALID, /**< Buffer provided or the buffer size is invalid*/
 113:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
 114:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   UART_STATUS_MODE_MISMATCH   /**< API invoked by a handle configured with different mode.
 115:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****                                    e.g, If UART_StartTransmitDMA is invoked for an instance
 116:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****                                    which has transmit mode configured as "Interrupt", will
 117:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****                                    return this status.*/
 118:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
 119:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** } UART_STATUS_t;
 120:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
 121:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
 122:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Enum used to describe the UART Mode of operation
 123:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
 124:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** typedef enum UART_MODE
 125:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** {
 126:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   UART_MODE_FULLDUPLEX, /**< Full Duplex mode selected */
 127:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   UART_MODE_HALFDUPLEX, /**< Half Duplex mode selected */
 128:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   UART_MODE_LOOPBACK    /**< LoopBack mode selected */
 129:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** } UART_MODE_t;
 130:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
 131:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
 132:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Enum used to identify UART protocol event callback function
 133:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
 134:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** typedef enum UART_EVENT
 135:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** {
 136:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   UART_EVENT_SYNC_BRK,    /**< Synchronization break detected event */
 137:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   UART_EVENT_RX_NOISE,    /**< Receiver noise detected event */
 138:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   UART_EVENT_FORMAT_ERR0, /**< Frame format error at stop bit 0 event */
 139:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   UART_EVENT_FORMAT_ERR1, /**< Frame format error at stop bit 1 event */
 140:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   UART_EVENT_COLLISION,   /**< Data collision detected in half duplex mode event */
 141:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   UART_EVENT_MAX          /**< Indicates number of UART events supported*/
 142:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** } UART_EVENT_t;
 143:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
 144:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
 145:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Enum used to identify the transfer type used for either transmit or receive function.
 146:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
 147:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** typedef enum UART_TRANSFER_MODE
 148:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** {
 149:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_INTERRUPT,  /**< Implement data transmit or receive using interrupts */
 150:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_DMA,        /**< Implement data transmit or receive using DMA */
 151:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_DIRECT      /**< This configuration exposes signals for external APP connectio
 152:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** }UART_TRANSFER_MODE_t;
 153:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
 154:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
 155:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @}
 156:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
 157:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
 158:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**************************************************************************************************
 159:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * DATA STRUCTURES
 160:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  **************************************************************************************************
 161:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
 162:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Function pointer used for callback function
 163:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
 164:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** typedef void (*UART_cbhandler)(void);
 165:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
 166:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Function pointer used for initialization function
 167:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
 168:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** typedef UART_STATUS_t (*UART_init_handler)(void);
 169:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
 170:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @ingroup UART_datastructures
 171:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @{
 172:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
 173:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
 174:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
 175:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Wrapper typedefinition for XMC_UART_PROTOCOL_STATUS_t.
 176:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
 177:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** typedef XMC_UART_CH_STATUS_FLAG_t UART_PROTOCOL_STATUS_t;
 178:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
 179:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
 180:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Structure for transmit pin configuration.
 181:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
 182:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** typedef struct UART_TX_CONFIG
 183:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** {
 184:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   XMC_GPIO_PORT_t *const port;            /**< Pointer to the GPIO port base address */
 185:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   const uint8_t pin;                      /**< Pin number in the port*/
 186:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   const XMC_GPIO_CONFIG_t *const config;  /**< Pin configuration structure */
 187:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** } UART_TX_CONFIG_t;
 188:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
 189:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #if (defined(UART_TX_DMA_USED) || defined(UART_RX_DMA_USED))
 190:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
 191:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Structure for DMA configuration.
 192:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
 193:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** typedef struct UART_DMA_CONFIG
 194:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** {
 195:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   const XMC_DMA_CH_CONFIG_t * dma_ch_config;   /**< Pointer to the DMA channel configuration.*/
 196:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   uint8_t dma_channel;                         /**< DMA channel number */
 197:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** }UART_DMA_CONFIG_t;
 198:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #endif
 199:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
 200:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
 201:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Structure for holding the configuration parameters of UART channel.
 202:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
 203:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** typedef struct UART_CONFIG
 204:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** {
 205:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   const XMC_UART_CH_CONFIG_t * const channel_config;   /**< Basic UART configuration from the GUI w
 206:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****                                                             frame length, stop bits and parity */
 207:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #if (defined UART_TX_DMA_USED) || (defined UART_RX_DMA_USED)
 208:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   GLOBAL_DMA_t * global_dma;                           /**< Global DMA handle */
 209:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #endif
 210:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #ifdef UART_TX_DMA_USED
 211:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   const UART_DMA_CONFIG_t * const transmit_dma_config; /**< Pointer to the DMA channel configuratio
 212:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #endif
 213:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #ifdef UART_RX_DMA_USED
 214:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   const UART_DMA_CONFIG_t * const receive_dma_config;  /**< Pointer to the DMA channel configuratio
 215:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #endif
 216:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   UART_init_handler fptr_uart_config;                  /**< Function pointer to configure the MUX v
 217:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #ifdef UART_TX_INTERRUPT_USED
 218:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   UART_cbhandler tx_cbhandler;                         /**< Function pointer to hold the callback f
 219:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****                                                             called when the transmission is complet
 220:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #endif
 221:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #ifdef UART_RX_INTERRUPT_USED
 222:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   UART_cbhandler rx_cbhandler;                         /**< Function pointer to hold the callback f
 223:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****                                                             called when the reception is complete *
 224:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #endif
 225:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   UART_cbhandler sync_error_cbhandler;                 /**< Function pointer to hold the callback f
 226:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****                                                             called when synchronization break detec
 227:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   UART_cbhandler rx_noise_error_cbhandler;             /**< Function pointer to hold the callback f
 228:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****                                                             called when receiver noise is detected*
 229:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   UART_cbhandler format_error_bit0_cbhandler;          /**< Function pointer to hold the callback f
 230:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****                                                             called when format error with stop bit 
 231:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   UART_cbhandler format_error_bit1_cbhandler;          /**< Function pointer to hold the callback f
 232:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****                                                             called when format error with stop bit 
 233:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   UART_cbhandler collision_error_cbhandler;            /**< Function pointer to hold the callback f
 234:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****                                                             called when collision error is detected
 235:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   const UART_TX_CONFIG_t * tx_pin_config;              /**< Transmit pin configuration to be used d
 236:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****                                                             and while changing baudrate. */
 237:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   UART_MODE_t mode;                                    /**< UART operation mode */
 238:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_t transmit_mode;                  /**< Mode used for transmitting data. Data c
 239:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****                                                             interrupt, DMA or direct(using polling 
 240:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_t receive_mode;                   /**< Mode used for receiving data. Data can 
 241:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****                                                             interrupt, DMA or direct(using polling 
 242:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_FIFO_SIZE_t tx_fifo_size;                /**< Transmit FIFO size configuration */
 243:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_FIFO_SIZE_t rx_fifo_size;                /**< Receive FIFO size configuration */
 244:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   uint8_t tx_sr;                                       /**< Service request number assigned to tran
 245:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** } UART_CONFIG_t;
 246:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
 247:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
 248:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Structure to hold the dynamic variables for the UART communication.
 249:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
 250:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** typedef struct UART_RUNTIME
 251:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** {
 252:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   uint8_t * tx_data;            /**< Pointer to the transmit data buffer*/
 253:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   uint8_t * rx_data;            /**< Pointer to the receive data buffer*/
 254:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   uint32_t tx_data_count;       /**< Number of bytes of data to be transmitted*/
 255:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   uint32_t tx_data_index;       /**< Index to the byte to be transmitted next in the tx_data buffer
 256:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   uint32_t rx_data_count;       /**< Number of bytes of data to be received*/
 257:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   uint32_t rx_data_index;       /**< Indicates the number of bytes currently available in the rx_da
 258:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   volatile bool tx_busy;        /**< Status flag to indicate busy when a transmission is assigned*/
 259:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   volatile bool rx_busy;        /**< Status flag to indicate busy when a reception is assigned*/
 260:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** } UART_RUNTIME_t;
 261:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
 262:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
 263:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Handler structure with pointers to dynamic and static parameters.
 264:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
 265:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** typedef struct UART
 266:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** {
 267:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_t * const channel;              /**< USIC channel*/
 268:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   const UART_CONFIG_t * const config;         /**< UART configuration structure pointer*/
 269:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   UART_RUNTIME_t * const runtime;             /**< Pointer to the structure holding all variables,
 270:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****                                                    that can change at runtime*/
 271:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** } UART_t;
 272:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
 273:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
 274:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @}
 275:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
 276:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
 277:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**************************************************************************************************
 278:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * API Prototypes
 279:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  **************************************************************************************************
 280:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
 281:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #ifdef __cplusplus
 282:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** extern "C" {
 283:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #endif
 284:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
 285:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @ingroup UART_apidoc
 286:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @{
 287:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
 288:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
 289:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Get the UART APP version.
 290:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 291:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 292:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Example Usage:
 293:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @code
 294:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  //Description:
 295:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  //Transmits the text "UART APP supported.", if the UART APP version is v4.1.x, where x can be a
 296:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>
 297:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 298:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   int main(void)
 299:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
 300:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 301:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     DAVE_APP_VERSION_t uart_version;
 302:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     uint8_t valid_str[] = "UART APP supported.";
 303:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 304:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 305:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 306:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
 307:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       uart_version = UART_GetAppVersion();
 308:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       if((uart_version.major == 4) &&
 309:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *          (uart_version.minor == 1))
 310:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       {
 311:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, valid_str, sizeof(valid_str));
 312:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       }
 313:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
 314:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     else
 315:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
 316:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 317:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      while(1U)
 318:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      {
 319:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      }
 320:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
 321:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      return 1U;
 322:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  }
 323:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  @endcode
 324:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
 325:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** DAVE_APP_VERSION_t UART_GetAppVersion(void);
 326:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
 327:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
 328:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Initializes the UART module as per the configuration made
 329:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * in UI.
 330:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param handle Pointer to static and dynamic content of APP configuration.
 331:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t: Status of UART driver initialization.\n
 332:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                    @ref UART_STATUS_SUCCESS - on successful initialization.\n
 333:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                    @ref UART_STATUS_FAILURE - if initialization fails.\n
 334:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                    @ref UART_STATUS_BUSY - if UART channel is busy.\n
 335:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 336:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 337:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Initializes IO pins used for the UART communication, configures
 338:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * USIC registers based on the settings provided in the GUI. Calculates divider
 339:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * values PDIV and STEP for a precise baudrate. It also enables configured interrupt
 340:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * flags and service request values.
 341:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * <BR>
 342:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 343:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Example Usage:
 344:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @code
 345:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 346:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 347:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   int main(void)
 348:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
 349:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 350:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 351:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 352:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 353:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
 354:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         while(1U)
 355:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         {
 356:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         }
 357:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
 358:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     else
 359:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
 360:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 361:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      while(1U)
 362:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      {
 363:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      }
 364:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
 365:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      return 1U;
 366:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  }
 367:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  @endcode
 368:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
 369:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_Init(const UART_t *const handle);
 370:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
 371:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
 372:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Registers a request for receiving data over UART channel.
 373:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 374:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 375:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  handle  Pointer to UART_t handle structure
 376:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param data_ptr  Pointer to data of type uint8_t.
 377:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  count  Total no of bytes to be received.\n
 378:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                \b Range: minimum= 1, maximum= maximum value supported by type uint32_t.
 379:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 380:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status for receive request.\n
 381:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 382:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a reception is in progress.\n
 383:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 384:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 385:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 386:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 387:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Data will be received asynchronously. After the requested number of data bytes are received,
 388:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * optionally, the user configured callback function will be executed.
 389:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Data reception is accomplished using the receive mode selected in the UI.
 390:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * <b>Interrupt:</b><br>
 391:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Based on the UI configuration, either standard receive buffer(RBUF) or receive FIFO(OUT) is used
 392:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * for data reception. An interrupt is configured for reading received data from the bus. This func
 393:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * only registers a request to receive a number of data bytes from a USIC channel. If FIFO is
 394:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * configured for reception, the FIFO limit is dynamically configured to optimally utilize the
 395:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * CPU load. Before starting data reception, the receive buffers are flushed. So only those data, r
 396:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * after calling the API, will be placed in the user buffer.
 397:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * When all the requested number of data bytes are received, the configured callback
 398:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * function will be executed.
 399:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 400:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 401:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 402:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * <br>
 403:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * <b>DMA:</b><br>
 404:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * DMA mode is available only in XMC4x family of microcontrollers. In this mode, a DMA channel is
 405:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * configured for receiving data from standard receive buffer(RBUF) to the user buffer. By calling
 406:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * this API, the DMA channel destination address is configured to the user buffer and the channel i
 407:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * enabled. FIFO will not be used when the receive mode is DMA.
 408:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Before starting data reception, the receive buffers are flushed. So only those data, received
 409:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * after calling the API, will be placed in the user buffer.
 410:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * When all the requested number of data bytes are received, the configured callback
 411:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * function will be executed.
 412:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 413:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 414:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 415:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * <br>
 416:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * <b>Direct</b><br>
 417:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * In Direct receive mode, neither interrupt nor DMA is used. The API polls
 418:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * the receive flag to read the received data and waits for all the requested number of bytes to
 419:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * be received. Based on FIFO configuration, either RBUF or OUT register is used for reading receiv
 420:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * data. Before starting data reception, the receive buffers are flushed. So only those data, recei
 421:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * after calling the API, will be placed in the user buffer.
 422:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * <i><b> Note:</b> In Direct mode, the API blocks the CPU until the count of bytes requested is re
 423:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * If this behaviour is not desired, use other APIs like @ref UART_GetReceivedWord, @ref UART_GetPr
 424:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 425:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Example Usage:
 426:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @code
 427:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 428:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 429:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 430:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Receive mode should be configured as "Direct".
 431:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Description:
 432:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Transmits 10 bytes of data after receiving 10 bytes of data.
 433:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 434:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   int main(void)
 435:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
 436:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 437:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
 438:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 439:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 440:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 441:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
 442:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       while(1)
 443:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       {
 444:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         //Receive 10 bytes of data
 445:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         if(UART_Receive(&UART_0, ReadData, 10) == UART_STATUS_SUCCESS)
 446:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         {
 447:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           //Retransmit the received 10 bytes
 448:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, ReadData, 10);
 449:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         }
 450:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       }
 451:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
 452:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     else
 453:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
 454:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 455:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      while(1U)
 456:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      {
 457:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      }
 458:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
 459:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      return 1U;
 460:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  }
 461:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  @endcode
 462:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 463:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
 464:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 465:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
 466:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
 467:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Registers a request for transmitting data over UART channel.
 468:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 469:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  handle  UART APP handle pointer of type @ref UART_t
 470:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  data_ptr Pointer to data of type uint8_t.
 471:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  count Total no of words to be transmitted.\n
 472:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * \b Range: minimum= 1, maximum= maximum supported by uint32_t.
 473:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 474:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status of transmit request.\n
 475:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 476:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a transmission is in progress.\n
 477:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0.\n
 478:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 479:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 480:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * request is registered.
 481:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 482:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 483:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Transmits data using the UART channel. Transmission is accomplished using the transmit mode
 484:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * as configured in the UI.<br>
 485:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * <b>Interrupt:</b><br>
 486:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * The data transmission is accomplished using transmit interrupt. User can configure
 487:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the data is fully transmitted, the callback
 488:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * function will be executed. If transmit FIFO is enabled, the trigger limit is set to 1.
 489:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * So the transmit interrupt will be generated when all the data in FIFO is moved out of FIFO.
 490:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * The APP handle's runtime structure is used to store the data pointer, count, data index
 491:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * and status of transmission. This function only registers a data transmission request if
 492:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * there is no active transmission in progress. Actual data transmission happens in the transmit
 493:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * interrupt service routine. A trigger is generated for the transmit interrupt to start loading
 494:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * the data to the transmit buffer. If transmit FIFO is configured, the data is filled into the FIF
 495:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Transmit interrupt will be generated subsequently when the transmit FIFO is empty. At this
 496:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * point of time, if there is some more data to be transmitted, it is loaded to the FIFO again.
 497:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * When FIFO is not enabled, data is transmitted one byte at a time. On transmission of each byte
 498:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * an interrupt is generated and the next byte is transmitted in the interrupt service routine.
 499:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Callback function is executed when all the data bytes are transmitted.
 500:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 501:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 502:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * the completion of data transmission.<br>
 503:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * <b>DMA:</b><br>
 504:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * A DMA channel is configured to provide data to the UART transmit buffer. This removes the load
 505:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * off the CPU. This API will only configure and enable the DMA channel by specifying the data buff
 506:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * and count of bytes to transmit. Rest is taken care without the CPU's intervention. User can conf
 507:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the transmission is complete, the callback function will
 508:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * FIFO will not be used in DMA mode. Transmit buffer interrupt is configured for triggering the
 509:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * DMA channel. So each byte is transmitted in the background through the DMA channel.
 510:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * If the callback function is not configured, \a handle->runtime->tx_busy flag can be checked to
 511:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * verify if the transmission is complete.
 512:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * <b>Direct:</b><br>
 513:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Data will be transmitted using polling method. Status flags are used to check if data can be tra
 514:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * <i><b> Note:</b> In Direct mode, the API blocks the CPU until the count of bytes requested is tr
 515:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * If this behaviour is not desired, use other APIs like @ref UART_TransmitWord, @ref UART_GetProto
 516:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 517:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Example Usage:
 518:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @code
 519:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 520:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 521:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 522:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Direct".
 523:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Description:
 524:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon".
 525:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 526:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   int main(void)
 527:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
 528:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 529:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
 530:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 531:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 532:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 533:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
 534:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       //Transmit the string.
 535:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data)-1);
 536:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       while(1)
 537:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       {
 538:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       }
 539:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
 540:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     else
 541:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
 542:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 543:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      while(1U)
 544:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      {
 545:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      }
 546:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
 547:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      return 1U;
 548:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  }
 549:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @endcode
 550:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 551:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
 552:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 553:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
 554:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #if (defined UART_TX_INTERRUPT_USED || defined UART_TX_DMA_USED)
 555:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
 556:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Aborts the ongoing data transmission.
 557:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param handle  UART APP handle pointer of type @ref UART_t
 558:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t: Result of transmit abort request.\n
 559:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_SUCCESS if the UART channel transmission is stopped
 560:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                       successfully.\n
 561:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_MODE_MISMATCH if transmit mode is Direct.\n
 562:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 563:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 564:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
 565:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * the existing data will be flushed. After the transmission is stopped, user can start
 566:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * a new transmission without delay. Abort request for transmit mode direct cannot be serviced sinc
 567:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * the direct mode transmit API is a blocking call.
 568:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 569:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Example Usage:
 570:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @code
 571:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 572:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 573:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 574:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Interrupt".
 575:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Description:
 576:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Initiates the transmission of one string, aborts the transmission immediately and
 577:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //starts transmission of another string. The receiver might see traces of first string followe
 578:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //by the complete second string.
 579:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 580:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   int main(void)
 581:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
 582:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 583:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     //String1
 584:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon DAVE application.";
 585:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     //String2
 586:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     uint8_t NewData[] = "New data message";
 587:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 588:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 589:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 590:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
 591:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       //Initiate transmission of first string.
 592:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data));
 593:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *		 //When the first string is being transmitted,
 594:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       if(UART_0.runtime->tx_busy)
 595:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       {
 596:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         //Stop the transmission of first string.
 597:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         if(UART_AbortTransmit(&UART_0) == UART_STATUS_SUCCESS)
 598:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         {
 599:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           //Start the transmission of second string
 600:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, NewData, sizeof(NewData));
 601:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           //Wait till the transmission is finished.
 602:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           while(UART_0.runtime->tx_busy);
 603:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         }
 604:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       }
 605:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       while(1)
 606:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       {
 607:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       }
 608:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
 609:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     else
 610:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
 611:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 612:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      while(1U)
 613:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      {
 614:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      }
 615:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
 616:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      return 1U;
 617:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  }
 618:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @endcode
 619:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 620:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
 621:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_AbortTransmit(const UART_t *const handle);
 622:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #endif
 623:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
 624:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #if (defined UART_RX_INTERRUPT_USED || defined UART_RX_DMA_USED)
 625:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
 626:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Stops the active data reception sequence.
 627:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
 628:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t: Result of reception abort request.\n
 629:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_SUCCESS if the UART channel reception has
 630:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                       been stopped.\n
 631:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_MODE_MISMATCH if receive mode is Direct.\n
 632:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 633:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 634:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * If a reception is in progress, it will be stopped. When a reception request
 635:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * is active, user will not be able to place a new receive request till the active
 636:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * reception is complete. This API can stop the progressing reception to make
 637:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * a new receive request. Abort request for receive mode direct cannot be serviced since
 638:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * the direct mode receive API is a blocking call.
 639:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 640:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Example Usage:
 641:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @code
 642:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 643:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 644:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 645:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Transmit mode and receive mode should be configured as "Interrupt".
 646:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Description:
 647:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon DAVE application." and starts to receive data.
 648:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //After receiving first byte, checks the value of first byte. If the first byte is 0x55,
 649:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //aborts the ongoing reception and transmits the received byte.
 650:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 651:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   int main(void)
 652:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
 653:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 654:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon DAVE application.";
 655:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[64];
 656:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 657:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 658:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 659:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
 660:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       //Transmit the initial string.
 661:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data));
 662:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       //Wait till the string is transmitted.
 663:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       while(UART_0.runtime->tx_busy);
 664:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 665:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       //Start reception of data
 666:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       UART_Receive(&UART_0, Rec_Data, 15);
 667:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       //Wait till atleast one byte is received.
 668:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       while(UART_0.runtime->rx_data_index == 0);
 669:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       //If the first byte is 0x55,
 670:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       if(UART_0.runtime->rx_data[0] == 0x55)
 671:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       {
 672:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         //Stop the reception
 673:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         if(UART_AbortReceive(&UART_0) == UART_STATUS_SUCCESS)
 674:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         {
 675:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           //Transmit the received one byte.
 676:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, Rec_Data, 1);
 677:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         }
 678:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       }
 679:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
 680:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     else
 681:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
 682:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 683:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      while(1U)
 684:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      {
 685:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      }
 686:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
 687:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      return 1U;
 688:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  }
 689:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @endcode
 690:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 691:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
 692:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_AbortReceive(const UART_t *const handle);
 693:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #endif
 694:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
 695:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #ifdef UART_RX_INTERRUPT_USED
 696:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
 697:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Registers a request for receiving data over UART channel.
 698:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 699:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 700:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  handle  Pointer to UART_t handle structure
 701:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param data_ptr  Pointer to data of type uint8_t.
 702:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  count  Total no of bytes to be received.\n
 703:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                \b Range: minimum= 1, maximum= maximum value supported by type uint32_t.
 704:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 705:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status for receive request.\n
 706:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 707:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a reception is in progress.\n
 708:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 709:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 710:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 711:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 712:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Data will be received asynchronously. When the requested number of data bytes are received,
 713:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * optionally, the user configured callback function will be executed.
 714:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Based on the UI configuration, either standard receive buffer or receive FIFO is used
 715:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * for data reception. An interrupt is configured for reading received data from the bus. This func
 716:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * only registers a request to receive a number of data bytes from a USIC channel. If FIFO is
 717:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * configured for reception, the FIFO limit is dynamically configured to optimally utilize the
 718:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * CPU load.  When all the requested number of data bytes are received, the configured callback
 719:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * function will be executed.
 720:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 721:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 722:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 723:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 724:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Example Usage:
 725:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @code
 726:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 727:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 728:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 729:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Transmit mode and receive mode should be configured as "Interrupt".
 730:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Description:
 731:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Receives 10 bytes of data and transmits the same.
 732:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 733:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   int main(void)
 734:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
 735:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 736:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
 737:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 738:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 739:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 740:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
 741:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       while(1)
 742:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       {
 743:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       //Start reception of 10 bytes. The status will be returned success, if the channel is not 
 744:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       if(UART_StartReceiveIRQ(&UART_0, ReadData, 10) == UART_STATUS_SUCCESS)
 745:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       {
 746:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         //Wait till the data is received.
 747:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->rx_busy)
 748:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         {
 749:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         }
 750:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         //Transmit the received data.
 751:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, ReadData, 10);
 752:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->tx_busy)
 753:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         {
 754:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         }
 755:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       }
 756:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       }
 757:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
 758:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     else
 759:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
 760:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 761:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      while(1U)
 762:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      {
 763:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      }
 764:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
 765:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      return 1U;
 766:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  }
 767:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  @endcode
 768:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 769:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
 770:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 771:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #endif
 772:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
 773:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #ifdef UART_TX_INTERRUPT_USED
 774:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
 775:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Registers a request for transmitting data over UART channel.
 776:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 777:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  handle  UART APP handle pointer of type @ref UART_t
 778:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  data_ptr Pointer to data of type uint8_t.
 779:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  count Total no of words to be transmitted.\n
 780:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * \b Range: minimum= 1, maximum= maximum supported by uint32_t.
 781:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 782:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status of transmit request.\n
 783:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 784:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a transmission is in progress.\n
 785:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0.\n
 786:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 787:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 788:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * request is registered.
 789:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 790:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 791:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * The data transmission is accomplished using transmit interrupt. User can configure
 792:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the data is fully transmitted, the callback
 793:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * function will be executed. If transmit FIFO is enabled, the trigger limit is set to 1.
 794:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * So the transmit interrupt will be generated when all the data in FIFO is moved from FIFO.
 795:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * The function uses APP handle's runtime structure to store the data pointer, count, data index
 796:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * and status of transmission. This function only registers a data transmission request if
 797:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * there is no active transmission in progress. Actual data transmission happens in the transmit
 798:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * interrupt service routine. A trigger is generated for the transmit interrupt to start loading
 799:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * the data. If transmit FIFO is configured, the data is filled into the FIFO.
 800:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Transmit interrupt will be generated next time when the transmit FIFO is empty. At this
 801:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * point of time, if there is some more data to be transmitted, it is loaded to the FIFO again.
 802:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * When FIFO is not enabled, data is transmitted one byte at a time. On transmission of each byte
 803:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * an interrupt is generated and the next byte is transmitted in the interrupt service routine.
 804:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Callback function is executed when all the data bytes are transmitted.
 805:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 806:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 807:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * the completion of data transmission.
 808:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 809:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Example Usage:
 810:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @code
 811:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 812:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 813:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 814:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Interrupt".
 815:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Description:
 816:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon"
 817:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 818:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   int main(void)
 819:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
 820:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 821:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
 822:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 823:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 824:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 825:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
 826:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       if(UART_StartTransmitIRQ(&UART_0, Send_Data, sizeof(Send_Data)) == UART_STATUS_SUCCESS)
 827:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       {
 828:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         //Wait till the data transmission is ongoing.
 829:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->tx_busy)
 830:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         {
 831:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         }
 832:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       }
 833:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
 834:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     else
 835:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
 836:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 837:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      while(1U)
 838:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      {
 839:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      }
 840:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
 841:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      return 1U;
 842:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  }
 843:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @endcode
 844:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 845:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
 846:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 847:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #endif
 848:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
 849:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #ifdef UART_TX_DMA_USED
 850:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
 851:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Registers a request for transmitting data over UART channel using DMA.
 852:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 853:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  handle  UART APP handle pointer of type @ref UART_t
 854:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  data_ptr Pointer to data of type uint8_t.
 855:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  count Total number of words to be transmitted.\n
 856:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * \b Range: minimum= 1, maximum= 4096.
 857:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 858:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status of transmit request.\n
 859:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 860:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a transmission is in progress.\n
 861:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_MODE_MISMATCH if the handle is not configured for
 862:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                        DMA transmit mode. \n
 863:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 864:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 865:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 866:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * request is registered.
 867:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 868:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 869:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * The data transmission is accomplished using DMA. User can configure
 870:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the data is fully transmitted, the callback
 871:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * function will be executed.
 872:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * The function uses APP handle's runtime structure to store the status of transmission.
 873:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * This function only registers a data transmission request, if
 874:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * there is no active transmission in progress. Actual data transmission happens through DMA channe
 875:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * A maximum of 4096 bytes can be transmitted in one API call. This limit is because of the DMA sin
 876:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Callback function is executed when all the data bytes are transmitted.
 877:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 878:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 879:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * the completion of data transmission.
 880:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * If data more than the block size of 4096 have to be transmitted, user will have to transmit them
 881:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 882:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Example Usage:
 883:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @code
 884:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 885:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 886:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 887:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "DMA".
 888:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Description:
 889:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon" using DMA.
 890:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 891:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   int main(void)
 892:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
 893:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 894:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
 895:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 896:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 897:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 898:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
 899:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       if(UART_StartTransmitDMA(&UART_0, Send_Data, sizeof(Send_Data)) == UART_STATUS_SUCCESS)
 900:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       {
 901:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         //Wait till the data is transmitted.
 902:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->tx_busy)
 903:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         {
 904:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         }
 905:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       }
 906:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
 907:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     else
 908:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
 909:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 910:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      while(1U)
 911:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      {
 912:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      }
 913:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
 914:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      return 1U;
 915:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  }
 916:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @endcode
 917:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 918:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
 919:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartTransmitDMA(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 920:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #endif
 921:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
 922:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #ifdef UART_RX_DMA_USED
 923:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
 924:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Registers a request for receiving data over UART channel using DMA.
 925:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 926:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 927:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  handle  Pointer to UART_t handle structure
 928:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param data_ptr  Pointer to data of type uint8_t.
 929:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  count  Total no of bytes to be received.\n
 930:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                \b Range: minimum= 1, maximum= 4096.
 931:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 932:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status for receive request.\n
 933:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 934:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a reception is in progress.\n
 935:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_MODE_MISMATCH if the handle is not configured for
 936:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                        DMA receive mode. \n
 937:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 938:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 939:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 940:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 941:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Data will be received asynchronously. When the requested number of data bytes are received,
 942:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * optionally, the user configured callback function will be executed.
 943:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * This function only registers a request to receive a number of data bytes from a USIC channel.
 944:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * When all the requested number of data bytes are received, the configured callback
 945:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * function will be executed.
 946:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 947:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 948:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 949:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * A maximum of 4096 bytes can be received in one API call. This limit is because of the DMA single
 950:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 951:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Example Usage:
 952:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @code
 953:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 954:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 955:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Pre condition:
 956:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Transmit mode and receive mode should be configured to "DMA"
 957:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Description:
 958:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Receives 10 bytes of data and transmits the received data.
 959:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 960:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   int main(void)
 961:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
 962:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 963:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
 964:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 965:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 966:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 967:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
 968:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       while(1)
 969:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       {
 970:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         //Receive 10 bytes of data
 971:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         if(UART_StartReceiveDMA(&UART_0, ReadData, 10) == UART_STATUS_SUCCESS)
 972:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         {
 973:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           //Wait till 10 bytes are received
 974:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           while(UART_0.runtime->rx_busy)
 975:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           {
 976:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           }
 977:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           //Transmit the received data.
 978:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           UART_StartTransmitDMA(&UART_0, ReadData, 10);
 979:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         }
 980:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       }
 981:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
 982:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     else
 983:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
 984:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 985:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      while(1U)
 986:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      {
 987:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      }
 988:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
 989:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      return 1U;
 990:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  }
 991:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  @endcode
 992:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
 993:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
 994:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartReceiveDMA(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 995:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** #endif
 996:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
 997:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
 998:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Changes the baudrate of UART channel.
 999:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1000:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param UART_t * Pointer to the UART APP handle.
1001:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param baud Value of new baudrate.
1002:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param oversampling Number of samples to be considered for each symbol. 16 is the standard value
1003:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1004:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t UART_STATUS_SUCCESS if baudrate changed successfully.
1005:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                       UART_STATUS_FAILURE if baudrate could not be changed.
1006:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1007:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1008:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * The function stops the channel, calculates the clock divider values to achieve the desired baudr
1009:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Sets the divider values and reconfigures the channel as per the configuration in the UI. The cha
1010:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * enabled at the end of configuration.
1011:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * <BR>
1012:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1013:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Example Usage:
1014:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * <i>Please disable the receive FIFO in the 'Advanced Settings' tab</i>
1015:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @code
1016:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1017:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>      //Declarations from DAVE Code Generation (includes SFR declaration)
1018:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1019:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * //Precondition:
1020:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * //Disable receive FIFO in the Advanced settings tab.
1021:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * //Description:
1022:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * //Waits for user input of new baudrate value. Input is recognized after line feed is provided.
1023:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * //Value is set as the new baudrate and the application waits for any key to be pressed.
1024:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * //This helps in reconfiguring the terminal application to the newly set baudrate. On receiving
1025:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * //new character, message indicating the successful baudrate change will be displayed using updat
1026:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * //value of baudrate.
1027:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1028:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * const uint8_t send_askbaud[] = "Please enter desired baudrate:";
1029:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * const uint8_t send_data[] = "\nPress 'y' to change baudrate to desired value:";
1030:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * const uint8_t send_invalid[] = "\nInvalid value!!";
1031:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * const uint8_t send_success[] = "\nWe made it...Baudrate changed successfully :-).\n\n";
1032:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * uint8_t rec_data[11];
1033:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * int main(void)
1034:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * {
1035:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1036:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   uint32_t baud;
1037:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1038:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();    // Initialization of DAVE Apps
1039:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1040:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1041:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
1042:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
1043:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     while(1U)
1044:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
1045:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
1046:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   }
1047:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1048:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   while(1U)
1049:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
1050:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     UART_Transmit(&UART_0, send_askbaud, sizeof(send_askbaud)-1);
1051:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     UART_Receive(&UART_0, rec_data, 10);
1052:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     while(UART_0.runtime->tx_busy);
1053:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     while(UART_0.runtime->rx_busy)
1054:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
1055:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       //If user enters newline character, accept the value
1056:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       if((UART_0.runtime->rx_data_index > 0) && (UART_0.runtime->rx_data[UART_0.runtime->rx_data
1057:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       {
1058:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         //End reception of data on finding newline character
1059:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         UART_AbortReceive(&UART_0);
1060:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       }
1061:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
1062:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     //Add end of string character to the last location
1063:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     rec_data[UART_0.runtime->rx_data_index] = 0;
1064:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     //Convert the entered string to number.
1065:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     baud = atoi(rec_data);
1066:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     //If the conversion is successful, set the baudrate.
1067:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     if(baud > 0)
1068:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
1069:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       //Set the baudrate to USIC channel
1070:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       if(UART_SetBaudrate(&UART_0, baud, 16) == UART_STATUS_SUCCESS)
1071:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       {
1072:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         //After changing the baudrate successfully,
1073:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         //Wait for user to enter a character.
1074:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         //This wait gives time for the user to change
1075:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         //the baudrate of the terminal tool used.
1076:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         UART_Receive(&UART_0, rec_data, 1);
1077:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->rx_busy);
1078:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, send_success, sizeof(send_success)-1);
1079:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       }
1080:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       else
1081:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       {
1082:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, send_invalid, sizeof(send_invalid)-1);
1083:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       }
1084:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
1085:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     else
1086:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
1087:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, send_invalid, sizeof(send_invalid)-1);
1088:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
1089:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     while(UART_0.runtime->tx_busy);
1090:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   }
1091:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * }
1092:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @endcode
1093:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * */
1094:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_SetBaudrate(const UART_t * handle, uint32_t baud, uint32_t oversampling);
1095:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
1096:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
1097:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Gets the transmit FIFO event flags.
1098:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1099:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1100:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1101:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @return uint32_t: Status of the STBI and TBERI bits in TRBSR register in
1102:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                      their bit positions.\n
1103:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                      \b Range: Use type @ref XMC_USIC_CH_TXFIFO_EVENT_t for the bitmask of event
1104:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1105:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1106:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Function reads the value of TRBSR register. It masks the standard transmit buffer
1107:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * interrupt flag and transmit buffer error flag before providing the value.
1108:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * User has to mask the bits of interest before checking the status.
1109:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1110:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Example Usage:
1111:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @code
1112:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1113:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1114:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  //Pre-condition:
1115:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  //Configure transmit mode as "Direct" with transmit FIFO enabled.
1116:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  //Description:
1117:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  //Transmits the string "Infineon".
1118:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   int main(void)
1119:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
1120:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1121:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1122:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1123:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1124:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1125:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1126:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
1127:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        //Clear the Tx FIFO standard transmit buffer event.
1128:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1129:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        //Iterate for the length of the string "Infineon"
1130:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data)-1)
1131:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        {
1132:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           //Put the character in the transmit FIFO.
1133:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           XMC_USIC_CH_TXFIFO_PutData((XMC_USIC_CH_t *)UART_0.channel,(uint16_t)Send_Data[index])
1134:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           index++;
1135:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1136:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining dat
1137:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1138:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1139:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        }
1140:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
1141:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     else
1142:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
1143:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1144:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      while(1U)
1145:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      {
1146:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      }
1147:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
1148:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      return 1U;
1149:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  }
1150:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @endcode
1151:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1152:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
1153:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint32_t UART_GetTXFIFOStatus(const UART_t* const handle)
1154:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** {
1155:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1156:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_TXFIFO_GetEvent(handle->channel);
1157:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** }
1158:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
1159:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
1160:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Provides the received data from receive buffer.
1161:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1162:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1163:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @return uint8_t: Data read from RBUF.\n
1164:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1165:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1166:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * This can be used in receive mode "Direct" to read the received data.
1167:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * If Rx FIFO is not configured, function reads the value of RBUF register.
1168:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Otherwise it reads the data from OUTR register.
1169:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * User can poll for receive event or configure an interrupt by connecting the
1170:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * external INTERRUPT APP to receive event signals. This API can be used inside the ISR to read the
1171:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1172:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Example Usage:
1173:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @code
1174:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1175:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1176:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
1177:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Configure transmit mode and receive mode as "Direct" with transmit FIFO and receive FIFO ena
1178:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Description:
1179:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon", receives 10 bytes and retransmits the received 10 bytes.
1180:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1181:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   int main(void)
1182:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
1183:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1184:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1185:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[10];
1186:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1187:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1188:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1189:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1190:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
1191:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        //Transmit the string "Infineon"
1192:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data))
1193:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        {
1194:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           UART_TransmitWord(&UART_0,Send_Data[index]);
1195:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           index++;
1196:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1197:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           //Wait for transmit buffer interrupt to fill it again with remaining data
1198:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1199:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1200:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        }
1201:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1202:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        //Configure receive FIFO trigger limit to 9.
1203:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        UART_SetRXFIFOTriggerLimit(&UART_0, 9);
1204:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        //Receive 10 bytes input
1205:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        index = 0;
1206:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        //Wait till 10 bytes are received
1207:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        while(!(UART_GetRXFIFOStatus(&UART_0) &
1208:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *             (XMC_USIC_CH_RXFIFO_EVENT_STANDARD | XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE)))
1209:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        {
1210:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *          Rec_Data[index] = UART_GetReceivedWord(&UART_0);
1211:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *          index++;
1212:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *          if(index == 10)
1213:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *          {
1214:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *            break;
1215:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *          }
1216:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1217:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        }
1218:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1219:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        //Transmit the received data
1220:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        index = 0;
1221:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        while(index < 10)
1222:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        {
1223:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           UART_TransmitWord(&UART_0,Rec_Data[index]);
1224:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           index++;
1225:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1226:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           //Wait for transmit buffer interrupt to fill it again with remaining data
1227:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1228:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1229:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        }
1230:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1231:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
1232:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     else
1233:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
1234:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1235:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      while(1U)
1236:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      {
1237:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      }
1238:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
1239:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      return 1U;
1240:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  }
1241:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @endcode
1242:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1243:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
1244:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint8_t UART_GetReceivedWord(const UART_t* const handle)
1245:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** {
1246:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1247:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   return (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
1248:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** }
1249:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
1250:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
1251:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Transmits a word of data.
1252:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1253:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t \n
1254:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param data Data to be transmitted.\n
1255:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @return None\n
1256:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1257:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1258:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Transmits a byte of data through the UART channel.
1259:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * If Tx FIFO is configured, the data is placed in the IN[0] register of the USIC channel used.
1260:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * If Tx FIFO is not configured, API waits for the TBUF to be free and then places the data in the 
1261:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * User can poll for receive event or configure interrupt by connecting an
1262:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * external INTERRUPT APP. This API can be used inside the ISR to read the received data.
1263:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1264:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Example Usage:
1265:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @code
1266:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1267:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1268:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Precondition:
1269:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Configure transmit mode and receive mode as "Direct"
1270:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Description:
1271:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infinon"
1272:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1273:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   int main(void)
1274:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
1275:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1276:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1277:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[10];
1278:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1279:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1280:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1281:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1282:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
1283:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data))
1284:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        {
1285:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           UART_TransmitWord(&UART_0,Send_Data[index]);
1286:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           index++;
1287:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1288:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           //Wait for transmit buffer interrupt to fill it again with remaining data
1289:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1290:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1291:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        }
1292:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
1293:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     else
1294:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
1295:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1296:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      while(1U)
1297:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      {
1298:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      }
1299:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
1300:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      return 1U;
1301:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  }
1302:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @endcode
1303:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1304:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
1305:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_TransmitWord(const UART_t* const handle, uint8_t data)
1306:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** {
1307:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1308:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   XMC_UART_CH_Transmit(handle->channel, (uint16_t)data);
1309:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** }
1310:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
1311:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
1312:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Enables the selected protocol events for interrupt generation.
1313:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1314:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1315:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  events Protocol events to be enabled for interrupt generation. \n
1316:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         \bRange: Use type \aXMC_UART_CH_EVENT_t to select the event. Multiple events can be
1317:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         combined using the bitwise OR operation.\n
1318:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @return None\n
1319:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1320:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1321:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Enables the events by configuring CCR or PCR register based on the event.
1322:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * When the event is enabled, an interrupt can be generated on occurrence of the event.
1323:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * The API should be used only for \a Direct mode related events. Using this API for non \a Direct 
1324:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * may not yield expected result.
1325:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1326:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Example Usage:
1327:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @code
1328:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * * #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR decla
1329:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1330:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * // Precondition:
1331:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * // Disable receive FIFO.
1332:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * // Add INTERRUPT APP and connect the UART APP protocol interrupt signal to the INTERRUPT APP
1333:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * // irq signal. Provide the callback function name in INTERRUPT APP as "ProtocolInterrupt".
1334:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * //
1335:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * // Description:
1336:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * // Generates an event when data loss is detected and transmits a relevent message.
1337:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * // To generate the event, transmit more than 2 bytes of data to the UART channel .
1338:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1339:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * int main(void)
1340:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * {
1341:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1342:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1343:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();
1344:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1345:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1346:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
1347:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1348:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1349:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     while(1U)
1350:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
1351:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1352:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
1353:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   }
1354:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Enable the interrupt generation when data loss is detected.
1355:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   UART_EnableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1356:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   while(1U)
1357:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
1358:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   }
1359:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * }
1360:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * //Protocol interrupt handler
1361:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * void ProtocolInterrupt()
1362:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * {
1363:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   uint8_t txt_msg[]="Receiver data loss detected";
1364:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Transmit the message to indicate data loss
1365:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, txt_msg, sizeof(txt_msg));
1366:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * }
1367:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @endcode
1368:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
1369:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_EnableEvent(const UART_t* const handle, uint32_t events)
1370:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** {
1371:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1372:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   XMC_UART_CH_EnableEvent(handle->channel, events);
1373:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** }
1374:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
1375:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
1376:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Disables selected events from generating interrupt.
1377:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1378:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1379:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  events Events to be disabled from generating interrupt. \n
1380:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         \bRange: Use type \aXMC_UART_CH_EVENT_t to select the event. Multiple events can be
1381:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         combined using the bitwise OR operation.\n
1382:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @return None
1383:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1384:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1385:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Events are disabled by clearing their respective bits in either CCR, TBCTR or RBCTR.
1386:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1387:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Example Usage:
1388:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @code
1389:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declara
1390:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1391:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * // Precondition:
1392:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * // Add INTERRUPT APP and connect the UART APP protocol interrupt signal to the INTERRUPT APP
1393:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * // irq signal. Provide the callback function name in INTERRUPT APP as "ProtocolInterrupt".
1394:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * //
1395:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * // Description: The example configures protocol interrupt for data loss detection.
1396:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * // When the data loss interrupt occurs, the receive FIFO is cleared. After the receive FIFO
1397:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * // is cleared, the channel can receive few bytes till the FIFO gets filled.
1398:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1399:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * int main(void)
1400:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * {
1401:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1402:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1403:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();
1404:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1405:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1406:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
1407:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1408:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1409:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     while(1U)
1410:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
1411:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1412:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
1413:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   }
1414:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Enable interrupt generation when data loss is detected
1415:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   UART_EnableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1416:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   while(1U)
1417:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
1418:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   }
1419:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * }
1420:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * void ProtocolInterrupt()
1421:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * {
1422:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   uint8_t txt_msg[]="Receiver data loss detected";
1423:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, txt_msg, sizeof(txt_msg));
1424:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   UART_DisableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1425:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Clear receive FIFO so that data will be received.
1426:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   XMC_USIC_CH_RXFIFO_Flush(UART_0.channel);
1427:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   UART_EnableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1428:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * }
1429:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @endcode
1430:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1431:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
1432:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_DisableEvent(const UART_t* const handle, uint32_t events)
1433:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** {
1434:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1435:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   XMC_UART_CH_DisableEvent(handle->channel, events);
1436:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** }
1437:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
1438:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
1439:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Checks if the transmit FIFO is full.
1440:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1441:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1442:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1443:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @return bool Status of transmit FIFO filling level.
1444:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *              \bRange: \atrue- if transmit FIFO is full.<br>
1445:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                       \afalse- if transmit FIFO is not full.<br>
1446:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1447:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Checks the status using the register TRBSR. Can be used while filling
1448:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * data to the transmit FIFO.
1449:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1450:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Example Usage:
1451:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @code
1452:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declar
1453:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1454:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  // Precondition:
1455:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  // Transmit mode should be "Direct"
1456:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  //Description:
1457:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  //Transmits a string using FIFO.
1458:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1459:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * uint8_t send_data[] = "Infineon Technologies";
1460:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * int main(void)
1461:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * {
1462:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1463:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   uint32_t loc_index;
1464:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1465:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();           // Initialization of DAVE APPs
1466:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1467:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1468:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
1469:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1470:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1471:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     while(1U)
1472:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
1473:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1474:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
1475:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   }
1476:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   for(loc_index = 0; loc_index < sizeof(send_data); loc_index++)
1477:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
1478:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     //Wait when Tx FIFO is full
1479:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     while(UART_IsTXFIFOFull(&UART_0))
1480:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
1481:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
1482:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     UART_TransmitWord(&UART_0, send_data[loc_index]);
1483:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   }
1484:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   while(1U)
1485:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
1486:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   }
1487:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * }
1488:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @endcode
1489:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
1490:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** __STATIC_INLINE bool UART_IsTXFIFOFull(const UART_t* const handle)
1491:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** {
1492:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1493:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
1494:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** }
1495:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
1496:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
1497:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Checks if the receive FIFO is empty.
1498:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1499:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1500:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1501:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @return bool Status of receive FIFO filling level.
1502:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *              \bRange: \atrue- if receive FIFO is empty.<br>
1503:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                       \afalse- if receive FIFO still has data.<br>
1504:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1505:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Checks the status using the register TRBSR. Can be used while reading
1506:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * data from the receive FIFO.
1507:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1508:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Example Usage:
1509:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @code
1510:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declar
1511:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1512:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  // Precondition:
1513:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  // Receive mode should be "Direct"
1514:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  //
1515:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  // Description:
1516:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  // Receives 10 bytes and transmits the received 10 bytes.
1517:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1518:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * uint8_t send_text[] = "Enter 10 bytes:";
1519:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * uint8_t rec_data[10];
1520:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * int main(void)
1521:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * {
1522:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1523:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   uint32_t loc_index;
1524:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1525:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();           // Initialization of DAVE APPs
1526:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1527:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1528:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
1529:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1530:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1531:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     while(1U)
1532:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
1533:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1534:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
1535:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   }
1536:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, send_text, sizeof(send_text));
1537:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   for(loc_index = 0; loc_index < sizeof(rec_data); loc_index++)
1538:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
1539:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     //Wait when Rx FIFO is empty
1540:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     while(UART_IsRXFIFOEmpty(&UART_0))
1541:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
1542:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
1543:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     rec_data[loc_index] = UART_GetReceivedWord(&UART_0);
1544:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   }
1545:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Transmit the received data
1546:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, rec_data, sizeof(rec_data));
1547:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   while(1U)
1548:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
1549:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   }
1550:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * }
1551:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @endcode
1552:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
1553:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** __STATIC_INLINE bool UART_IsRXFIFOEmpty(const UART_t* const handle)
1554:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** {
1555:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1556:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
1557:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** }
1558:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
1559:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
1560:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Configures trigger limit for the transmit FIFO.
1561:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1562:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1563:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  limit Value of transmit FIFO filling level, transition below which the interrupt should 
1564:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *               \bRange: 0 to transmit FIFO size.\n
1565:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *               e.g, If transmit FIFO size is 16, and limit is configured as 8, FIFO standard tran
1566:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *               will be generated when the FIFO filling level drops from 8 to 7.\n
1567:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1568:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @return None\n
1569:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1570:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1571:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Transmit FIFO trigger limit is configured by setting its value in the TBCTR register.
1572:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Transmit FIFO is configured to generate interrupt when the FIFO filling level drops
1573:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * below the trigger limit.
1574:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1575:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Example Usage:
1576:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @code
1577:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1578:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1579:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Precondition:
1580:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Configure receive mode as "Direct"
1581:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Add an instance of the INTERRUPT APP and connect the UART event_fifo_transmit_buffer_interru
1582:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //signal to the INTERRUPT sr_irq signal.
1583:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Provide the callback function name in INTERRUPT APP as "tx_cb"
1584:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Description:
1585:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon" using FIFO. Configures the FIFO to generate event when the F
1586:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //is empty. Puts one byte to the FIFO when the event is generated.
1587:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1588:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   uint8_t Send_Data[] = "Infineon";
1589:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   uint8_t index = 0;
1590:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   int main(void)
1591:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
1592:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1593:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[10];
1594:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1595:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1596:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1597:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
1598:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       //Configure transmit interrupt generation when the transmit FIFO is empty
1599:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       UART_SetTXFIFOTriggerLimit(&UART_0, 1);
1600:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       //Put one word to the FIFO
1601:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       UART_TransmitWord(&UART_0,Send_Data[index]);
1602:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       index++;
1603:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
1604:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     else
1605:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
1606:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1607:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      while(1U)
1608:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      {
1609:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      }
1610:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
1611:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      return 1U;
1612:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  }
1613:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1614:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  //INTERRUPT APP callback function
1615:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  void tx_cb()
1616:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  {
1617:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *    if(index < sizeof(Send_Data))
1618:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *    {
1619:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      //Put one word to the FIFO
1620:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      UART_TransmitWord(&UART_0,Send_Data[index]);
1621:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      index++;
1622:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *    }
1623:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  }
1624:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @endcode
1625:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
1626:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_SetTXFIFOTriggerLimit(const UART_t* const handle, uint32_t limit)
1627:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** {
1628:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1629:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(handle->channel, handle->config->tx_fifo_size, limit);
1630:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** }
1631:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
1632:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
1633:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Configures trigger limit for the receive FIFO.
1634:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1635:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1636:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  limit Value of receive FIFO filling level, transition above which the interrupt should b
1637:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *               \bRange: 0 to receive FIFO size.\n
1638:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *               e.g, If receive FIFO size is 16, and limit is configured as 8, FIFO receive buffer
1639:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *               will be generated when the FIFO filling level rises from 8 to 9.\n
1640:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1641:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @return None\n
1642:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1643:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1644:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Receive FIFO trigger limit is configured by setting its value in the RBCTR register.
1645:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Receive FIFO is configured to generate interrupt when the FIFO filling level rises
1646:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * above the trigger limit.
1647:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1648:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Example Usage:
1649:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @code
1650:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1651:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1652:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Precondition:
1653:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Configure receive mode as "Direct"
1654:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Add an instance of the INTERRUPT APP and connect the UART event_fifo_receive_buffer_interrup
1655:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //signal to the INTERRUPT sr_irq signal.
1656:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Provide the callback function name in INTERRUPT APP as "rx_cb"
1657:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Description:
1658:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1659:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   uint8_t Rec_Data[10];
1660:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   uint8_t index = 0;
1661:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   int main(void)
1662:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
1663:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1664:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1665:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1666:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1667:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
1668:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       //Configure receive interrupt generation when 10 bytes are received
1669:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       UART_SetRXFIFOTriggerLimit(&UART_0, 9);
1670:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       //Wait for the data to be received.
1671:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       while(index < 10);
1672:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       //Transmit the received data
1673:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Rec_Data, 10);
1674:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       //Wait for transmission to finish
1675:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       while(UART_0.runtime->tx_busy);
1676:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
1677:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     else
1678:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
1679:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1680:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      while(1U)
1681:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      {
1682:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      }
1683:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
1684:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      return 1U;
1685:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  }
1686:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1687:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  //INTERRUPT APP callback function
1688:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  void rx_cb()
1689:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  {
1690:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *    while((index < 10) && (!XMC_USIC_CH_RXFIFO_IsEmpty(UART_0.channel)))
1691:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *    {
1692:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      //Read data from FIFO
1693:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      Rec_Data[index] = UART_GetReceivedWord(&UART_0);
1694:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      index++;
1695:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *    }
1696:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  }
1697:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @endcode
1698:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
1699:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_SetRXFIFOTriggerLimit(const UART_t* const handle, uint32_t limit)
1700:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** {
1701:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1702:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, handle->config->rx_fifo_size, limit);
1703:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** }
1704:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
1705:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
1706:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Gets the status of event flags related to receive FIFO.
1707:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1708:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1709:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1710:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1711:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @return uint32_t: Status of standard receive buffer event, alternative receive buffer
1712:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * event and receive buffer error event in their bit positions in TRBSR register.\n
1713:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * \b Range: Use type @ref XMC_USIC_CH_RXFIFO_EVENT_t for event bitmasks. Multiple events' status
1714:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * can be combined for comparison using \a OR operation.
1715:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1716:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1717:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * It provides the status of standard receive buffer event, alternative receive buffer
1718:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * event and receive buffer error event.
1719:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Function masks the TRBSR register with the bitmask of SRBI,
1720:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * ARBI and RBERI flags. User has to mask the bits of interest before checking
1721:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * the status.
1722:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1723:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Example Usage:
1724:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @code
1725:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1726:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  //Precondition: Configure transmit mode and receive mode as direct.
1727:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  //Description: Receives data of 10 bytes and retransmits it.
1728:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   int main(void)
1729:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
1730:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1731:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
1732:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1733:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1734:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1735:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1736:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
1737:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       //Configure the receive FIFO event to generate when one byte is received.
1738:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       UART_SetRXFIFOTriggerLimit(&UART_0, 0);
1739:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       while(1U)
1740:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       {
1741:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         //Check if receive FIFO event is generated
1742:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         if(UART_GetRXFIFOStatus(&UART_0) & XMC_USIC_CH_RXFIFO_EVENT_STANDARD)
1743:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         {
1744:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           UART_ClearRXFIFOStatus(&UART_0, XMC_USIC_CH_RXFIFO_EVENT_STANDARD);
1745:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           //Read received data
1746:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           ReadData[index] = (uint8_t)XMC_USIC_CH_RXFIFO_GetData((XMC_USIC_CH_t *)&UART_0.channel
1747:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           //Transmit received data
1748:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, &ReadData[index], 1);
1749:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           index++;
1750:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           index = index % 10;
1751:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         }
1752:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       }
1753:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
1754:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     else
1755:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
1756:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1757:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      while(1U)
1758:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      {
1759:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      }
1760:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
1761:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      return 1U;
1762:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  }
1763:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @endcode
1764:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1765:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
1766:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint32_t UART_GetRXFIFOStatus(const UART_t* const handle)
1767:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** {
1768:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1769:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_RXFIFO_GetEvent(handle->channel);
1770:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** }
1771:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
1772:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
1773:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Function clears the specified FIFO event flag related to
1774:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * transmit FIFO.
1775:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1776:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1777:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1778:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  flag Value with event bits at their bit positions in TRBSR register
1779:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *             to be cleared.\n
1780:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_USIC_CH_TXFIFO_EVENT_t. Multiple events can be
1781:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *             combined using \a OR operation.
1782:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1783:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @return    None
1784:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1785:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1786:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Function clears a status bit in TRBSR register using the TRBSCR register.
1787:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * But the function does not mask the input value with the bit positions restricted
1788:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * to transmit FIFO status bits. User should ensure that the input value is appropriately
1789:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * masked.
1790:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1791:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Example Usage:
1792:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @code
1793:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1794:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Precondition: Configure transmit mode as direct.
1795:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Description: Transmits the string "Infineon" bytewise.
1796:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   int main(void)
1797:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
1798:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1799:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1800:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1801:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1802:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1803:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1804:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
1805:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data))
1806:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        {
1807:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           //Put every byte to FIFO.
1808:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           XMC_USIC_CH_TXFIFO_PutData(UART_0.channel,(uint16_t)Send_Data[index]);
1809:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           index++;
1810:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1811:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           //Wait for FIFO transmit standar buffer interrupt to fill it again with remaining data
1812:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1813:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1814:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        }
1815:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
1816:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     else
1817:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
1818:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1819:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      while(1U)
1820:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      {
1821:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      }
1822:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
1823:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      return 1U;
1824:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  }
1825:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @endcode
1826:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1827:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
1828:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_ClearTXFIFOStatus(const UART_t* const handle, const uint32_t flag)
1829:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** {
1830:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1831:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_TXFIFO_ClearEvent(handle->channel, flag);
1832:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** }
1833:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
1834:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
1835:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Function clears the specified FIFO event flag related to
1836:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * receive FIFO. It should be used to clear the status of standard
1837:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * receive buffer interrupt, alternative receive buffer interupt and
1838:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * receive buffer error interrupt flags.
1839:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1840:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1841:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1842:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param  flag Value with event bits at the bit positions in TRBSR register
1843:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *             to be cleared.\n
1844:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_USIC_CH_RXFIFO_EVENT_t for providing events.
1845:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *             Multiple events can be input by using \a OR operation.
1846:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1847:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @return    None
1848:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1849:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1850:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Function clears a status bit in TRBSR using the TRBSCR register.
1851:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * The function does not mask the input value to clear only receive buffer
1852:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * events. So user should appropriately mask the input value before calling
1853:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * the function.
1854:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1855:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Example Usage:
1856:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @code
1857:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1858:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Precondition: Configure transmit mode and receive mode as direct.
1859:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Description: Receives data of 10 bytes and transmits the same bytewise.
1860:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   int main(void)
1861:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
1862:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1863:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
1864:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1865:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1866:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1867:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1868:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
1869:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       //Configure receive FIFO to generate event when one byte is received.
1870:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       UART_SetRXFIFOTriggerLimit(&UART_0, 0);
1871:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       while(1U)
1872:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       {
1873:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         //Check if receive event is generated
1874:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         if(UART_GetRXFIFOStatus(&UART_0) & XMC_USIC_CH_RXFIFO_EVENT_STANDARD)
1875:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         {
1876:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           //Clear receive event
1877:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           UART_ClearRXFIFOStatus(&UART_0, XMC_USIC_CH_RXFIFO_EVENT_STANDARD);
1878:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           //Read received data from FIFO
1879:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           ReadData[index] = (uint8_t)XMC_USIC_CH_RXFIFO_GetData((XMC_USIC_CH_t *)&UART_0.channel
1880:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           //Transmit received data
1881:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, &ReadData[index], 1);
1882:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           index++;
1883:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           index = index % 10;
1884:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         }
1885:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       }
1886:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
1887:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     else
1888:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
1889:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1890:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      while(1U)
1891:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      {
1892:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      }
1893:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
1894:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      return 1U;
1895:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  }
1896:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @endcode
1897:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1898:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  */
1899:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_ClearRXFIFOStatus(const UART_t* const handle, const uint32_t flag)
1900:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** {
1901:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1902:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_RXFIFO_ClearEvent(handle->channel, flag);
1903:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** }
1904:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
1905:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
1906:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Provides the status of protocol events.
1907:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1908:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
1909:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param protocol_status Event whose status is to be read.\n
1910:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_UART_CH_STATUS_FLAG_t for input. Multiple events can
1911:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *             be combined using \a OR operation.
1912:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1913:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @return uint32_t: Status of selected protocol events read from PSR_ASCMode register.\n
1914:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * \b Range: Use type @ref XMC_UART_CH_STATUS_FLAG_t for comparing the return value
1915:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * with event bitmasks. Status of multiple events can be checked by combining enum
1916:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * values using \a OR operation while comparing.
1917:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1918:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1919:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Reads the protocol status bits from the register PSR_ASCMode and compares the values with
1920:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * the input value of selected events. Returns the masked value of selected events with the status 
1921:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * This function is an inline wrapper for the API provided by xmc_uart.h file.
1922:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * <BR>
1923:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1924:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Example Usage:
1925:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @code
1926:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>
1927:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  //Precondition: Configure transmit mode as Interrupt
1928:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  //Desription: Transmits the string "Infineon", waits for transmit buffer to go idle and then re
1929:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  //Transmits the received 10 bytes.
1930:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1931:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * int main(void)
1932:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * {
1933:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t init_status;
1934:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   uint8_t Send_Data[] = "Infineon";
1935:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   uint8_t ReceiveData[10] = {0};
1936:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1937:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   init_status = DAVE_Init();
1938:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1939:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   if(init_status == DAVE_STATUS_SUCCESS)
1940:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
1941:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      //Send the first string.
1942:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      //Check if the request to transmit is accepted.
1943:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      while(UART_Transmit(&UART_0,Send_Data, sizeof(Send_Data)) == UART_STATUS_BUSY)
1944:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      {
1945:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      }
1946:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1947:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     while(1U)
1948:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
1949:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        //Check if transmit buffer is idle
1950:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        if(UART_GetFlagStatus(&UART_0, XMC_UART_CH_STATUS_FLAG_TRANSMISSION_IDLE))
1951:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        {
1952:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           //Check if receive request is successful
1953:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           if(UART_Receive(&UART_0, ReceiveData, 10) == UART_STATUS_SUCCESS)
1954:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           {
1955:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *             //Wait for reception of 10 bytes
1956:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *             while(UART_0.runtime->rx_busy)
1957:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *             {
1958:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *             }
1959:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *             //Transmit the received data.
1960:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *             UART_Transmit(&UART_0, ReceiveData, 10);
1961:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           }
1962:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        }
1963:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
1964:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   }
1965:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   else
1966:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
1967:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1968:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("main: Application initialization failed");
1969:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     while(1U)
1970:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
1971:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
1972:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   }
1973:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1974:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   return 1U;
1975:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * }
1976:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @endcode
1977:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1978:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * */
1979:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint32_t UART_GetFlagStatus(const UART_t * const handle, uint32_t protocol_status)
1980:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** {
1981:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1982:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   return (XMC_UART_CH_GetStatusFlag(handle->channel) & protocol_status);
1983:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** }
1984:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
1985:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
1986:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Clears the event status in the register(PSR_ASCMode).
1987:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1988:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
1989:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param protocol_status Event whose status is to be cleared.\n
1990:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_UART_CH_STATUS_FLAG_t for input. Multiple events can
1991:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *             be combined using \a OR operation.
1992:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @return None
1993:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
1994:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1995:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Clears a given protocol event flag bit using the PSCR register.
1996:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * This function is an inline wrapper for the API provided by xmc_uart.h file.
1997:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * The user should mask the input value based on the events to be cleared.
1998:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * <BR>
1999:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
2000:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Example Usage:
2001:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @code
2002:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>
2003:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  //Precondition:
2004:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  //Configure receive mode as direct and disable receive FIFO and transmit FIFO.
2005:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  //Description:
2006:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  //Transmits each received byte of data.
2007:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * int main(void)
2008:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * {
2009:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t init_status;
2010:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   uint16_t ReceiveData = 0;
2011:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
2012:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   init_status = DAVE_Init();
2013:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
2014:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   if(init_status == DAVE_STATUS_SUCCESS)
2015:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
2016:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     while(1U)
2017:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
2018:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        //Check if data is received
2019:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        if(UART_GetFlagStatus(&UART_0, (XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION |
2020:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)))
2021:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        {
2022:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           //Read the received data
2023:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           ReceiveData = XMC_UART_CH_GetReceivedData(UART_0.channel);
2024:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           //Transmit the received data
2025:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           XMC_UART_CH_Transmit(UART_0.channel,(const uint16_t)ReceiveData);
2026:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           //Clear the receive flags
2027:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           UART_ClearFlag(&UART_0,(XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION |
2028:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                    XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION));
2029:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *        }
2030:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
2031:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   }
2032:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   else
2033:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
2034:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
2035:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("main: Application initialization failed");
2036:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     while(1U)
2037:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
2038:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
2039:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   }
2040:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
2041:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   return 1U;
2042:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * }
2043:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @endcode
2044:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
2045:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * */
2046:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_ClearFlag(const UART_t *const handle, const uint32_t protocol_status)
2047:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** {
2048:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
2049:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   XMC_UART_CH_ClearStatusFlag(handle->channel, protocol_status);
2050:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** }
2051:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** 
2052:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** /**
2053:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @brief Checks if the transmission is in progress.
2054:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
2055:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
2056:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @return bool: Status of data transmission.\n
2057:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *               <b>Range:</b> true - if transmission is ongoing.\n
2058:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *                             false- if transmission is not active.\n
2059:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
2060:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
2061:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Indicates if the communication channel is busy in transmitting data provided using UART_Transmit
2062:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * UART_StartTransmitDMA API.
2063:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * <BR>
2064:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
2065:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * Example Usage:
2066:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @code
2067:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>
2068:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
2069:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Interrupt".
2070:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Description:
2071:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //Initiates the transmission of one string, aborts the transmission immediately and
2072:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //starts transmission of another string. The receiver might see traces of first string followe
2073:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   //by the complete second string.
2074:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
2075:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   int main(void)
2076:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *   {
2077:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
2078:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     //String1
2079:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon DAVE application.";
2080:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     //String2
2081:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     uint8_t NewData[] = "New data message";
2082:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
2083:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
2084:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
2085:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
2086:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       //Initiate transmission of first string.
2087:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data));
2088:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     //When the first string is being transmitted,
2089:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       if(UART_IsTxBusy(&UART_0))
2090:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       {
2091:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         //Stop the transmission of first string.
2092:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         if(UART_AbortTransmit(&UART_0) == UART_STATUS_SUCCESS)
2093:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         {
2094:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           //Start the transmission of second string
2095:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, NewData, sizeof(NewData));
2096:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           //Wait till the transmission is finished.
2097:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *           while(UART_IsTxBusy(&UART_0));
2098:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *         }
2099:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       }
2100:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       while(1)
2101:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       {
2102:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *       }
2103:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
2104:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     else
2105:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     {
2106:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
2107:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      while(1U)
2108:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      {
2109:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      }
2110:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *     }
2111:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *      return 1U;
2112:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *  }
2113:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * @endcode
2114:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  *
2115:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****  * */
2116:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** __STATIC_INLINE bool UART_IsTxBusy(const UART_t *const handle)
2117:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** {
  27              	 .loc 1 2117 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
2118:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
2119:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h ****   return (handle->runtime->tx_busy);
  43              	 .loc 1 2119 0
  44 0008 7B68     	 ldr r3,[r7,#4]
  45 000a 9B68     	 ldr r3,[r3,#8]
  46 000c 1B7E     	 ldrb r3,[r3,#24]
  47 000e DBB2     	 uxtb r3,r3
2120:C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART\uart.h **** }
  48              	 .loc 1 2120 0
  49 0010 1846     	 mov r0,r3
  50 0012 0C37     	 adds r7,r7,#12
  51              	.LCFI3:
  52              	 .cfi_def_cfa_offset 4
  53 0014 BD46     	 mov sp,r7
  54              	.LCFI4:
  55              	 .cfi_def_cfa_register 13
  56              	 
  57 0016 5DF8047B 	 ldr r7,[sp],#4
  58              	.LCFI5:
  59              	 .cfi_restore 7
  60              	 .cfi_def_cfa_offset 0
  61 001a 7047     	 bx lr
  62              	 .cfi_endproc
  63              	.LFE264:
  65              	 .global flag
  66              	 .section .bss.flag,"aw",%nobits
  69              	flag:
  70 0000 00       	 .space 1
  71              	 .comm Timer_20ms_Id,4,4
  72              	 .global Tx_Data
  73              	 .section .data.Tx_Data,"aw",%progbits
  74              	 .align 2
  77              	Tx_Data:
  78 0000 00       	 .byte 0
  79 0001 01       	 .byte 1
  80 0002 02       	 .byte 2
  81 0003 03       	 .byte 3
  82 0004 04       	 .byte 4
  83 0005 05       	 .byte 5
  84 0006 06       	 .byte 6
  85 0007 07       	 .byte 7
  86 0008 08       	 .byte 8
  87 0009 09       	 .byte 9
  88 000a 0A       	 .byte 10
  89 000b 0B       	 .byte 11
  90 000c 0C       	 .byte 12
  91 000d 0D       	 .byte 13
  92 000e 0E       	 .byte 14
  93 000f 0F       	 .byte 15
  94 0010 10       	 .byte 16
  95 0011 11       	 .byte 17
  96 0012 12       	 .byte 18
  97 0013 00       	 .section .text.CB_Timer_20ms,"ax",%progbits
  98              	 .align 2
  99              	 .global CB_Timer_20ms
 100              	 .thumb
 101              	 .thumb_func
 103              	CB_Timer_20ms:
 104              	.LFB270:
 105              	 .file 2 "../main.c"
   1:../main.c     **** #include <DAVE.h>
   2:../main.c     **** 
   3:../main.c     **** //1.4 Rx  -> Orange
   4:../main.c     **** //1.5 Tx  -> brown
   5:../main.c     **** 
   6:../main.c     **** #define ON 1
   7:../main.c     **** #define OFF 0
   8:../main.c     **** 
   9:../main.c     **** int8_t flag = OFF;
  10:../main.c     **** uint32_t Timer_20ms_Id;
  11:../main.c     **** uint8_t Tx_Data[] = { 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 };
  12:../main.c     **** //uint8_t Rx_Data[] = { 0};
  13:../main.c     **** //uint8_t state = OFF;
  14:../main.c     **** 
  15:../main.c     **** void CB_Timer_20ms()
  16:../main.c     **** {
 106              	 .loc 2 16 0
 107              	 .cfi_startproc
 108              	 
 109              	 
 110              	 
 111 0000 80B4     	 push {r7}
 112              	.LCFI6:
 113              	 .cfi_def_cfa_offset 4
 114              	 .cfi_offset 7,-4
 115 0002 00AF     	 add r7,sp,#0
 116              	.LCFI7:
 117              	 .cfi_def_cfa_register 7
  17:../main.c     **** 	flag = !flag;
 118              	 .loc 2 17 0
 119 0004 074B     	 ldr r3,.L4
 120 0006 1B78     	 ldrb r3,[r3]
 121 0008 5BB2     	 sxtb r3,r3
 122 000a 002B     	 cmp r3,#0
 123 000c 0CBF     	 ite eq
 124 000e 0123     	 moveq r3,#1
 125 0010 0023     	 movne r3,#0
 126 0012 DBB2     	 uxtb r3,r3
 127 0014 DAB2     	 uxtb r2,r3
 128 0016 034B     	 ldr r3,.L4
 129 0018 1A70     	 strb r2,[r3]
  18:../main.c     **** }
 130              	 .loc 2 18 0
 131 001a BD46     	 mov sp,r7
 132              	.LCFI8:
 133              	 .cfi_def_cfa_register 13
 134              	 
 135 001c 5DF8047B 	 ldr r7,[sp],#4
 136              	.LCFI9:
 137              	 .cfi_restore 7
 138              	 .cfi_def_cfa_offset 0
 139 0020 7047     	 bx lr
 140              	.L5:
 141 0022 00BF     	 .align 2
 142              	.L4:
 143 0024 00000000 	 .word flag
 144              	 .cfi_endproc
 145              	.LFE270:
 147              	 .section .text.main,"ax",%progbits
 148              	 .align 2
 149              	 .global main
 150              	 .thumb
 151              	 .thumb_func
 153              	main:
 154              	.LFB271:
  19:../main.c     **** 
  20:../main.c     **** int main(void)
  21:../main.c     **** {
 155              	 .loc 2 21 0
 156              	 .cfi_startproc
 157              	 
 158              	 
 159 0000 80B5     	 push {r7,lr}
 160              	.LCFI10:
 161              	 .cfi_def_cfa_offset 8
 162              	 .cfi_offset 7,-8
 163              	 .cfi_offset 14,-4
 164 0002 82B0     	 sub sp,sp,#8
 165              	.LCFI11:
 166              	 .cfi_def_cfa_offset 16
 167 0004 00AF     	 add r7,sp,#0
 168              	.LCFI12:
 169              	 .cfi_def_cfa_register 7
  22:../main.c     **** 	DAVE_STATUS_t status;
  23:../main.c     **** 	status = DAVE_Init();           /* Initialization of DAVE APPs  */
 170              	 .loc 2 23 0
 171 0006 FFF7FEFF 	 bl DAVE_Init
 172 000a 0346     	 mov r3,r0
 173 000c FB71     	 strb r3,[r7,#7]
  24:../main.c     **** 
  25:../main.c     **** 	if(status != DAVE_STATUS_SUCCESS)
 174              	 .loc 2 25 0
 175 000e FB79     	 ldrb r3,[r7,#7]
 176 0010 002B     	 cmp r3,#0
 177 0012 00D0     	 beq .L7
 178              	.L8:
  26:../main.c     **** 	{
  27:../main.c     **** 		/* Placeholder for error handler code. The while loop below can be replaced with an user error ha
  28:../main.c     **** 		XMC_DEBUG("DAVE APPs initialization failed\n");
  29:../main.c     **** 
  30:../main.c     **** 		while(1U)
  31:../main.c     **** 		{
  32:../main.c     **** 			//Is Error
  33:../main.c     **** 		}
 179              	 .loc 2 33 0 discriminator 1
 180 0014 FEE7     	 b .L8
 181              	.L7:
  34:../main.c     **** 	}
  35:../main.c     **** 
  36:../main.c     **** 	Timer_20ms_Id = SYSTIMER_CreateTimer(20000, SYSTIMER_MODE_PERIODIC, (void*) CB_Timer_20ms, NULL);	
 182              	 .loc 2 36 0
 183 0016 44F62060 	 movw r0,#20000
 184 001a 0121     	 movs r1,#1
 185 001c 154A     	 ldr r2,.L12
 186 001e 0023     	 movs r3,#0
 187 0020 FFF7FEFF 	 bl SYSTIMER_CreateTimer
 188 0024 0246     	 mov r2,r0
 189 0026 144B     	 ldr r3,.L12+4
 190 0028 1A60     	 str r2,[r3]
  37:../main.c     **** 	SYSTIMER_StartTimer(Timer_20ms_Id);	//20ms start Timer!
 191              	 .loc 2 37 0
 192 002a 134B     	 ldr r3,.L12+4
 193 002c 1B68     	 ldr r3,[r3]
 194 002e 1846     	 mov r0,r3
 195 0030 FFF7FEFF 	 bl SYSTIMER_StartTimer
 196              	.L11:
  38:../main.c     **** 		/* Placeholder for user application code. The while loop below can be replaced with user applicat
  39:../main.c     **** 	while(1U)
  40:../main.c     **** 	{
  41:../main.c     **** 		if(flag == ON)
 197              	 .loc 2 41 0
 198 0034 114B     	 ldr r3,.L12+8
 199 0036 1B78     	 ldrb r3,[r3]
 200 0038 5BB2     	 sxtb r3,r3
 201 003a 012B     	 cmp r3,#1
 202 003c 18D1     	 bne .L9
  42:../main.c     **** 		{
  43:../main.c     **** 			if(UART_IsTxBusy(&dhUART_0) != true)	//Tx
 203              	 .loc 2 43 0
 204 003e 1048     	 ldr r0,.L12+12
 205 0040 FFF7FEFF 	 bl UART_IsTxBusy
 206 0044 0346     	 mov r3,r0
 207 0046 83F00103 	 eor r3,r3,#1
 208 004a DBB2     	 uxtb r3,r3
 209 004c 002B     	 cmp r3,#0
 210 004e 04D0     	 beq .L10
  44:../main.c     **** 			{
  45:../main.c     **** 				//DIGITAL_IO_SetOutputHigh(&dhDIGITAL_OUT_0);	//Check run LED
  46:../main.c     **** 				UART_Transmit(&dhUART_0, Tx_Data, sizeof(Tx_Data));	//Tx_Data's data send
 211              	 .loc 2 46 0
 212 0050 0B48     	 ldr r0,.L12+12
 213 0052 0C49     	 ldr r1,.L12+16
 214 0054 1322     	 movs r2,#19
 215 0056 FFF7FEFF 	 bl UART_Transmit
 216              	.L10:
  47:../main.c     **** 			}
  48:../main.c     **** 
  49:../main.c     **** 			flag = !flag;
 217              	 .loc 2 49 0
 218 005a 084B     	 ldr r3,.L12+8
 219 005c 1B78     	 ldrb r3,[r3]
 220 005e 5BB2     	 sxtb r3,r3
 221 0060 002B     	 cmp r3,#0
 222 0062 0CBF     	 ite eq
 223 0064 0123     	 moveq r3,#1
 224 0066 0023     	 movne r3,#0
 225 0068 DBB2     	 uxtb r3,r3
 226 006a DAB2     	 uxtb r2,r3
 227 006c 034B     	 ldr r3,.L12+8
 228 006e 1A70     	 strb r2,[r3]
 229              	.L9:
  50:../main.c     **** 		}
  51:../main.c     **** 	}
 230              	 .loc 2 51 0
 231 0070 E0E7     	 b .L11
 232              	.L13:
 233 0072 00BF     	 .align 2
 234              	.L12:
 235 0074 00000000 	 .word CB_Timer_20ms
 236 0078 00000000 	 .word Timer_20ms_Id
 237 007c 00000000 	 .word flag
 238 0080 00000000 	 .word dhUART_0
 239 0084 00000000 	 .word Tx_Data
 240              	 .cfi_endproc
 241              	.LFE271:
 243              	 .text
 244              	.Letext0:
 245              	 .file 3 "c:\\davev4\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 246              	 .file 4 "c:\\davev4\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 247              	 .file 5 "C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Libraries/XMCLib/inc/xmc_gpio.h"
 248              	 .file 6 "C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Libraries/XMCLib/inc/xmc4_gpio.h"
 249              	 .file 7 "C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Libraries/XMCLib/inc/xmc_usic.h"
 250              	 .file 8 "C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Libraries/XMCLib/inc/xmc_uart.h"
 251              	 .file 9 "C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/SYSTIMER/systimer.h"
 252              	 .file 10 "C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/DAVE.h"
 253              	 .file 11 "C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Libraries/CMSIS/Include/core_cm4.h"
 254              	 .file 12 "C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
 255              	 .file 13 "C:/Users/Lenovo/Desktop/HandController/UART_Serial_Test/Dave/Generated/UART/uart_extern.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
    {standard input}:20     .text.UART_IsTxBusy:00000000 $t
    {standard input}:24     .text.UART_IsTxBusy:00000000 UART_IsTxBusy
    {standard input}:69     .bss.flag:00000000 flag
    {standard input}:70     .bss.flag:00000000 $d
                            *COM*:00000004 Timer_20ms_Id
    {standard input}:77     .data.Tx_Data:00000000 Tx_Data
    {standard input}:74     .data.Tx_Data:00000000 $d
    {standard input}:98     .text.CB_Timer_20ms:00000000 $t
    {standard input}:103    .text.CB_Timer_20ms:00000000 CB_Timer_20ms
    {standard input}:143    .text.CB_Timer_20ms:00000024 $d
    {standard input}:148    .text.main:00000000 $t
    {standard input}:153    .text.main:00000000 main
    {standard input}:235    .text.main:00000074 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
DAVE_Init
SYSTIMER_CreateTimer
SYSTIMER_StartTimer
UART_Transmit
dhUART_0
