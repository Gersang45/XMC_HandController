
Test_FlexSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e7c  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00018000  2**0
                  ALLOC
  2 .data         00000088  20000000  0c001e7c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000148  20000088  0c001f04  00010088  2**2
                  ALLOC
  4 .no_init      00000014  2000ffc0  2000ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 00000940  00000000  00000000  00010088  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e574  00000000  00000000  000109c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018c3  00000000  00000000  0001ef3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003d00  00000000  00000000  000207ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002688  00000000  00000000  00024500  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005d75  00000000  00000000  00026b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005078  00000000  00000000  0002c8fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000818  00000000  00000000  00031975  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 00000390  00000000  00000000  0003218d  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	d9 14 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c001e7c 	.word	0x0c001e7c
 800024c:	20000000 	.word	0x20000000
 8000250:	00000088 	.word	0x00000088
 8000254:	0c001f04 	.word	0x0c001f04
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c001e7c 	.word	0x0c001e7c
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c001e7c 	.word	0x0c001e7c
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000088 	.word	0x20000088
 800027c:	00000144 	.word	0x00000144
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000290:	10000800 	.word	0x10000800

	.align	1
    .thumb
 8000294:	080002b5 	.word	0x080002b5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	08001d95 	.word	0x08001d95
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	08001d4d 	.word	0x08001d4d

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002b4:	b598      	push	{r3, r4, r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <SystemInit+0x1c>)
 80002ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002be:	4614      	mov	r4, r2
 80002c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002c6:	f001 fad5 	bl	8001874 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002ca:	f001 fb3d 	bl	8001948 <SystemCoreClockSetup>
}
 80002ce:	bd98      	pop	{r3, r4, r7, pc}
 80002d0:	2000ffc4 	.word	0x2000ffc4

080002d4 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002da:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d03e      	beq.n	8000364 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002e6:	4b2d      	ldr	r3, [pc, #180]	; (800039c <SystemCoreClockUpdate+0xc8>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d002      	beq.n	80002f8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e002      	b.n	80002fe <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002f8:	f001 fb1c 	bl	8001934 <OSCHP_GetFrequency>
 80002fc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002fe:	4b27      	ldr	r3, [pc, #156]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	2b00      	cmp	r3, #0
 8000308:	d020      	beq.n	800034c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000312:	0e1b      	lsrs	r3, r3, #24
 8000314:	3301      	adds	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000320:	0a1b      	lsrs	r3, r3, #8
 8000322:	3301      	adds	r3, #1
 8000324:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	3301      	adds	r3, #1
 8000332:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	fb02 f303 	mul.w	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e00d      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000354:	3301      	adds	r3, #1
 8000356:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	e001      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 8000366:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	3301      	adds	r3, #1
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	fbb2 f3f3 	udiv	r3, r2, r3
 8000376:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	3301      	adds	r3, #1
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	fbb2 f3f3 	udiv	r3, r2, r3
 8000388:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <SystemCoreClockUpdate+0xd0>)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	50004600 	.word	0x50004600
 800039c:	50004710 	.word	0x50004710
 80003a0:	016e3600 	.word	0x016e3600
 80003a4:	2000ffc0 	.word	0x2000ffc0

080003a8 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 80003b0:	f7ff ff90 	bl	80002d4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 80003b4:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <XMC_SCU_lDelay+0x3c>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a0b      	ldr	r2, [pc, #44]	; (80003e8 <XMC_SCU_lDelay+0x40>)
 80003ba:	fba2 2303 	umull	r2, r3, r2, r3
 80003be:	0c9a      	lsrs	r2, r3, #18
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	fb02 f303 	mul.w	r3, r2, r3
 80003c6:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]
 80003cc:	e003      	b.n	80003d6 <XMC_SCU_lDelay+0x2e>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80003ce:	bf00      	nop
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	3301      	adds	r3, #1
 80003d4:	60fb      	str	r3, [r7, #12]
 80003d6:	68fa      	ldr	r2, [r7, #12]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	429a      	cmp	r2, r3
 80003dc:	d3f7      	bcc.n	80003ce <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 80003de:	3710      	adds	r7, #16
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	2000ffc0 	.word	0x2000ffc0
 80003e8:	431bde83 	.word	0x431bde83

080003ec <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 80003ec:	b5b0      	push	{r4, r5, r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af02      	add	r7, sp, #8
 80003f2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f885 	bl	8000504 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 80003fa:	f000 fa07 	bl	800080c <XMC_SCU_HIB_EnableHibernateDomain>
  if (config->enable_osculp == true)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	79db      	ldrb	r3, [r3, #7]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d00a      	beq.n	800041c <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8000406:	f000 fa3f 	bl	8000888 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while(XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 800040a:	bf00      	nop
 800040c:	f000 fa2a 	bl	8000864 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8000410:	4603      	mov	r3, r0
 8000412:	f083 0301 	eor.w	r3, r3, #1
 8000416:	b2db      	uxtb	r3, r3
 8000418:	2b00      	cmp	r3, #0
 800041a:	d1f7      	bne.n	800040c <XMC_SCU_CLOCK_Init+0x20>
  }
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	7a5b      	ldrb	r3, [r3, #9]
 8000420:	4618      	mov	r0, r3
 8000422:	f000 f8e9 	bl	80005f8 <XMC_SCU_HIB_SetStandbyClockSource>

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	7a1b      	ldrb	r3, [r3, #8]
 800042a:	4618      	mov	r0, r3
 800042c:	f000 f9c8 	bl	80007c0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	7c1b      	ldrb	r3, [r3, #16]
 8000434:	4618      	mov	r0, r3
 8000436:	f000 f8fd 	bl	8000634 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	7c5b      	ldrb	r3, [r3, #17]
 800043e:	4618      	mov	r0, r3
 8000440:	f000 f920 	bl	8000684 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	7c9b      	ldrb	r3, [r3, #18]
 8000448:	4618      	mov	r0, r3
 800044a:	f000 f907 	bl	800065c <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	7cdb      	ldrb	r3, [r3, #19]
 8000452:	4618      	mov	r0, r3
 8000454:	f000 f92a 	bl	80006ac <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	799b      	ldrb	r3, [r3, #6]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d00a      	beq.n	8000476 <XMC_SCU_CLOCK_Init+0x8a>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8000460:	f000 fa44 	bl	80008ec <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000464:	bf00      	nop
 8000466:	f000 fa69 	bl	800093c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 800046a:	4603      	mov	r3, r0
 800046c:	f083 0301 	eor.w	r3, r3, #1
 8000470:	b2db      	uxtb	r3, r3
 8000472:	2b00      	cmp	r3, #0
 8000474:	d1f7      	bne.n	8000466 <XMC_SCU_CLOCK_Init+0x7a>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	78db      	ldrb	r3, [r3, #3]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d102      	bne.n	8000484 <XMC_SCU_CLOCK_Init+0x98>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 800047e:	f000 fa81 	bl	8000984 <XMC_SCU_CLOCK_DisableSystemPll>
 8000482:	e014      	b.n	80004ae <XMC_SCU_CLOCK_Init+0xc2>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000484:	f000 fa6e 	bl	8000964 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	8899      	ldrh	r1, [r3, #4]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000494:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800049a:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	4608      	mov	r0, r1
 80004a4:	4611      	mov	r1, r2
 80004a6:	462a      	mov	r2, r5
 80004a8:	4623      	mov	r3, r4
 80004aa:	f000 fa7b 	bl	80009a4 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	68db      	ldr	r3, [r3, #12]
 80004b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004b6:	d103      	bne.n	80004c0 <XMC_SCU_CLOCK_Init+0xd4>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 80004b8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80004bc:	f000 f822 	bl	8000504 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 80004c0:	f7ff ff08 	bl	80002d4 <SystemCoreClockUpdate>
}
 80004c4:	3708      	adds	r7, #8
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bdb0      	pop	{r4, r5, r7, pc}
 80004ca:	bf00      	nop

080004cc <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	0f1b      	lsrs	r3, r3, #28
 80004d8:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80004e0:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80004e2:	68fa      	ldr	r2, [r7, #12]
 80004e4:	4613      	mov	r3, r2
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	4413      	add	r3, r2
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	461a      	mov	r2, r3
 80004ee:	4b04      	ldr	r3, [pc, #16]	; (8000500 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 80004f0:	4413      	add	r3, r2
 80004f2:	68ba      	ldr	r2, [r7, #8]
 80004f4:	601a      	str	r2, [r3, #0]
}
 80004f6:	3714      	adds	r7, #20
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	50004414 	.word	0x50004414

08000504 <XMC_SCU_CLOCK_SetSystemClockSource>:
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 800050c:	4906      	ldr	r1, [pc, #24]	; (8000528 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000510:	68db      	ldr	r3, [r3, #12]
 8000512:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4313      	orrs	r3, r2
 800051a:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	50004600 	.word	0x50004600

0800052c <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8000534:	4906      	ldr	r1, [pc, #24]	; (8000550 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4313      	orrs	r3, r2
 8000542:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	50004600 	.word	0x50004600

08000554 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 800055c:	4906      	ldr	r1, [pc, #24]	; (8000578 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000562:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4313      	orrs	r3, r2
 800056a:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	50004600 	.word	0x50004600

0800057c <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8000586:	88fb      	ldrh	r3, [r7, #6]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d108      	bne.n	800059e <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800058c:	4a0a      	ldr	r2, [pc, #40]	; (80005b8 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800058e:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000590:	68db      	ldr	r3, [r3, #12]
 8000592:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000596:	f023 0301 	bic.w	r3, r3, #1
 800059a:	60d3      	str	r3, [r2, #12]
 800059c:	e007      	b.n	80005ae <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800059e:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	60d3      	str	r3, [r2, #12]
  }
}
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	50004710 	.word	0x50004710

080005bc <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80005c6:	bf00      	nop
 80005c8:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 80005ca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80005ce:	f003 0308 	and.w	r3, r3, #8
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d1f8      	bne.n	80005c8 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80005d6:	4907      	ldr	r1, [pc, #28]	; (80005f4 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80005e0:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80005e2:	4313      	orrs	r3, r2
 80005e4:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	50004000 	.word	0x50004000
 80005f4:	50004300 	.word	0x50004300

080005f8 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000602:	bf00      	nop
 8000604:	4b09      	ldr	r3, [pc, #36]	; (800062c <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 8000606:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800060a:	f003 0308 	and.w	r3, r3, #8
 800060e:	2b00      	cmp	r3, #0
 8000610:	d1f8      	bne.n	8000604 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000612:	4907      	ldr	r1, [pc, #28]	; (8000630 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 800061c:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 800061e:	4313      	orrs	r3, r2
 8000620:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	50004000 	.word	0x50004000
 8000630:	50004300 	.word	0x50004300

08000634 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800063c:	4906      	ldr	r1, [pc, #24]	; (8000658 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000640:	68db      	ldr	r3, [r3, #12]
 8000642:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800064a:	4313      	orrs	r3, r2
 800064c:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	50004600 	.word	0x50004600

0800065c <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000664:	4906      	ldr	r1, [pc, #24]	; (8000680 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000668:	6a1b      	ldr	r3, [r3, #32]
 800066a:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000672:	4313      	orrs	r3, r2
 8000674:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	50004600 	.word	0x50004600

08000684 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800068c:	4906      	ldr	r1, [pc, #24]	; (80006a8 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000690:	691b      	ldr	r3, [r3, #16]
 8000692:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800069a:	4313      	orrs	r3, r2
 800069c:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	50004600 	.word	0x50004600

080006ac <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80006b4:	4906      	ldr	r1, [pc, #24]	; (80006d0 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80006c2:	4313      	orrs	r3, r2
 80006c4:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	50004600 	.word	0x50004600

080006d4 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80006dc:	4906      	ldr	r1, [pc, #24]	; (80006f8 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80006ea:	4313      	orrs	r3, r2
 80006ec:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	50004600 	.word	0x50004600

080006fc <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000704:	4906      	ldr	r1, [pc, #24]	; (8000720 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000712:	4313      	orrs	r3, r2
 8000714:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	50004600 	.word	0x50004600

08000724 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800072c:	4906      	ldr	r1, [pc, #24]	; (8000748 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000732:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800073a:	4313      	orrs	r3, r2
 800073c:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	50004600 	.word	0x50004600

0800074c <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000756:	4a19      	ldr	r2, [pc, #100]	; (80007bc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000758:	4b18      	ldr	r3, [pc, #96]	; (80007bc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800075a:	695b      	ldr	r3, [r3, #20]
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000762:	4a16      	ldr	r2, [pc, #88]	; (80007bc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000764:	4b15      	ldr	r3, [pc, #84]	; (80007bc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000766:	695b      	ldr	r3, [r3, #20]
 8000768:	f043 0310 	orr.w	r3, r3, #16
 800076c:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 800076e:	4913      	ldr	r1, [pc, #76]	; (80007bc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	3b01      	subs	r3, #1
 8000774:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	3b01      	subs	r3, #1
 800077a:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 800077c:	4313      	orrs	r3, r2
 800077e:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000780:	4a0e      	ldr	r2, [pc, #56]	; (80007bc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800078a:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 800078c:	4a0b      	ldr	r2, [pc, #44]	; (80007bc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	f023 0310 	bic.w	r3, r3, #16
 8000796:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000798:	4a08      	ldr	r2, [pc, #32]	; (80007bc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007a2:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80007a4:	bf00      	nop
 80007a6:	4b05      	ldr	r3, [pc, #20]	; (80007bc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80007a8:	691b      	ldr	r3, [r3, #16]
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d0f9      	beq.n	80007a6 <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	50004710 	.word	0x50004710

080007c0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80007ca:	4a0f      	ldr	r2, [pc, #60]	; (8000808 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80007cc:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80007d4:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d10e      	bne.n	80007fa <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 80007dc:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80007e6:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 80007e8:	2064      	movs	r0, #100	; 0x64
 80007ea:	f7ff fddd 	bl	80003a8 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 80007ee:	4a06      	ldr	r2, [pc, #24]	; (8000808 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007f8:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 80007fa:	2064      	movs	r0, #100	; 0x64
 80007fc:	f7ff fdd4 	bl	80003a8 <XMC_SCU_lDelay>
}
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	50004710 	.word	0x50004710

0800080c <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f003 0301 	and.w	r3, r3, #1
 8000818:	2b00      	cmp	r3, #0
 800081a:	d109      	bne.n	8000830 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 800081e:	2201      	movs	r2, #1
 8000820:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000822:	bf00      	nop
 8000824:	4b0d      	ldr	r3, [pc, #52]	; (800085c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f003 0301 	and.w	r3, r3, #1
 800082c:	2b00      	cmp	r3, #0
 800082e:	d0f9      	beq.n	8000824 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000830:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000838:	2b00      	cmp	r3, #0
 800083a:	d00a      	beq.n	8000852 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 800083e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000842:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000844:	bf00      	nop
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800084e:	2b00      	cmp	r3, #0
 8000850:	d1f9      	bne.n	8000846 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	50004200 	.word	0x50004200
 8000860:	50004400 	.word	0x50004400

08000864 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f003 0308 	and.w	r3, r3, #8
 8000870:	2b00      	cmp	r3, #0
 8000872:	bf0c      	ite	eq
 8000874:	2301      	moveq	r3, #1
 8000876:	2300      	movne	r3, #0
 8000878:	b2db      	uxtb	r3, r3
}
 800087a:	4618      	mov	r0, r3
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	50004300 	.word	0x50004300

08000888 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 800088c:	bf00      	nop
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>)
 8000890:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000898:	2b00      	cmp	r3, #0
 800089a:	d1f8      	bne.n	800088e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until the update of OSCULCTRL register in hibernate domain is completed */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 800089c:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80008a6:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80008a8:	bf00      	nop
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>)
 80008ac:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80008b0:	f003 0308 	and.w	r3, r3, #8
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d1f8      	bne.n	80008aa <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 80008b8:	4a0b      	ldr	r2, [pc, #44]	; (80008e8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 80008bc:	68db      	ldr	r3, [r3, #12]
 80008be:	f043 0308 	orr.w	r3, r3, #8
 80008c2:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 80008c4:	bf00      	nop
 80008c6:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>)
 80008c8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80008cc:	f003 0304 	and.w	r3, r3, #4
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d1f8      	bne.n	80008c6 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 80008d4:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 80008d6:	2208      	movs	r2, #8
 80008d8:	609a      	str	r2, [r3, #8]
}
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	50004000 	.word	0x50004000
 80008e8:	50004300 	.word	0x50004300

080008ec <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 80008ec:	b5b0      	push	{r4, r5, r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 80008f0:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008fa:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80008fc:	4d0d      	ldr	r5, [pc, #52]	; (8000934 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 80008fe:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000906:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 800090a:	f001 f813 	bl	8001934 <OSCHP_GetFrequency>
 800090e:	4602      	mov	r2, r0
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000912:	fba3 2302 	umull	r2, r3, r3, r2
 8000916:	0d1b      	lsrs	r3, r3, #20
 8000918:	3b01      	subs	r3, #1
 800091a:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 800091c:	4323      	orrs	r3, r4
 800091e:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000920:	4a03      	ldr	r2, [pc, #12]	; (8000930 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000922:	4b03      	ldr	r3, [pc, #12]	; (8000930 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800092a:	6053      	str	r3, [r2, #4]
}
 800092c:	bdb0      	pop	{r4, r5, r7, pc}
 800092e:	bf00      	nop
 8000930:	50004710 	.word	0x50004710
 8000934:	50004700 	.word	0x50004700
 8000938:	6b5fca6b 	.word	0x6b5fca6b

0800093c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000948:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 800094c:	bf0c      	ite	eq
 800094e:	2301      	moveq	r3, #1
 8000950:	2300      	movne	r3, #0
 8000952:	b2db      	uxtb	r3, r3
}
 8000954:	4618      	mov	r0, r3
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	50004710 	.word	0x50004710

08000964 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000968:	4a05      	ldr	r2, [pc, #20]	; (8000980 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000972:	f023 0302 	bic.w	r3, r3, #2
 8000976:	6053      	str	r3, [r2, #4]
}
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	50004710 	.word	0x50004710

08000984 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000988:	4a05      	ldr	r2, [pc, #20]	; (80009a0 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 800098a:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000992:	f043 0302 	orr.w	r3, r3, #2
 8000996:	6053      	str	r3, [r2, #4]
}
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	50004710 	.word	0x50004710

080009a4 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60ba      	str	r2, [r7, #8]
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	4603      	mov	r3, r0
 80009b0:	81fb      	strh	r3, [r7, #14]
 80009b2:	460b      	mov	r3, r1
 80009b4:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 80009b6:	89fb      	ldrh	r3, [r7, #14]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fddf 	bl	800057c <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 80009be:	7b7b      	ldrb	r3, [r7, #13]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	f040 8084 	bne.w	8000ace <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 80009c6:	89fb      	ldrh	r3, [r7, #14]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d109      	bne.n	80009e0 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 80009cc:	f000 ffb2 	bl	8001934 <OSCHP_GetFrequency>
 80009d0:	4602      	mov	r2, r0
 80009d2:	4b4b      	ldr	r3, [pc, #300]	; (8000b00 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 80009d4:	fba3 2302 	umull	r2, r3, r3, r2
 80009d8:	0c9b      	lsrs	r3, r3, #18
 80009da:	059b      	lsls	r3, r3, #22
 80009dc:	617b      	str	r3, [r7, #20]
 80009de:	e002      	b.n	80009e6 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 80009e0:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80009e4:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	fb02 f203 	mul.w	r2, r2, r3
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f4:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	4a42      	ldr	r2, [pc, #264]	; (8000b04 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 80009fa:	fba2 2303 	umull	r2, r3, r2, r3
 80009fe:	091b      	lsrs	r3, r3, #4
 8000a00:	0d9b      	lsrs	r3, r3, #22
 8000a02:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000a04:	4a40      	ldr	r2, [pc, #256]	; (8000b08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000a06:	4b40      	ldr	r3, [pc, #256]	; (8000b08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000a10:	4a3d      	ldr	r2, [pc, #244]	; (8000b08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000a12:	4b3d      	ldr	r3, [pc, #244]	; (8000b08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	f043 0310 	orr.w	r3, r3, #16
 8000a1a:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000a1c:	493a      	ldr	r1, [pc, #232]	; (8000b08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000a1e:	4b3a      	ldr	r3, [pc, #232]	; (8000b08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000a20:	689a      	ldr	r2, [r3, #8]
 8000a22:	4b3a      	ldr	r3, [pc, #232]	; (8000b0c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8000a24:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	3a01      	subs	r2, #1
 8000a2a:	0212      	lsls	r2, r2, #8
 8000a2c:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	3b01      	subs	r3, #1
 8000a32:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000a34:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000a40:	4a31      	ldr	r2, [pc, #196]	; (8000b08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000a42:	4b31      	ldr	r3, [pc, #196]	; (8000b08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a4a:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000a4c:	4a2e      	ldr	r2, [pc, #184]	; (8000b08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000a4e:	4b2e      	ldr	r3, [pc, #184]	; (8000b08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f023 0310 	bic.w	r3, r3, #16
 8000a56:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000a58:	4a2b      	ldr	r2, [pc, #172]	; (8000b08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000a5a:	4b2b      	ldr	r3, [pc, #172]	; (8000b08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a62:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000a64:	bf00      	nop
 8000a66:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f003 0304 	and.w	r3, r3, #4
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d0f9      	beq.n	8000a66 <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000a72:	4a25      	ldr	r2, [pc, #148]	; (8000b08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000a74:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f023 0301 	bic.w	r3, r3, #1
 8000a7c:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000a7e:	bf00      	nop
 8000a80:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d1f9      	bne.n	8000a80 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	4a20      	ldr	r2, [pc, #128]	; (8000b10 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8000a90:	fba2 2303 	umull	r2, r3, r2, r3
 8000a94:	095b      	lsrs	r3, r3, #5
 8000a96:	0d9b      	lsrs	r3, r3, #22
 8000a98:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000a9a:	6a3a      	ldr	r2, [r7, #32]
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d202      	bcs.n	8000aa8 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000aa2:	6938      	ldr	r0, [r7, #16]
 8000aa4:	f000 f838 	bl	8000b18 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	085b      	lsrs	r3, r3, #1
 8000aac:	4a19      	ldr	r2, [pc, #100]	; (8000b14 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8000aae:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab2:	095b      	lsrs	r3, r3, #5
 8000ab4:	0d9b      	lsrs	r3, r3, #22
 8000ab6:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000ab8:	6a3a      	ldr	r2, [r7, #32]
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d202      	bcs.n	8000ac6 <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000ac0:	6938      	ldr	r0, [r7, #16]
 8000ac2:	f000 f829 	bl	8000b18 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000ac6:	6a38      	ldr	r0, [r7, #32]
 8000ac8:	f000 f826 	bl	8000b18 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000acc:	e015      	b.n	8000afa <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000ace:	490e      	ldr	r1, [pc, #56]	; (8000b08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ad0:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000ad8:	6a3b      	ldr	r3, [r7, #32]
 8000ada:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000adc:	4313      	orrs	r3, r2
 8000ade:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000ae0:	4a09      	ldr	r2, [pc, #36]	; (8000b08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000aec:	bf00      	nop
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d0f9      	beq.n	8000aee <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	431bde83 	.word	0x431bde83
 8000b04:	aaaaaaab 	.word	0xaaaaaaab
 8000b08:	50004710 	.word	0x50004710
 8000b0c:	f08080ff 	.word	0xf08080ff
 8000b10:	88888889 	.word	0x88888889
 8000b14:	b60b60b7 	.word	0xb60b60b7

08000b18 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000b20:	4907      	ldr	r1, [pc, #28]	; (8000b40 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000b22:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000b30:	4313      	orrs	r3, r2
 8000b32:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8000b34:	2032      	movs	r0, #50	; 0x32
 8000b36:	f7ff fc37 	bl	80003a8 <XMC_SCU_lDelay>
}
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	50004710 	.word	0x50004710

08000b44 <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
                                                           const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8000b4e:	783b      	ldrb	r3, [r7, #0]
 8000b50:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	461a      	mov	r2, r3
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 8000b58:	78bb      	ldrb	r3, [r7, #2]
 8000b5a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8000b62:	4313      	orrs	r3, r2
 8000b64:	60fb      	str	r3, [r7, #12]
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	68fa      	ldr	r2, [r7, #12]
 8000b6a:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8000b6e:	78fb      	ldrb	r3, [r7, #3]
 8000b70:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
 8000b78:	78fb      	ldrb	r3, [r7, #3]
 8000b7a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8000b82:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 8000b84:	78fb      	ldrb	r3, [r7, #3]
 8000b86:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000bbe:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000be2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f7ff fc65 	bl	80004cc <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  uint32_t reg;
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 8000c0e:	f7ff fff3 	bl	8000bf8 <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	695a      	ldr	r2, [r3, #20]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	689a      	ldr	r2, [r3, #8]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	68da      	ldr	r2, [r3, #12]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	691a      	ldr	r2, [r3, #16]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop

08000c58 <XMC_VADC_GLOBAL_InputClassInit>:

/* API to Set the Global IClass registers*/
void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	4613      	mov	r3, r2
 8000c66:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_CONV_EMUX))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLASS_SET))

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d109      	bne.n	8000c82 <XMC_VADC_GLOBAL_InputClassInit+0x2a>
  {
#endif
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	f240 731f 	movw	r3, #1823	; 0x71f
 8000c74:	4013      	ands	r3, r2
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	6839      	ldr	r1, [r7, #0]
 8000c7a:	3128      	adds	r1, #40	; 0x28
 8000c7c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8000c80:	e007      	b.n	8000c92 <XMC_VADC_GLOBAL_InputClassInit+0x3a>
                                      (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk);
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  }
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <XMC_VADC_GLOBAL_InputClassInit+0x44>)
 8000c86:	4013      	ands	r3, r2
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	6839      	ldr	r1, [r7, #0]
 8000c8c:	3128      	adds	r1, #40	; 0x28
 8000c8e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
#endif
}
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	071f0000 	.word	0x071f0000

08000ca0 <XMC_VADC_GLOBAL_StartupCalibration>:

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000cae:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8000cb8:	2300      	movs	r3, #0
 8000cba:	73fb      	strb	r3, [r7, #15]
 8000cbc:	e016      	b.n	8000cec <XMC_VADC_GLOBAL_StartupCalibration+0x4c>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	4a0e      	ldr	r2, [pc, #56]	; (8000cfc <XMC_VADC_GLOBAL_StartupCalibration+0x5c>)
 8000cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc6:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000cce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d007      	beq.n	8000ce6 <XMC_VADC_GLOBAL_StartupCalibration+0x46>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 8000cd6:	bf00      	nop
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d1f8      	bne.n	8000cd8 <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	73fb      	strb	r3, [r7, #15]
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	2b03      	cmp	r3, #3
 8000cf0:	d9e5      	bls.n	8000cbe <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    /* NOP */
  }
#endif
}
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	08001de0 	.word	0x08001de0

08000d00 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>:
  global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
}

/* API to bind request source event with a service request line */
void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	70fb      	strb	r3, [r7, #3]
  uint32_t node;
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
 8000d0c:	78fb      	ldrb	r3, [r7, #3]
 8000d0e:	2b03      	cmp	r3, #3
 8000d10:	d903      	bls.n	8000d1a <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1a>
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 8000d12:	78fb      	ldrb	r3, [r7, #3]
 8000d14:	3b04      	subs	r3, #4
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	e001      	b.n	8000d1e <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1e>
  }
  else
  {
    node = (uint32_t)sr;
 8000d1a:	78fb      	ldrb	r3, [r7, #3]
 8000d1c:	60fb      	str	r3, [r7, #12]
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d24:	f023 020f 	bic.w	r2, r3, #15
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	431a      	orrs	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <XMC_VADC_GROUP_Init>:

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	6859      	ldr	r1, [r3, #4]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f000 f828 	bl	8000db0 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	6859      	ldr	r1, [r3, #4]
 8000d66:	2201      	movs	r2, #1
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f000 f821 	bl	8000db0 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	6899      	ldr	r1, [r3, #8]
 8000d74:	2200      	movs	r2, #0
 8000d76:	2301      	movs	r3, #1
 8000d78:	f000 f81a 	bl	8000db0 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	6899      	ldr	r1, [r3, #8]
 8000d82:	2201      	movs	r2, #1
 8000d84:	2301      	movs	r3, #1
 8000d86:	f000 f813 	bl	8000db0 <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	691a      	ldr	r2, [r3, #16]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	68da      	ldr	r2, [r3, #12]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	6819      	ldr	r1, [r3, #0]
 8000da4:	f7ff fece 	bl	8000b44 <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop

08000db0 <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b08d      	sub	sp, #52	; 0x34
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	71fb      	strb	r3, [r7, #7]

  /* 
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d113      	bne.n	8000dee <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 8000dc6:	2308      	movs	r3, #8
 8000dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 8000dca:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 8000dd4:	231f      	movs	r3, #31
 8000dd6:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 8000dd8:	7a3b      	ldrb	r3, [r7, #8]
 8000dda:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 8000de2:	7a7b      	ldrb	r3, [r7, #9]
 8000de4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	76fb      	strb	r3, [r7, #27]
 8000dec:	e013      	b.n	8000e16 <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 8000dee:	2318      	movs	r3, #24
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 8000df2:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 8000df8:	2310      	movs	r3, #16
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 8000dfc:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 8000e00:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 8000e02:	7abb      	ldrb	r3, [r7, #10]
 8000e04:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 8000e0c:	7afb      	ldrb	r3, [r7, #11]
 8000e0e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	683a      	ldr	r2, [r7, #0]
 8000e1a:	3228      	adds	r2, #40	; 0x28
 8000e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e20:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	43db      	mvns	r3, r3
 8000e26:	697a      	ldr	r2, [r7, #20]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 8000e2c:	7efa      	ldrb	r2, [r7, #27]
 8000e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	697a      	ldr	r2, [r7, #20]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 8000e3a:	6a3b      	ldr	r3, [r7, #32]
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	697a      	ldr	r2, [r7, #20]
 8000e40:	4013      	ands	r3, r2
 8000e42:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 8000e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e46:	69fa      	ldr	r2, [r7, #28]
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	697a      	ldr	r2, [r7, #20]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	683a      	ldr	r2, [r7, #0]
 8000e56:	3228      	adds	r2, #40	; 0x28
 8000e58:	6979      	ldr	r1, [r7, #20]
 8000e5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000e5e:	3734      	adds	r7, #52	; 0x34
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e7a:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f023 0303 	bic.w	r3, r3, #3
 8000e82:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 8000e84:	78fb      	ldrb	r3, [r7, #3]
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <XMC_VADC_GLOBAL_BackgroundInit>:
}
#endif

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	75fb      	strb	r3, [r7, #23]
 8000eae:	e009      	b.n	8000ec4 <XMC_VADC_GLOBAL_BackgroundInit+0x24>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 8000eb0:	7dfb      	ldrb	r3, [r7, #23]
 8000eb2:	4a39      	ldr	r2, [pc, #228]	; (8000f98 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8000eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fe8b 	bl	8000bd4 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8000ebe:	7dfb      	ldrb	r3, [r7, #23]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	75fb      	strb	r3, [r7, #23]
 8000ec4:	7dfb      	ldrb	r3, [r7, #23]
 8000ec6:	2b03      	cmp	r3, #3
 8000ec8:	d9f2      	bls.n	8000eb0 <XMC_VADC_GLOBAL_BackgroundInit+0x10>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  
  conv_start_mask = (uint32_t) 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d002      	beq.n	8000ee2 <XMC_VADC_GLOBAL_BackgroundInit+0x42>
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 8000edc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ee0:	613b      	str	r3, [r7, #16]
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	75fb      	strb	r3, [r7, #23]
 8000ee6:	e021      	b.n	8000f2c <XMC_VADC_GLOBAL_BackgroundInit+0x8c>
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
 8000ee8:	7dfb      	ldrb	r3, [r7, #23]
 8000eea:	4a2b      	ldr	r2, [pc, #172]	; (8000f98 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8000eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000ef4:	60fb      	str	r3, [r7, #12]

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000efc:	60fb      	str	r3, [r7, #12]

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	021b      	lsls	r3, r3, #8
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	60fb      	str	r3, [r7, #12]
  
    /* Program the start mode */
    reg |= conv_start_mask;
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	60fb      	str	r3, [r7, #12]

    g_xmc_vadc_group_array[i]->ARBPR = reg;
 8000f18:	7dfb      	ldrb	r3, [r7, #23]
 8000f1a:	4a1f      	ldr	r2, [pc, #124]	; (8000f98 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8000f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f20:	68fa      	ldr	r2, [r7, #12]
 8000f22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8000f26:	7dfb      	ldrb	r3, [r7, #23]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	75fb      	strb	r3, [r7, #23]
 8000f2c:	7dfb      	ldrb	r3, [r7, #23]
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d9da      	bls.n	8000ee8 <XMC_VADC_GLOBAL_BackgroundInit+0x48>
  
  }
  #endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	f043 0201 	orr.w	r2, r3, #1
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	f003 0303 	and.w	r3, r3, #3
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d107      	bne.n	8000f70 <XMC_VADC_GLOBAL_BackgroundInit+0xd0>
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000f66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	75fb      	strb	r3, [r7, #23]
 8000f74:	e009      	b.n	8000f8a <XMC_VADC_GLOBAL_BackgroundInit+0xea>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 8000f76:	7dfb      	ldrb	r3, [r7, #23]
 8000f78:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8000f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fe16 	bl	8000bb0 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8000f84:	7dfb      	ldrb	r3, [r7, #23]
 8000f86:	3301      	adds	r3, #1
 8000f88:	75fb      	strb	r3, [r7, #23]
 8000f8a:	7dfb      	ldrb	r3, [r7, #23]
 8000f8c:	2b03      	cmp	r3, #3
 8000f8e:	d9f2      	bls.n	8000f76 <XMC_VADC_GLOBAL_BackgroundInit+0xd6>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  #endif
  
}
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	08001de0 	.word	0x08001de0

08000f9c <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	; 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	7a1b      	ldrb	r3, [r3, #8]
 8000fac:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb4:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	697a      	ldr	r2, [r7, #20]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	7a5b      	ldrb	r3, [r3, #9]
 8000fe0:	b25b      	sxtb	r3, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	db29      	blt.n	800103a <XMC_VADC_GROUP_ChannelInit+0x9e>
  {
    mask = (uint32_t)0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d10a      	bne.n	8001006 <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000ffa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001004:	e00c      	b.n	8001020 <XMC_VADC_GROUP_ChannelInit+0x84>
    }
    else if ((uint32_t)0 == ch_num)
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d109      	bne.n	8001020 <XMC_VADC_GROUP_ChannelInit+0x84>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 800100c:	2300      	movs	r3, #0
 800100e:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001016:	f023 021f 	bic.w	r2, r3, #31
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	7a52      	ldrb	r2, [r2, #9]
 800102a:	b251      	sxtb	r1, r2
 800102c:	69fa      	ldr	r2, [r7, #28]
 800102e:	fa01 f202 	lsl.w	r2, r1, r2
 8001032:	431a      	orrs	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	431a      	orrs	r2, r3
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6819      	ldr	r1, [r3, #0]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	3280      	adds	r2, #128	; 0x80
 8001056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 800105a:	3724      	adds	r7, #36	; 0x24
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <_init>:
  }
}

/* Init */
void _init(void)
{}
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <NVIC_GetPriorityGrouping+0x18>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800107c:	0a1b      	lsrs	r3, r3, #8
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109c:	2b00      	cmp	r3, #0
 800109e:	da0b      	bge.n	80010b8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a0:	490d      	ldr	r1, [pc, #52]	; (80010d8 <NVIC_SetPriority+0x4c>)
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	f003 030f 	and.w	r3, r3, #15
 80010a8:	3b04      	subs	r3, #4
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	0092      	lsls	r2, r2, #2
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	440b      	add	r3, r1
 80010b4:	761a      	strb	r2, [r3, #24]
 80010b6:	e009      	b.n	80010cc <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b8:	4908      	ldr	r1, [pc, #32]	; (80010dc <NVIC_SetPriority+0x50>)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	0092      	lsls	r2, r2, #2
 80010c4:	b2d2      	uxtb	r2, r2
 80010c6:	440b      	add	r3, r1
 80010c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000ed00 	.word	0xe000ed00
 80010dc:	e000e100 	.word	0xe000e100

080010e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b089      	sub	sp, #36	; 0x24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f1c3 0307 	rsb	r3, r3, #7
 80010fa:	2b06      	cmp	r3, #6
 80010fc:	bf28      	it	cs
 80010fe:	2306      	movcs	r3, #6
 8001100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3306      	adds	r3, #6
 8001106:	2b06      	cmp	r3, #6
 8001108:	d902      	bls.n	8001110 <NVIC_EncodePriority+0x30>
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3b01      	subs	r3, #1
 800110e:	e000      	b.n	8001112 <NVIC_EncodePriority+0x32>
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	2201      	movs	r2, #1
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	1e5a      	subs	r2, r3, #1
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	401a      	ands	r2, r3
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	2101      	movs	r1, #1
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	1e59      	subs	r1, r3, #1
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001134:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8001136:	4618      	mov	r0, r3
 8001138:	3724      	adds	r7, #36	; 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop

08001144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001154:	d301      	bcc.n	800115a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001156:	2301      	movs	r3, #1
 8001158:	e00f      	b.n	800117a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115a:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <SysTick_Config+0x40>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001162:	f04f 30ff 	mov.w	r0, #4294967295
 8001166:	213f      	movs	r1, #63	; 0x3f
 8001168:	f7ff ff90 	bl	800108c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <SysTick_Config+0x40>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001172:	4b04      	ldr	r3, [pc, #16]	; (8001184 <SysTick_Config+0x40>)
 8001174:	2207      	movs	r2, #7
 8001176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	e000e010 	.word	0xe000e010

08001188 <SYSTIMER_lInsertTimerList>:
**********************************************************************************************************************/
/*
 * This function is called to insert a timer into the timer list.
 */
static void SYSTIMER_lInsertTimerList(uint32_t tbl_index)
{
 8001188:	b490      	push	{r4, r7}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  int32_t delta_ticks;
  int32_t timer_count;
  bool found_flag = false;
 8001190:	2300      	movs	r3, #0
 8001192:	73fb      	strb	r3, [r7, #15]
   /* Get timer time */
  timer_count = (int32_t)g_timer_tbl[tbl_index].count;
 8001194:	496b      	ldr	r1, [pc, #428]	; (8001344 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	4613      	mov	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	4413      	add	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	3318      	adds	r3, #24
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	60bb      	str	r3, [r7, #8]
  /* Check if Timer list is NULL */
  if (NULL == g_timer_list)
 80011a8:	4b67      	ldr	r3, [pc, #412]	; (8001348 <SYSTIMER_lInsertTimerList+0x1c0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d109      	bne.n	80011c4 <SYSTIMER_lInsertTimerList+0x3c>
  {
    /* Set this as first Timer */
    g_timer_list = &g_timer_tbl[tbl_index];
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	4613      	mov	r3, r2
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	4413      	add	r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4a62      	ldr	r2, [pc, #392]	; (8001344 <SYSTIMER_lInsertTimerList+0x1bc>)
 80011bc:	4413      	add	r3, r2
 80011be:	4a62      	ldr	r2, [pc, #392]	; (8001348 <SYSTIMER_lInsertTimerList+0x1c0>)
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	e0bb      	b.n	800133c <SYSTIMER_lInsertTimerList+0x1b4>
  }
  /* If not, find the correct place, and insert the specified timer */
  else
  {
    object_ptr = g_timer_list;
 80011c4:	4b60      	ldr	r3, [pc, #384]	; (8001348 <SYSTIMER_lInsertTimerList+0x1c0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    delta_ticks = timer_count;
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 80011ce:	e0ab      	b.n	8001328 <SYSTIMER_lInsertTimerList+0x1a0>
    {
      /* Get timer Count Difference */
      delta_ticks -= (int32_t)object_ptr->count;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	461a      	mov	r2, r3
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1a9b      	subs	r3, r3, r2
 80011da:	613b      	str	r3, [r7, #16]
      /* Check for delta ticks < 0 */
      if (delta_ticks <= 0)
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	dc7a      	bgt.n	80012d8 <SYSTIMER_lInsertTimerList+0x150>
      {
        /* Check If head item */
        if (NULL != object_ptr->prev)
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d026      	beq.n	8001238 <SYSTIMER_lInsertTimerList+0xb0>
        {
          /* If Insert to list */
          object_ptr->prev->next = &g_timer_tbl[tbl_index];
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	6859      	ldr	r1, [r3, #4]
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	4613      	mov	r3, r2
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	4413      	add	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4a52      	ldr	r2, [pc, #328]	; (8001344 <SYSTIMER_lInsertTimerList+0x1bc>)
 80011fa:	4413      	add	r3, r2
 80011fc:	600b      	str	r3, [r1, #0]
          g_timer_tbl[tbl_index].prev = object_ptr->prev;
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	6859      	ldr	r1, [r3, #4]
 8001202:	4850      	ldr	r0, [pc, #320]	; (8001344 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	4613      	mov	r3, r2
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	4413      	add	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4403      	add	r3, r0
 8001210:	6059      	str	r1, [r3, #4]
          g_timer_tbl[tbl_index].next = object_ptr;
 8001212:	494c      	ldr	r1, [pc, #304]	; (8001344 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	4413      	add	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	440b      	add	r3, r1
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	601a      	str	r2, [r3, #0]
          object_ptr->prev = &g_timer_tbl[tbl_index];
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	4613      	mov	r3, r2
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	4413      	add	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4a45      	ldr	r2, [pc, #276]	; (8001344 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001230:	441a      	add	r2, r3
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	e01c      	b.n	8001272 <SYSTIMER_lInsertTimerList+0xea>
        }
        else
        {
          /* Set Timer as first item */
          g_timer_tbl[tbl_index].next = g_timer_list;
 8001238:	4b43      	ldr	r3, [pc, #268]	; (8001348 <SYSTIMER_lInsertTimerList+0x1c0>)
 800123a:	6819      	ldr	r1, [r3, #0]
 800123c:	4841      	ldr	r0, [pc, #260]	; (8001344 <SYSTIMER_lInsertTimerList+0x1bc>)
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	4613      	mov	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	4413      	add	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4403      	add	r3, r0
 800124a:	6019      	str	r1, [r3, #0]
          g_timer_list->prev = &g_timer_tbl[tbl_index];
 800124c:	4b3e      	ldr	r3, [pc, #248]	; (8001348 <SYSTIMER_lInsertTimerList+0x1c0>)
 800124e:	6819      	ldr	r1, [r3, #0]
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	4413      	add	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4a3a      	ldr	r2, [pc, #232]	; (8001344 <SYSTIMER_lInsertTimerList+0x1bc>)
 800125c:	4413      	add	r3, r2
 800125e:	604b      	str	r3, [r1, #4]
          g_timer_list = &g_timer_tbl[tbl_index];
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	4613      	mov	r3, r2
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	4413      	add	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4a36      	ldr	r2, [pc, #216]	; (8001344 <SYSTIMER_lInsertTimerList+0x1bc>)
 800126c:	4413      	add	r3, r2
 800126e:	4a36      	ldr	r2, [pc, #216]	; (8001348 <SYSTIMER_lInsertTimerList+0x1c0>)
 8001270:	6013      	str	r3, [r2, #0]
        }
        g_timer_tbl[tbl_index].count = g_timer_tbl[tbl_index].next->count + (uint32_t)delta_ticks;
 8001272:	4934      	ldr	r1, [pc, #208]	; (8001344 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	4613      	mov	r3, r2
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	4413      	add	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	440b      	add	r3, r1
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	699a      	ldr	r2, [r3, #24]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	18d1      	adds	r1, r2, r3
 8001288:	482e      	ldr	r0, [pc, #184]	; (8001344 <SYSTIMER_lInsertTimerList+0x1bc>)
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	4613      	mov	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	4413      	add	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4403      	add	r3, r0
 8001296:	3318      	adds	r3, #24
 8001298:	6019      	str	r1, [r3, #0]
        g_timer_tbl[tbl_index].next->count  -= g_timer_tbl[tbl_index].count;
 800129a:	492a      	ldr	r1, [pc, #168]	; (8001344 <SYSTIMER_lInsertTimerList+0x1bc>)
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	4613      	mov	r3, r2
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	4413      	add	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	440b      	add	r3, r1
 80012a8:	6819      	ldr	r1, [r3, #0]
 80012aa:	4826      	ldr	r0, [pc, #152]	; (8001344 <SYSTIMER_lInsertTimerList+0x1bc>)
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	4613      	mov	r3, r2
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	4413      	add	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4403      	add	r3, r0
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6998      	ldr	r0, [r3, #24]
 80012bc:	4c21      	ldr	r4, [pc, #132]	; (8001344 <SYSTIMER_lInsertTimerList+0x1bc>)
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	4613      	mov	r3, r2
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	4413      	add	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4423      	add	r3, r4
 80012ca:	3318      	adds	r3, #24
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	1ac3      	subs	r3, r0, r3
 80012d0:	618b      	str	r3, [r1, #24]
        found_flag = true;
 80012d2:	2301      	movs	r3, #1
 80012d4:	73fb      	strb	r3, [r7, #15]
 80012d6:	e024      	b.n	8001322 <SYSTIMER_lInsertTimerList+0x19a>
      }
      /* Check for last item in list */
      else
      {
        if ((delta_ticks > 0) && (NULL == object_ptr->next))
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	dd21      	ble.n	8001322 <SYSTIMER_lInsertTimerList+0x19a>
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d11d      	bne.n	8001322 <SYSTIMER_lInsertTimerList+0x19a>
        {
          /* Yes, insert into */
          g_timer_tbl[tbl_index].prev = object_ptr;
 80012e6:	4917      	ldr	r1, [pc, #92]	; (8001344 <SYSTIMER_lInsertTimerList+0x1bc>)
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	4413      	add	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	440b      	add	r3, r1
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	605a      	str	r2, [r3, #4]
          object_ptr->next = &g_timer_tbl[tbl_index];
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	4613      	mov	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	4413      	add	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4a10      	ldr	r2, [pc, #64]	; (8001344 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001304:	441a      	add	r2, r3
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	601a      	str	r2, [r3, #0]
          g_timer_tbl[tbl_index].count = (uint32_t)delta_ticks;
 800130a:	6939      	ldr	r1, [r7, #16]
 800130c:	480d      	ldr	r0, [pc, #52]	; (8001344 <SYSTIMER_lInsertTimerList+0x1bc>)
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	4413      	add	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4403      	add	r3, r0
 800131a:	3318      	adds	r3, #24
 800131c:	6019      	str	r1, [r3, #0]
          found_flag = true;
 800131e:	2301      	movs	r3, #1
 8001320:	73fb      	strb	r3, [r7, #15]
        }
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	617b      	str	r3, [r7, #20]
  {
    object_ptr = g_timer_list;
    /* Get timer tick */
    delta_ticks = timer_count;
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d006      	beq.n	800133c <SYSTIMER_lInsertTimerList+0x1b4>
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	f083 0301 	eor.w	r3, r3, #1
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	f47f af4a 	bne.w	80011d0 <SYSTIMER_lInsertTimerList+0x48>
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
    }
  }
}
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bc90      	pop	{r4, r7}
 8001342:	4770      	bx	lr
 8001344:	200000a4 	.word	0x200000a4
 8001348:	20000088 	.word	0x20000088

0800134c <SYSTIMER_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void SYSTIMER_lRemoveTimerList(uint32_t tbl_index)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = &g_timer_tbl[tbl_index];
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	4413      	add	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4a29      	ldr	r2, [pc, #164]	; (8001404 <SYSTIMER_lRemoveTimerList+0xb8>)
 8001360:	4413      	add	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  if ((NULL == object_ptr->prev) && (NULL == object_ptr->next ))
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d107      	bne.n	800137c <SYSTIMER_lRemoveTimerList+0x30>
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d103      	bne.n	800137c <SYSTIMER_lRemoveTimerList+0x30>
  {
    /* set timer list as NULL */ 
    g_timer_list = NULL;                  
 8001374:	4b24      	ldr	r3, [pc, #144]	; (8001408 <SYSTIMER_lRemoveTimerList+0xbc>)
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	e03d      	b.n	80013f8 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the first item in timer list */
  else if (NULL == object_ptr->prev)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d114      	bne.n	80013ae <SYSTIMER_lRemoveTimerList+0x62>
  {
    /* Remove timer from list, and reset timer list */
    g_timer_list  = object_ptr->next;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a1f      	ldr	r2, [pc, #124]	; (8001408 <SYSTIMER_lRemoveTimerList+0xbc>)
 800138a:	6013      	str	r3, [r2, #0]
    g_timer_list->prev = NULL;
 800138c:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <SYSTIMER_lRemoveTimerList+0xbc>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2200      	movs	r2, #0
 8001392:	605a      	str	r2, [r3, #4]
    g_timer_list->count += object_ptr->count;
 8001394:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <SYSTIMER_lRemoveTimerList+0xbc>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a1b      	ldr	r2, [pc, #108]	; (8001408 <SYSTIMER_lRemoveTimerList+0xbc>)
 800139a:	6812      	ldr	r2, [r2, #0]
 800139c:	6991      	ldr	r1, [r2, #24]
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	6992      	ldr	r2, [r2, #24]
 80013a2:	440a      	add	r2, r1
 80013a4:	619a      	str	r2, [r3, #24]
    object_ptr->next    = NULL;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	e024      	b.n	80013f8 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the last item in timer list */
  else if (NULL == object_ptr->next)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d107      	bne.n	80013c6 <SYSTIMER_lRemoveTimerList+0x7a>
  {
    /* Remove timer from list */
    object_ptr->prev->next = NULL;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2200      	movs	r2, #0
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	e018      	b.n	80013f8 <SYSTIMER_lRemoveTimerList+0xac>
  }
  else                       
  {
    /* Remove timer from list */
    object_ptr->prev->next  =  object_ptr->next;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	6812      	ldr	r2, [r2, #0]
 80013ce:	601a      	str	r2, [r3, #0]
    object_ptr->next->prev  =  object_ptr->prev;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	6852      	ldr	r2, [r2, #4]
 80013d8:	605a      	str	r2, [r3, #4]
    object_ptr->next->count += object_ptr->count;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	6812      	ldr	r2, [r2, #0]
 80013e2:	6991      	ldr	r1, [r2, #24]
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	6992      	ldr	r2, [r2, #24]
 80013e8:	440a      	add	r2, r1
 80013ea:	619a      	str	r2, [r3, #24]
    object_ptr->next = NULL;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2200      	movs	r2, #0
 80013f6:	605a      	str	r2, [r3, #4]
  }
}
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	200000a4 	.word	0x200000a4
 8001408:	20000088 	.word	0x20000088

0800140c <SYSTIMER_lTimerHandler>:

/*
 * Handler function called from SysTick event handler.
 */
static void SYSTIMER_lTimerHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
 8001412:	4b2f      	ldr	r3, [pc, #188]	; (80014d0 <SYSTIMER_lTimerHandler+0xc4>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	607b      	str	r3, [r7, #4]
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8001418:	e050      	b.n	80014bc <SYSTIMER_lTimerHandler+0xb0>
  {
    if (true == object_ptr->delete_swtmr)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d013      	beq.n	800144c <SYSTIMER_lTimerHandler+0x40>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	695b      	ldr	r3, [r3, #20]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff8f 	bl	800134c <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      object_ptr->state = SYSTIMER_STATE_NOT_INITIALIZED;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	735a      	strb	r2, [r3, #13]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << object_ptr->id);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	461a      	mov	r2, r3
 800143a:	2301      	movs	r3, #1
 800143c:	4093      	lsls	r3, r2
 800143e:	43da      	mvns	r2, r3
 8001440:	4b24      	ldr	r3, [pc, #144]	; (80014d4 <SYSTIMER_lTimerHandler+0xc8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4013      	ands	r3, r2
 8001446:	4a23      	ldr	r2, [pc, #140]	; (80014d4 <SYSTIMER_lTimerHandler+0xc8>)
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	e034      	b.n	80014b6 <SYSTIMER_lTimerHandler+0xaa>
    }
    /* Check whether timer is a one shot timer */
    else if (SYSTIMER_MODE_ONE_SHOT == object_ptr->mode)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	7b1b      	ldrb	r3, [r3, #12]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d112      	bne.n	800147a <SYSTIMER_lTimerHandler+0x6e>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	7b5b      	ldrb	r3, [r3, #13]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d12c      	bne.n	80014b6 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff73 	bl	800134c <SYSTIMER_lRemoveTimerList>
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        object_ptr->state = SYSTIMER_STATE_STOPPED;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2202      	movs	r2, #2
 800146a:	735a      	strb	r2, [r3, #13]
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6912      	ldr	r2, [r2, #16]
 8001474:	4610      	mov	r0, r2
 8001476:	4798      	blx	r3
 8001478:	e01d      	b.n	80014b6 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    /* Check whether timer is periodic timer */
    else if (SYSTIMER_MODE_PERIODIC == object_ptr->mode)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7b1b      	ldrb	r3, [r3, #12]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d118      	bne.n	80014b4 <SYSTIMER_lTimerHandler+0xa8>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	7b5b      	ldrb	r3, [r3, #13]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d115      	bne.n	80014b6 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff ff5c 	bl	800134c <SYSTIMER_lRemoveTimerList>
        /* Reset timer tick */
        object_ptr->count = object_ptr->reload;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69da      	ldr	r2, [r3, #28]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	619a      	str	r2, [r3, #24]
        /* Insert timer into timer list */
        SYSTIMER_lInsertTimerList((uint32_t)object_ptr->id);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fe71 	bl	8001188 <SYSTIMER_lInsertTimerList>
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6912      	ldr	r2, [r2, #16]
 80014ae:	4610      	mov	r0, r2
 80014b0:	4798      	blx	r3
 80014b2:	e000      	b.n	80014b6 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    else
    {
      break;
 80014b4:	e009      	b.n	80014ca <SYSTIMER_lTimerHandler+0xbe>
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <SYSTIMER_lTimerHandler+0xc4>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	607b      	str	r3, [r7, #4]
static void SYSTIMER_lTimerHandler(void)
{
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <SYSTIMER_lTimerHandler+0xbe>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0a7      	beq.n	800141a <SYSTIMER_lTimerHandler+0xe>
      break;
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
  }
}
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000088 	.word	0x20000088
 80014d4:	2000008c 	.word	0x2000008c

080014d8 <SysTick_Handler>:

/*
 *  SysTick Event Handler.
 */
void SysTick_Handler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = g_timer_list;
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <SysTick_Handler+0x40>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	607b      	str	r3, [r7, #4]
  g_systick_count++;
 80014e4:	4b0d      	ldr	r3, [pc, #52]	; (800151c <SysTick_Handler+0x44>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	3301      	adds	r3, #1
 80014ea:	4a0c      	ldr	r2, [pc, #48]	; (800151c <SysTick_Handler+0x44>)
 80014ec:	6013      	str	r3, [r2, #0]

  if (NULL != object_ptr)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d00e      	beq.n	8001512 <SysTick_Handler+0x3a>
  {
    if (object_ptr->count > 1UL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d905      	bls.n	8001508 <SysTick_Handler+0x30>
    {
      object_ptr->count--;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	1e5a      	subs	r2, r3, #1
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	619a      	str	r2, [r3, #24]
 8001506:	e004      	b.n	8001512 <SysTick_Handler+0x3a>
    }
    else
    {
      object_ptr->count = 0U;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	619a      	str	r2, [r3, #24]
      SYSTIMER_lTimerHandler();
 800150e:	f7ff ff7d 	bl	800140c <SYSTIMER_lTimerHandler>
    }
  }
}
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000088 	.word	0x20000088
 800151c:	20000090 	.word	0x20000090

08001520 <SYSTIMER_Init>:

/*
 * Initialization function which initializes the SYSTIMER APP, configures SysTick timer and SysTick exception.
 */
SYSTIMER_STATUS_t SYSTIMER_Init(SYSTIMER_t *handle)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status = SYSTIMER_STATUS_SUCCESS;
 8001528:	2300      	movs	r3, #0
 800152a:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_Init: SYSTIMER APP handle pointer uninitialized", (handle != NULL));

  /* Check APP initialization status to ensure whether SYSTIMER_Init called or not, initialize SYSTIMER if
   * SYSTIMER_Init called first time.
   */
  if (false == handle->init_status)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	f083 0301 	eor.w	r3, r3, #1
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d020      	beq.n	800157c <SYSTIMER_Init+0x5c>
  {
    /* Initialize the header of the list */
    g_timer_list = NULL;
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <SYSTIMER_Init+0x68>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
    /* Initialize SysTick timer */
    status = (SYSTIMER_STATUS_t)SysTick_Config((uint32_t)(SYSTIMER_SYSTICK_CLOCK * SYSTIMER_TICK_PERIOD));
 8001540:	4812      	ldr	r0, [pc, #72]	; (800158c <SYSTIMER_Init+0x6c>)
 8001542:	f7ff fdff 	bl	8001144 <SysTick_Config>
 8001546:	4603      	mov	r3, r0
 8001548:	73fb      	strb	r3, [r7, #15]

    if (SYSTIMER_STATUS_FAILURE == status)
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d015      	beq.n	800157c <SYSTIMER_Init+0x5c>
    }
    else
    {
#if (UC_FAMILY == XMC4)
      /* setting of First SW Timer period is always and subpriority value for XMC4000 devices */
      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(
 8001550:	f7ff fd8e 	bl	8001070 <NVIC_GetPriorityGrouping>
 8001554:	4603      	mov	r3, r0
 8001556:	4618      	mov	r0, r3
 8001558:	213f      	movs	r1, #63	; 0x3f
 800155a:	2200      	movs	r2, #0
 800155c:	f7ff fdc0 	bl	80010e0 <NVIC_EncodePriority>
 8001560:	4603      	mov	r3, r0
 8001562:	f04f 30ff 	mov.w	r0, #4294967295
 8001566:	4619      	mov	r1, r3
 8001568:	f7ff fd90 	bl	800108c <NVIC_SetPriority>
      NVIC_GetPriorityGrouping(), SYSTIMER_PRIORITY, SYSTIMER_SUBPRIORITY));
#elif (UC_FAMILY == XMC1)
      /* setting of priority value for XMC1000 devices */
      NVIC_SetPriority(SysTick_IRQn, SYSTIMER_PRIORITY);
#endif      
      g_timer_tracker = 0U;
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <SYSTIMER_Init+0x70>)
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
      /* Update the Initialization status of the SYSTIMER APP instance */
      handle->init_status = true;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	701a      	strb	r2, [r3, #0]
      status = SYSTIMER_STATUS_SUCCESS;
 8001578:	2300      	movs	r3, #0
 800157a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 800157c:	7bfb      	ldrb	r3, [r7, #15]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000088 	.word	0x20000088
 800158c:	0001d4c0 	.word	0x0001d4c0
 8001590:	2000008c 	.word	0x2000008c

08001594 <SYSTIMER_CreateTimer>:
  uint32_t period,
  SYSTIMER_MODE_t mode,
  SYSTIMER_CALLBACK_t callback,
  void  *args
)
{
 8001594:	b480      	push	{r7}
 8001596:	b089      	sub	sp, #36	; 0x24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	607a      	str	r2, [r7, #4]
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	460b      	mov	r3, r1
 80015a2:	72fb      	strb	r3, [r7, #11]
  uint32_t id = 0U;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61fb      	str	r3, [r7, #28]
  uint32_t count = 0U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61bb      	str	r3, [r7, #24]
  uint32_t period_ratio = 0U;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
            ((period >= SYSTIMER_TICK_PERIOD_US) && (period > 0U) && (period <= 0xFFFFFFFFU)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Timer creation failure due to invalid timer mode",
            ((SYSTIMER_MODE_ONE_SHOT == mode) || (SYSTIMER_MODE_PERIODIC == mode)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Can not create software without user callback", (NULL != callback));
  
  if (period < SYSTIMER_TICK_PERIOD_US)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015b6:	d202      	bcs.n	80015be <SYSTIMER_CreateTimer+0x2a>
  {
    id = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
 80015bc:	e07b      	b.n	80016b6 <SYSTIMER_CreateTimer+0x122>
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 80015be:	2300      	movs	r3, #0
 80015c0:	61bb      	str	r3, [r7, #24]
 80015c2:	e075      	b.n	80016b0 <SYSTIMER_CreateTimer+0x11c>
    {
      /* Check for free timer ID */
      if (0U == (g_timer_tracker & (1U << count)))
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	2201      	movs	r2, #1
 80015c8:	409a      	lsls	r2, r3
 80015ca:	4b3e      	ldr	r3, [pc, #248]	; (80016c4 <SYSTIMER_CreateTimer+0x130>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4013      	ands	r3, r2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d16a      	bne.n	80016aa <SYSTIMER_CreateTimer+0x116>
      {
        /* If yes, assign ID to this timer */
        g_timer_tracker |= (1U << count);
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	2201      	movs	r2, #1
 80015d8:	409a      	lsls	r2, r3
 80015da:	4b3a      	ldr	r3, [pc, #232]	; (80016c4 <SYSTIMER_CreateTimer+0x130>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4313      	orrs	r3, r2
 80015e0:	4a38      	ldr	r2, [pc, #224]	; (80016c4 <SYSTIMER_CreateTimer+0x130>)
 80015e2:	6013      	str	r3, [r2, #0]
        /* Initialize the timer as per input values */
        g_timer_tbl[count].id     = count;
 80015e4:	4938      	ldr	r1, [pc, #224]	; (80016c8 <SYSTIMER_CreateTimer+0x134>)
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4613      	mov	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	4413      	add	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	3310      	adds	r3, #16
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].mode   = mode;
 80015f8:	4933      	ldr	r1, [pc, #204]	; (80016c8 <SYSTIMER_CreateTimer+0x134>)
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4613      	mov	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	4413      	add	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	3308      	adds	r3, #8
 8001608:	7afa      	ldrb	r2, [r7, #11]
 800160a:	711a      	strb	r2, [r3, #4]
        g_timer_tbl[count].state  = SYSTIMER_STATE_STOPPED;
 800160c:	492e      	ldr	r1, [pc, #184]	; (80016c8 <SYSTIMER_CreateTimer+0x134>)
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4613      	mov	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	3308      	adds	r3, #8
 800161c:	2202      	movs	r2, #2
 800161e:	715a      	strb	r2, [r3, #5]
        period_ratio = (uint32_t)(period / SYSTIMER_TICK_PERIOD_US);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4a2a      	ldr	r2, [pc, #168]	; (80016cc <SYSTIMER_CreateTimer+0x138>)
 8001624:	fba2 2303 	umull	r2, r3, r2, r3
 8001628:	099b      	lsrs	r3, r3, #6
 800162a:	617b      	str	r3, [r7, #20]
        g_timer_tbl[count].count  = (period_ratio + HW_TIMER_ADDITIONAL_CNT);
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	1c59      	adds	r1, r3, #1
 8001630:	4825      	ldr	r0, [pc, #148]	; (80016c8 <SYSTIMER_CreateTimer+0x134>)
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4613      	mov	r3, r2
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	4413      	add	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4403      	add	r3, r0
 800163e:	3318      	adds	r3, #24
 8001640:	6019      	str	r1, [r3, #0]
        g_timer_tbl[count].reload  = period_ratio;
 8001642:	4921      	ldr	r1, [pc, #132]	; (80016c8 <SYSTIMER_CreateTimer+0x134>)
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4613      	mov	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4413      	add	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	440b      	add	r3, r1
 8001650:	3318      	adds	r3, #24
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].callback = callback;
 8001656:	491c      	ldr	r1, [pc, #112]	; (80016c8 <SYSTIMER_CreateTimer+0x134>)
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4613      	mov	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	4413      	add	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	3308      	adds	r3, #8
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].args = args;
 800166a:	4917      	ldr	r1, [pc, #92]	; (80016c8 <SYSTIMER_CreateTimer+0x134>)
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4613      	mov	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	4413      	add	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	3310      	adds	r3, #16
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].prev   = NULL;
 800167e:	4912      	ldr	r1, [pc, #72]	; (80016c8 <SYSTIMER_CreateTimer+0x134>)
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4613      	mov	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	4413      	add	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	440b      	add	r3, r1
 800168c:	2200      	movs	r2, #0
 800168e:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].next   = NULL;
 8001690:	490d      	ldr	r1, [pc, #52]	; (80016c8 <SYSTIMER_CreateTimer+0x134>)
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4613      	mov	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	4413      	add	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	440b      	add	r3, r1
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
        id = count + 1U;
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	3301      	adds	r3, #1
 80016a6:	61fb      	str	r3, [r7, #28]
        break;
 80016a8:	e005      	b.n	80016b6 <SYSTIMER_CreateTimer+0x122>
  {
    id = 0U;
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	3301      	adds	r3, #1
 80016ae:	61bb      	str	r3, [r7, #24]
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	2b07      	cmp	r3, #7
 80016b4:	d986      	bls.n	80015c4 <SYSTIMER_CreateTimer+0x30>
      }
    }

  }
  
  return (id);
 80016b6:	69fb      	ldr	r3, [r7, #28]
}  
 80016b8:	4618      	mov	r0, r3
 80016ba:	3724      	adds	r7, #36	; 0x24
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	2000008c 	.word	0x2000008c
 80016c8:	200000a4 	.word	0x200000a4
 80016cc:	10624dd3 	.word	0x10624dd3

080016d0 <SYSTIMER_StartTimer>:

/*
 *  API to start the software timer.
 */
SYSTIMER_STATUS_t SYSTIMER_StartTimer(uint32_t id)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status;
  status = SYSTIMER_STATUS_FAILURE;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_StartTimer: Failure in timer restart operation due to invalid timer ID",
            ((id <= SYSTIMER_CFG_MAX_TMR) && (id > 0U)));
  XMC_ASSERT("SYSTIMER_StartTimer: Error during start of software timer", (0U != (g_timer_tracker & (1U << (id - 1U)))));
  
  /* Check if timer is running */
  if (SYSTIMER_STATE_STOPPED == g_timer_tbl[id - 1U].state)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	1e5a      	subs	r2, r3, #1
 80016e0:	491a      	ldr	r1, [pc, #104]	; (800174c <SYSTIMER_StartTimer+0x7c>)
 80016e2:	4613      	mov	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	4413      	add	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	440b      	add	r3, r1
 80016ec:	3308      	adds	r3, #8
 80016ee:	795b      	ldrb	r3, [r3, #5]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d126      	bne.n	8001742 <SYSTIMER_StartTimer+0x72>
  {
    g_timer_tbl[id - 1U].count = (g_timer_tbl[id - 1U].reload + HW_TIMER_ADDITIONAL_CNT);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	1e5a      	subs	r2, r3, #1
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	1e59      	subs	r1, r3, #1
 80016fc:	4813      	ldr	r0, [pc, #76]	; (800174c <SYSTIMER_StartTimer+0x7c>)
 80016fe:	460b      	mov	r3, r1
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	440b      	add	r3, r1
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4403      	add	r3, r0
 8001708:	3318      	adds	r3, #24
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	1c59      	adds	r1, r3, #1
 800170e:	480f      	ldr	r0, [pc, #60]	; (800174c <SYSTIMER_StartTimer+0x7c>)
 8001710:	4613      	mov	r3, r2
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	4413      	add	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4403      	add	r3, r0
 800171a:	3318      	adds	r3, #24
 800171c:	6019      	str	r1, [r3, #0]
    /* set timer status as SYSTIMER_STATE_RUNNING */
    g_timer_tbl[id - 1U].state = SYSTIMER_STATE_RUNNING;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	1e5a      	subs	r2, r3, #1
 8001722:	490a      	ldr	r1, [pc, #40]	; (800174c <SYSTIMER_StartTimer+0x7c>)
 8001724:	4613      	mov	r3, r2
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	4413      	add	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	3308      	adds	r3, #8
 8001730:	2201      	movs	r2, #1
 8001732:	715a      	strb	r2, [r3, #5]
    /* Insert this timer into timer list */
    SYSTIMER_lInsertTimerList((id - 1U));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3b01      	subs	r3, #1
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fd25 	bl	8001188 <SYSTIMER_lInsertTimerList>
    status = SYSTIMER_STATUS_SUCCESS;
 800173e:	2300      	movs	r3, #0
 8001740:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8001742:	7bfb      	ldrb	r3, [r7, #15]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	200000a4 	.word	0x200000a4

08001750 <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	3310      	adds	r3, #16
 8001764:	4619      	mov	r1, r3
 8001766:	2301      	movs	r3, #1
 8001768:	408b      	lsls	r3, r1
 800176a:	431a      	orrs	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	7e1b      	ldrb	r3, [r3, #24]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d149      	bne.n	8001820 <GLOBAL_ADC_Init+0xa4>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	695a      	ldr	r2, [r3, #20]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f7ff fa34 	bl	8000c04 <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	e02f      	b.n	8001802 <GLOBAL_ADC_Init+0x86>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017aa:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	4608      	mov	r0, r1
 80017b8:	4619      	mov	r1, r3
 80017ba:	f7ff fac5 	bl	8000d48 <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	2103      	movs	r1, #3
 80017cc:	f7ff fb4c 	bl	8000e68 <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d8:	7a1b      	ldrb	r3, [r3, #8]
 80017da:	f083 0301 	eor.w	r3, r3, #1
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <GLOBAL_ADC_Init+0x74>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	4618      	mov	r0, r3
 80017ea:	68f9      	ldr	r1, [r7, #12]
 80017ec:	f7ff ffb0 	bl	8001750 <XMC_VADC_GLOBAL_DisablePostCalibration>

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017f8:	2200      	movs	r2, #0
 80017fa:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	3301      	adds	r3, #1
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2b03      	cmp	r3, #3
 8001806:	d9cc      	bls.n	80017a2 <GLOBAL_ADC_Init+0x26>
    }
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetClockDivider(handle_ptr->global_shs_ptr, (uint8_t) GLOBAL_ADC_DIVS_VALUE);
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
    if((bool)true == handle_ptr->enable_startup_calibration)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	7e5b      	ldrb	r3, [r3, #25]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d004      	beq.n	800181a <GLOBAL_ADC_Init+0x9e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fa43 	bl	8000ca0 <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	7e1b      	ldrb	r3, [r3, #24]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <NVIC_SetPriorityGrouping+0x44>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001848:	4013      	ands	r3, r2
 800184a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001854:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800185c:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800185e:	4a04      	ldr	r2, [pc, #16]	; (8001870 <NVIC_SetPriorityGrouping+0x44>)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	60d3      	str	r3, [r2, #12]
}
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 800187a:	2001      	movs	r0, #1
 800187c:	f7ff ffd6 	bl	800182c <NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001880:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8001882:	4b21      	ldr	r3, [pc, #132]	; (8001908 <SystemCoreSetup+0x94>)
 8001884:	4a21      	ldr	r2, [pc, #132]	; (800190c <SystemCoreSetup+0x98>)
 8001886:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001888:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800188c:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 800188e:	4a1e      	ldr	r2, [pc, #120]	; (8001908 <SystemCoreSetup+0x94>)
 8001890:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <SystemCoreSetup+0x94>)
 8001892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001896:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800189a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 800189e:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <SystemCoreSetup+0x9c>)
 80018a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018a4:	3314      	adds	r3, #20
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f023 030f 	bic.w	r3, r3, #15
 80018b0:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f043 0303 	orr.w	r3, r3, #3
 80018b8:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <SystemCoreSetup+0x9c>)
 80018bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c0:	3314      	adds	r3, #20
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 80018c6:	4a10      	ldr	r2, [pc, #64]	; (8001908 <SystemCoreSetup+0x94>)
 80018c8:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <SystemCoreSetup+0x94>)
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	f023 0310 	bic.w	r3, r3, #16
 80018d0:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 80018d2:	4a0d      	ldr	r2, [pc, #52]	; (8001908 <SystemCoreSetup+0x94>)
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <SystemCoreSetup+0x94>)
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f023 0308 	bic.w	r3, r3, #8
 80018dc:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80018de:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <SystemCoreSetup+0x94>)
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <SystemCoreSetup+0x94>)
 80018e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 80018ea:	4a07      	ldr	r2, [pc, #28]	; (8001908 <SystemCoreSetup+0x94>)
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <SystemCoreSetup+0x94>)
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80018f4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 80018f6:	4a04      	ldr	r2, [pc, #16]	; (8001908 <SystemCoreSetup+0x94>)
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <SystemCoreSetup+0x94>)
 80018fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001900:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	e000ed00 	.word	0xe000ed00
 800190c:	08000000 	.word	0x08000000
 8001910:	58001000 	.word	0x58001000

08001914 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 800191c:	2300      	movs	r3, #0
 800191e:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	701a      	strb	r2, [r3, #0]

  return (status);
 8001926:	7bfb      	ldrb	r3, [r7, #15]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8001938:	4b02      	ldr	r3, [pc, #8]	; (8001944 <OSCHP_GetFrequency+0x10>)
}
 800193a:	4618      	mov	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	00b71b00 	.word	0x00b71b00

08001948 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8001948:	b5b0      	push	{r4, r5, r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 800194e:	4b12      	ldr	r3, [pc, #72]	; (8001998 <SystemCoreClockSetup+0x50>)
 8001950:	1d3c      	adds	r4, r7, #4
 8001952:	461d      	mov	r5, r3
 8001954:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001956:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001958:	682b      	ldr	r3, [r5, #0]
 800195a:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fd44 	bl	80003ec <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8001964:	2000      	movs	r0, #0
 8001966:	f7fe fe29 	bl	80005bc <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 800196a:	2000      	movs	r0, #0
 800196c:	f7fe fdde 	bl	800052c <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8001970:	2004      	movs	r0, #4
 8001972:	f7fe feaf 	bl	80006d4 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 8001976:	2001      	movs	r0, #1
 8001978:	2120      	movs	r1, #32
 800197a:	f7fe fee7 	bl	800074c <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 800197e:	2000      	movs	r0, #0
 8001980:	f7fe fde8 	bl	8000554 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8001984:	2001      	movs	r0, #1
 8001986:	f7fe fecd 	bl	8000724 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 800198a:	2001      	movs	r0, #1
 800198c:	f7fe feb6 	bl	80006fc <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bdb0      	pop	{r4, r5, r7, pc}
 8001996:	bf00      	nop
 8001998:	08001e58 	.word	0x08001e58

0800199c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <NVIC_GetPriorityGrouping+0x18>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80019a8:	0a1b      	lsrs	r3, r3, #8
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80019c2:	4908      	ldr	r1, [pc, #32]	; (80019e4 <NVIC_EnableIRQ+0x2c>)
 80019c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c8:	095b      	lsrs	r3, r3, #5
 80019ca:	79fa      	ldrb	r2, [r7, #7]
 80019cc:	f002 021f 	and.w	r2, r2, #31
 80019d0:	2001      	movs	r0, #1
 80019d2:	fa00 f202 	lsl.w	r2, r0, r2
 80019d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000e100 	.word	0xe000e100

080019e8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	6039      	str	r1, [r7, #0]
 80019f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	da0b      	bge.n	8001a14 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fc:	490d      	ldr	r1, [pc, #52]	; (8001a34 <NVIC_SetPriority+0x4c>)
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	f003 030f 	and.w	r3, r3, #15
 8001a04:	3b04      	subs	r3, #4
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	0092      	lsls	r2, r2, #2
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	440b      	add	r3, r1
 8001a10:	761a      	strb	r2, [r3, #24]
 8001a12:	e009      	b.n	8001a28 <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a14:	4908      	ldr	r1, [pc, #32]	; (8001a38 <NVIC_SetPriority+0x50>)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	0092      	lsls	r2, r2, #2
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	440b      	add	r3, r1
 8001a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000ed00 	.word	0xe000ed00
 8001a38:	e000e100 	.word	0xe000e100

08001a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b089      	sub	sp, #36	; 0x24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f1c3 0307 	rsb	r3, r3, #7
 8001a56:	2b06      	cmp	r3, #6
 8001a58:	bf28      	it	cs
 8001a5a:	2306      	movcs	r3, #6
 8001a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3306      	adds	r3, #6
 8001a62:	2b06      	cmp	r3, #6
 8001a64:	d902      	bls.n	8001a6c <NVIC_EncodePriority+0x30>
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <NVIC_EncodePriority+0x32>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	2201      	movs	r2, #1
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	1e5a      	subs	r2, r3, #1
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	401a      	ands	r2, r3
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	2101      	movs	r1, #1
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	1e59      	subs	r1, r3, #1
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001a90:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3724      	adds	r7, #36	; 0x24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop

08001aa0 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001aae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop

08001ac4 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>:
 *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global_ptr,
                                                                    const uint32_t grp_num,
                                                                    const uint32_t ch_num)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	3260      	adds	r2, #96	; 0x60
 8001ad6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2101      	movs	r1, #1
 8001ade:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae2:	ea42 0103 	orr.w	r1, r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	68ba      	ldr	r2, [r7, #8]
 8001aea:	3260      	adds	r2, #96	; 0x60
 8001aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop

08001afc <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
                                               const uint32_t res_reg_num,
                                               const XMC_VADC_RESULT_CONFIG_t *config)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6819      	ldr	r1, [r3, #0]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	32a0      	adds	r2, #160	; 0xa0
 8001b12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <XMC_VADC_GROUP_GetResult>:
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetDetailedResult().
 */
__STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr, 
                                                                const uint32_t res_reg)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	32c0      	adds	r2, #192	; 0xc0
 8001b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b34:	b29b      	uxth	r3, r3
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop

08001b44 <ADC_MEASUREMENT_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
 8001b44:	b590      	push	{r4, r7, lr}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL))

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	7e1b      	ldrb	r3, [r3, #24]
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	f040 8099 	bne.w	8001c88 <ADC_MEASUREMENT_Init+0x144>
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fe0e 	bl	800177c <GLOBAL_ADC_Init>
 8001b60:	4603      	mov	r3, r0
 8001b62:	73bb      	strb	r3, [r7, #14]
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	695a      	ldr	r2, [r3, #20]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	4610      	mov	r0, r2
 8001b70:	6819      	ldr	r1, [r3, #0]
 8001b72:	2200      	movs	r2, #0
 8001b74:	2300      	movs	r3, #0
 8001b76:	f7ff f86f 	bl	8000c58 <XMC_VADC_GLOBAL_InputClassInit>
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
    		                              XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
#endif
  
    /* Initialize the Background Scan hardware */
    XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_config_handle);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	695a      	ldr	r2, [r3, #20]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	4610      	mov	r0, r2
 8001b86:	4619      	mov	r1, r3
 8001b88:	f7ff f98a 	bl	8000ea0 <XMC_VADC_GLOBAL_BackgroundInit>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	73fb      	strb	r3, [r7, #15]
 8001b90:	e02e      	b.n	8001bf0 <ADC_MEASUREMENT_Init+0xac>
    {
      indexed = handle_ptr->array->channel_array[j];
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	7bfa      	ldrb	r2, [r7, #15]
 8001b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b9c:	60bb      	str	r3, [r7, #8]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	7b5b      	ldrb	r3, [r3, #13]
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4610      	mov	r0, r2
 8001bae:	461a      	mov	r2, r3
 8001bb0:	f7ff f9f4 	bl	8000f9c <XMC_VADC_GROUP_ChannelInit>
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	789b      	ldrb	r3, [r3, #2]
 8001bbe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	4619      	mov	r1, r3
                                indexed->res_handle);
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	685b      	ldr	r3, [r3, #4]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 8001bca:	4610      	mov	r0, r2
 8001bcc:	461a      	mov	r2, r3
 8001bce:	f7ff ff95 	bl	8001afc <XMC_VADC_GROUP_ResultInit>
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	695a      	ldr	r2, [r3, #20]
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	7b1b      	ldrb	r3, [r3, #12]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 8001bdc:	4619      	mov	r1, r3
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	7b5b      	ldrb	r3, [r3, #13]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 8001be2:	4610      	mov	r0, r2
 8001be4:	461a      	mov	r2, r3
 8001be6:	f7ff ff6d 	bl	8001ac4 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	3301      	adds	r3, #1
 8001bee:	73fb      	strb	r3, [r7, #15]
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0cd      	beq.n	8001b92 <ADC_MEASUREMENT_Init+0x4e>
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
      }
#endif
    }
#if(UC_SERIES != XMC11)
    if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle != NULL ))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	7a1b      	ldrb	r3, [r3, #8]
 8001bfc:	f003 0308 	and.w	r3, r3, #8
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d02c      	beq.n	8001c60 <ADC_MEASUREMENT_Init+0x11c>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d028      	beq.n	8001c60 <ADC_MEASUREMENT_Init+0x11c>
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	b2dc      	uxtb	r4, r3
 8001c16:	f7ff fec1 	bl	800199c <NVIC_GetPriorityGrouping>
 8001c1a:	4601      	mov	r1, r0
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 8001c20:	685a      	ldr	r2, [r3, #4]
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	4608      	mov	r0, r1
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	f7ff ff05 	bl	8001a3c <NVIC_EncodePriority>
 8001c32:	4602      	mov	r2, r0
 8001c34:	b263      	sxtb	r3, r4
 8001c36:	4618      	mov	r0, r3
 8001c38:	4611      	mov	r1, r2
 8001c3a:	f7ff fed5 	bl	80019e8 <NVIC_SetPriority>
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
#endif
      /* Connect background Request Source Event to NVIC node */
      XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(handle_ptr->global_handle->module_ptr,
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	695a      	ldr	r2, [r3, #20]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	7e5b      	ldrb	r3, [r3, #25]
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f7ff f858 	bl	8000d00 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>
    		                                         (XMC_VADC_SR_t) handle_ptr->srv_req_node);
    
      /* Enable Background Scan Request source IRQ */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->req_src_intr_handle->node_id);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	b25b      	sxtb	r3, r3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff feac 	bl	80019b8 <NVIC_EnableIRQ>
    /* Enable Background Scan Request source IRQ */
    NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
#endif
#endif
    /* Mux Configuration is done*/
    if (handle_ptr->mux_config != NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d002      	beq.n	8001c6e <ADC_MEASUREMENT_Init+0x12a>
    {
    	(handle_ptr->mux_config)();
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	4798      	blx	r3
    }
  
    if (handle_ptr->start_conversion != (bool)false)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	7e9b      	ldrb	r3, [r3, #26]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d005      	beq.n	8001c82 <ADC_MEASUREMENT_Init+0x13e>
    {
      /* Start conversion manually using load event trigger*/
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff0f 	bl	8001aa0 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
    }
    handle_ptr->init_state = status;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	7bba      	ldrb	r2, [r7, #14]
 8001c86:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	7e1b      	ldrb	r3, [r3, #24]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd90      	pop	{r4, r7, pc}

08001c94 <ADC_MEASUREMENT_GetResult>:
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#if(XMC_VADC_GROUP_AVAILABLE == 1U)
/* This API will get the result of a conversion for a specific channel*/
XMC_VADC_RESULT_SIZE_t ADC_MEASUREMENT_GetResult(ADC_MEASUREMENT_CHANNEL_t *const handle_ptr)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  XMC_VADC_RESULT_SIZE_t result;

  XMC_ASSERT("ADC_MEASUREMENT_GetResult:Invalid handle_ptr", (handle_ptr != NULL))

  result = XMC_VADC_GROUP_GetResult(handle_ptr->group_handle, handle_ptr->ch_handle->result_reg_number);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	789b      	ldrb	r3, [r3, #2]
 8001ca6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f7ff ff36 	bl	8001b20 <XMC_VADC_GROUP_GetResult>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	81fb      	strh	r3, [r7, #14]

  return (result);
 8001cb8:	89fb      	ldrh	r3, [r7, #14]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop

08001cc4 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8001cce:	480d      	ldr	r0, [pc, #52]	; (8001d04 <DAVE_Init+0x40>)
 8001cd0:	f7ff fe20 	bl	8001914 <CLOCK_XMC4_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d104      	bne.n	8001ce8 <DAVE_Init+0x24>
  {
	 /**  Initialization of ADC_MEASUREMENT APP instance dhADC_MEASUREMENT_0 */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_Init(&dhADC_MEASUREMENT_0); 
 8001cde:	480a      	ldr	r0, [pc, #40]	; (8001d08 <DAVE_Init+0x44>)
 8001ce0:	f7ff ff30 	bl	8001b44 <ADC_MEASUREMENT_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d104      	bne.n	8001cf8 <DAVE_Init+0x34>
  {
	 /**  Initialization of SYSTIMER APP instance SYSTIMER_0 */
	 init_status = (DAVE_STATUS_t)SYSTIMER_Init(&SYSTIMER_0); 
 8001cee:	4807      	ldr	r0, [pc, #28]	; (8001d0c <DAVE_Init+0x48>)
 8001cf0:	f7ff fc16 	bl	8001520 <SYSTIMER_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000098 	.word	0x20000098
 8001d08:	2000006c 	.word	0x2000006c
 8001d0c:	20000094 	.word	0x20000094

08001d10 <CB_Timer_1ms>:
uint32_t g_var;

uint32_t Timer_1ms_Id;

void CB_Timer_1ms(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
    static uint32_t ticks = 0;

    ticks++;
 8001d14:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <CB_Timer_1ms+0x30>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	4a09      	ldr	r2, [pc, #36]	; (8001d40 <CB_Timer_1ms+0x30>)
 8001d1c:	6013      	str	r3, [r2, #0]

    if (ticks == TICKS_PER_SECOND)
 8001d1e:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <CB_Timer_1ms+0x30>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d26:	d109      	bne.n	8001d3c <CB_Timer_1ms+0x2c>
    {
         ticks = 0;
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <CB_Timer_1ms+0x30>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]

         g_var = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_A);
 8001d2e:	4805      	ldr	r0, [pc, #20]	; (8001d44 <CB_Timer_1ms+0x34>)
 8001d30:	f7ff ffb0 	bl	8001c94 <ADC_MEASUREMENT_GetResult>
 8001d34:	4603      	mov	r3, r0
 8001d36:	461a      	mov	r2, r3
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <CB_Timer_1ms+0x38>)
 8001d3a:	601a      	str	r2, [r3, #0]

     }
}
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200000a0 	.word	0x200000a0
 8001d44:	20000058 	.word	0x20000058
 8001d48:	200001c8 	.word	0x200001c8

08001d4c <main>:

int main(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
    DAVE_STATUS_t status;

    status = DAVE_Init();           /* Initialization of DAVE APPs  */
 8001d52:	f7ff ffb7 	bl	8001cc4 <DAVE_Init>
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]

    if(status != DAVE_STATUS_SUCCESS)
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d000      	beq.n	8001d62 <main+0x16>
        /* Placeholder for error handler code. The while loop below can be replaced with an user error handler. */
        XMC_DEBUG("DAVE APPs initialization failed\n");
        while(1U)
        {

        }
 8001d60:	e7fe      	b.n	8001d60 <main+0x14>
    }

    g_var = 0;
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <main+0x3c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]

    Timer_1ms_Id = SYSTIMER_CreateTimer(1000, SYSTIMER_MODE_PERIODIC, (void*) CB_Timer_1ms, NULL);
 8001d68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	4a07      	ldr	r2, [pc, #28]	; (8001d8c <main+0x40>)
 8001d70:	2300      	movs	r3, #0
 8001d72:	f7ff fc0f 	bl	8001594 <SYSTIMER_CreateTimer>
 8001d76:	4602      	mov	r2, r0
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <main+0x44>)
 8001d7a:	601a      	str	r2, [r3, #0]

    SYSTIMER_StartTimer(Timer_1ms_Id);
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <main+0x44>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff fca5 	bl	80016d0 <SYSTIMER_StartTimer>

    /* Placeholder for user application code. The while loop below can be replaced with user application code. */
    while(1U)
    {

    }
 8001d86:	e7fe      	b.n	8001d86 <main+0x3a>
 8001d88:	200001c8 	.word	0x200001c8
 8001d8c:	08001d11 	.word	0x08001d11
 8001d90:	200001c4 	.word	0x200001c4

08001d94 <__libc_init_array>:
 8001d94:	b570      	push	{r4, r5, r6, lr}
 8001d96:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <__libc_init_array+0x3c>)
 8001d98:	4c0e      	ldr	r4, [pc, #56]	; (8001dd4 <__libc_init_array+0x40>)
 8001d9a:	1ae4      	subs	r4, r4, r3
 8001d9c:	10a4      	asrs	r4, r4, #2
 8001d9e:	2500      	movs	r5, #0
 8001da0:	461e      	mov	r6, r3
 8001da2:	42a5      	cmp	r5, r4
 8001da4:	d004      	beq.n	8001db0 <__libc_init_array+0x1c>
 8001da6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001daa:	4798      	blx	r3
 8001dac:	3501      	adds	r5, #1
 8001dae:	e7f8      	b.n	8001da2 <__libc_init_array+0xe>
 8001db0:	f7ff f958 	bl	8001064 <_init>
 8001db4:	4c08      	ldr	r4, [pc, #32]	; (8001dd8 <__libc_init_array+0x44>)
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <__libc_init_array+0x48>)
 8001db8:	1ae4      	subs	r4, r4, r3
 8001dba:	10a4      	asrs	r4, r4, #2
 8001dbc:	2500      	movs	r5, #0
 8001dbe:	461e      	mov	r6, r3
 8001dc0:	42a5      	cmp	r5, r4
 8001dc2:	d004      	beq.n	8001dce <__libc_init_array+0x3a>
 8001dc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001dc8:	4798      	blx	r3
 8001dca:	3501      	adds	r5, #1
 8001dcc:	e7f8      	b.n	8001dc0 <__libc_init_array+0x2c>
 8001dce:	bd70      	pop	{r4, r5, r6, pc}
 8001dd0:	20000088 	.word	0x20000088
 8001dd4:	20000088 	.word	0x20000088
 8001dd8:	20000088 	.word	0x20000088
 8001ddc:	20000088 	.word	0x20000088

08001de0 <g_xmc_vadc_group_array>:
 8001de0:	40004400 40004800 40004c00 40005000     .D.@.H.@.L.@.P.@

08001df0 <group_init_handle0>:
	...

08001e04 <group_init_handle1>:
	...

08001e18 <group_init_handle2>:
	...

08001e2c <group_init_handle3>:
	...

08001e40 <global_config>:
 8001e40:	00000000 00000003 00000000 00000000     ................
	...
 8001e58:	01040250 00010000 00000000 00010000     P...............
 8001e68:	01010101                                ....

08001e6c <global_iclass_config>:
 8001e6c:	00000000                                ....

08001e70 <backgnd_config>:
 8001e70:	00000005 00000000 00000010              ............
