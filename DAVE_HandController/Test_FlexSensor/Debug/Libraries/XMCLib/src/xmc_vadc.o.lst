   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_vadc.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_VADC_GROUP_ExternalMuxControlInit,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_VADC_GROUP_ExternalMuxControlInit:
  25              	.LFB178:
  26              	 .file 1 "D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc/xmc_vadc.h"
   1:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
   2:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @file xmc_vadc.h
   3:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @date 2016-06-17
   4:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
   5:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @cond
   6:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** ***************************************************************************************************
   7:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMClib v2.1.8 - XMC Peripheral Driver Library 
   8:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
   9:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * All rights reserved.                        
  11:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                             
  12:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * following conditions are met:   
  14:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  15:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * disclaimer.                        
  17:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
  18:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
  21:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * products derived from this software without specific prior written permission.                  
  23:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  24:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  32:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
  35:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  36:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Change History
  37:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * --------------
  38:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  39:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-02-15:
  40:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Initial <br>
  41:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *      
  42:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-02-20:
  43:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Revised for XMC1201 device.<br>
  44:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *   
  45:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-04-27:
  46:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for SHS.<br>
  47:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added New APIs for trigger edge selection.<BR>
  48:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for Queue flush entries, boundary selection, Boundary node pointer.<BR>
  49:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Revised GatingMode APIs and EMUX Control Init API.<BR>
  50:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  51:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-06-20:
  52:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-06-25:
  54:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - BFL configuration in channel initialization fixed.
  55:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  56:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-07-28:
  57:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - CLOCK_GATING_SUPPORTED and PERIPHERAL_RESET_SUPPORTED macros used
  58:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC13 XMC12 and XMC14
  59:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC44 XMC47 and XMC48
  60:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs Created.
  61:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GLOBAL_SetIndividualBoundary
  62:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetIndividualBoundary
  63:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAlias
  64:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetInputClass
  65:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelSetIclass
  66:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetResultAlignment
  67:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetInputClass
  68:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultSubtractionValue
  69:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  70:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-12-01:
  71:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added:
  72:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC4300 device supported
  73:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  74:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed:
  75:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_TriggerEvent API updated. OR operation removed. 
  76:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_ClearEvent API updated. Multiple events triggering on clearing the event i
  77:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Wrong MACRO name defined in xmc_vadc_map.h file corrected for XMC4200/4100 devices.
  78:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *       XMC_VADC_G3_SAMPLE renamed to XMC_VADC_G1_SAMPLE
  79:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  80:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-12-01:
  81:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs Created.
  82:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled
  83:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled
  84:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed the analog calibration voltage for XMC1100 to external reference upper supply range.
  85:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed the XMC_VADC_GLOBAL_StartupCalibration() for XMC1100.
  86:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  87:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-03-09:
  88:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Optimization of write only registers
  89:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  90:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-03-18:
  91:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed XMC_VADC_GLOBAL_SHS_IsConverterReady(): API checks the STEPCFG register for the read
  92:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *       SHSCFG SFR. 
  93:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  94:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-06-17:
  95:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New macros added XMC_VADC_SHS_FULL_SET_REG, XMC_VADC_RESULT_PRIORITY_AVAILABLE
  96:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New Enum added XMC_VADC_SHS_GAIN_LEVEL_t and XMC_VADC_SYNCTR_EVAL_t
  97:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs added are:
  98:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetSyncSlaveReadySignal
  99:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetAssertedEvents
 100:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAssertedResultEvents
 101:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultRegPriority
 102:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetSyncReadySignal
 103:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetSyncReadySignal
 104:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetResultRegPriority
 105:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @endcond 
 106:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 107:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 108:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 109:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #ifndef XMC_VADC_H
 110:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_H
 111:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  
 112:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 113:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * HEADER FILES
 114:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 115:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_common.h>
 116:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_scu.h>
 117:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_vadc_map.h>
 118:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 119:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 120:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @addtogroup XMClib XMC Peripheral Library
 121:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @{
 122:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 123:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  
 124:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 125:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @addtogroup VADC
 126:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @brief Versatile Analog to Digital Converter (VADC) driver for XMC microcontroller family.
 127:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 128:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * The XMC microcontroller provides a series of analog input channels connected to a cluster of Ana
 129:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Converters using the Successive Approximation Register (SAR) principle to convert analog input v
 130:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * to discrete digital values.
 131:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \if XMC1
 132:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * The XMC1x is based on Sample & Hold converters, where a cluster contains 2 Sample&Hold units whi
 133:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter.
 134:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \endif
 135:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 136:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each converter of the ADC cluster can operate independent of the others, controlled by a dedicat
 137:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * registers and triggered by a dedicated group request source. The results of each channel can be 
 138:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * dedicated channel-specific result register or in a group-specific result register.<BR>
 139:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 140:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * The Versatile Analog to Digital Converter module (VADC) of the XMC comprises a set of converter 
 141:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * can be operated either independently or via a common request source that emulates a background c
 142:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each converter block is equipped with a dedicated input multiplexer and dedicated request source
 143:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * which together build separate groups.
 144:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 145:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \if XMC4
 146:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc4x.png"
 147:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \else
 148:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc1x.png"
 149:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \endif
 150:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 151:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * The VADC LLD is split into GLOBAL and GROUP related APIs.<BR>
 152:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * <B>GLOBAL: </B><BR>
 153:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * <UL>
 154:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Global APIs act on the entire ADC module. Configures global configuration registers</LI>
 155:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Allows configuration of the background request source of the VADC.</LI>
 156:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The clock related configurations for the VADC module are configured in the Global APIs/</LI>
 157:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The Global API names are prefixed by the \b XMC_VADC_GLOBAL_ and they accept ::XMC_VADC_GLOB
 158:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 159:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the background request source of the VADC. The APIs which act on the background r
 160:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_Background</LI>
 161:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the sample and hold unit of the VADC. The APIs which act on the SHS related regis
 162:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_SHS_</LI>
 163:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 164:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 165:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * <B>GROUP: </B><BR>
 166:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * <UL>
 167:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Group APIs act on a VADC group. Configures the group configuration registers</LI>
 168:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the queue request source of the VADC. The APIs which act on the queue related reg
 169:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Queue</LI>
 170:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the scan request source of the VADC. The APIs which act on the scan related regis
 171:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Scan</LI>
 172:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configuration of the channels of each group are done by the API which have a prefix as
 173:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     \b XMC_VADC_GROUP_Channel.</LI>
 174:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The Group API names are prefixed by the \b XMC_VADC_GROUP_ and they accept ::XMC_VADC_GROUP_
 175:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 176:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 177:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @{
 178:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 179:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  
 180:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 181:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * MACROS
 182:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 183:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 184:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if ((UC_SERIES == XMC42)||(UC_SERIES == XMC41) || (UC_SERIES == XMC43))
 185:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE           (1U) /*  Defines the availability of group resource in a
 186:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE           (1U) /*  Defines the availability of scan request resour
 187:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE           (1U) /*  Defines the availability of queue request resou
 188:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE            (1U) /*  Defines the availability of external multiplexe
 189:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 190:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE        (1U) /*  Defines the availability of boundary check supp
 191:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS      (1U) /*  Defines the availability of synchronous request
 192:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS        (2U) /*  Defines the maximum number of groups available 
 193:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT      (1U) /*  Defines the availability of boundary flags in a
 194:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE         (1U) /*  Defines the external multiplexer channel select
 195:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 196:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE             (0U) /* Defines the availability of sample and hold modu
 197:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG          (0U) /* Defines the availability of sample and hold modu
 198:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE    (1U) /* Define the availability of a source specific res
 199:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 200:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 201:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 202:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC44 || UC_SERIES == XMC47 || UC_SERIES == XMC48)
 203:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 204:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 205:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 206:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 207:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 208:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 209:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 210:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 211:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 212:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 213:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 214:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 215:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 216:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 217:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 218:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 219:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 220:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC45)
 221:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 222:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 223:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 224:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 225:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 226:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 227:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 228:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 229:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 230:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 231:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 232:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 233:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 234:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 235:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 236:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 237:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 238:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC14 || UC_SERIES == XMC13 || UC_SERIES == XMC12)
 239:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 240:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 241:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 242:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 243:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 244:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 245:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 246:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 247:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 248:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 249:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 250:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 251:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (1U) /* Defines the availability of sample and hold module
 252:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 253:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (1U) /* Define the availability of a priority for result
 254:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 255:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 256:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC11)
 257:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (0U) /*  Defines the availability of group resource in a d
 258:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (0U) /*  Defines the availability of scan request resource
 259:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (0U) /*  Defines the availability of queue request resourc
 260:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (0U) /*  Defines the availability of external multiplexer 
 261:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 262:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (0U) /*  Defines the availability of boundary check suppor
 263:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (0U) /*  Defines the availability of synchronous request s
 264:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 265:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 266:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_START_UP_CAL_ACTIVE (3U) /*  Defines the need for SHS startup calibration acti
 267:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 devices */
 268:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_CONV_ENABLE_FOR_XMC11   (*(uint32_t*) 0x40010500UL) /*  Defines the additional err
 269:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 device for effective working*/ 
 270:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 271:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 272:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 273:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 274:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 275:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 276:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 277:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 278:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_PORTS               (16U) /* Defines the number of hardware ports that can be 
 279:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     as triggers and gating signals */
 280:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 281:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_RESULT_REGISTERS    (16U) /* Defines the number of result holding registers pe
 282:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 283:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_CHANNELS_PER_GROUP  (8U)  /**< Defines the number of ADC channels per group */
 284:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 285:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 286:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * ENUMS
 287:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 288:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef uint16_t XMC_VADC_RESULT_SIZE_t; /**< Type defined the converted result size to unsigned 16
 289:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef VADC_GLOBAL_TypeDef XMC_VADC_GLOBAL_t; /**< Type defined the device header file vadc global
 290:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                              type to VADC type*/
 291:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 292:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_AVAILABLE == 1U)
 293:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef VADC_G_TypeDef XMC_VADC_GROUP_t; /**< Type defined the device header file vadc group regist
 294:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                              type to VADC Group type*/
 295:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 296:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 297:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 298:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef SHS_Type XMC_VADC_GLOBAL_SHS_t; /**< Type defined the sample and hold register structure*/
 299:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 300:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 301:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the return status after execution of VADC specific API's. Use @ref XMC_VADC_STATUS_t fo
 302:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 303:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STATUS
 304:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 305:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_SUCCESS = 0,   /**< Returned when the API has been able to fulfill the callers re
 306:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_ERROR          /**< Returned when the API cannot fulfill the request */
 307:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STATUS_t;
 308:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 309:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 310:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the various service requests lines. Each group can raise up to 4 service requests indep
 311:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  all groups together have the possibility of raising 4 module wide service requests. Use @ref XM
 312:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 313:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 314:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SR
 315:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 316:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR0 = 0, /**< Group specific Service Request-0 */
 317:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR1,     /**< Group specific Service Request-1 */
 318:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR2,     /**< Group specific Service Request-2 */
 319:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR3,     /**< Group specific Service Request-3 */
 320:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR0,    /**< Module Wide Common Service Request-0 */
 321:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR1,    /**< Module Wide Common Service Request-1 */
 322:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR2,    /**< Module Wide Common Service Request-2 */
 323:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR3    /**< Module Wide Common Service Request-3 */
 324:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SR_t;
 325:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 326:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 327:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the mode of operation of a channel, when an ongoing conversion gets interrupted in betw
 328:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_STARTMODE_t for this enumeration.
 329:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 330:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STARTMODE
 331:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 332:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_WFS = 0, /**< An ongoing conversion completes without interruption */
 333:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CIR,     /**< An ongoing conversion can be interrupted and resumed later*/
 334:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CNR     /**< An ongoing conversion can be interrupted and never resumed */
 335:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STARTMODE_t;
 336:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 337:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 338:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the edge sensitivity of the trigger signal which can assert a conversion.
 339:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_EDGE_t for this enumeration.
 340:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 341:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_EDGE
 342:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 343:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_NONE = 0, /**< No external trigger. Conversion request can be asserted by s
 344:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_FALLING,  /**< The falling edge of the external trigger can assert conversi
 345:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_RISING,   /**< The rising edge of the external trigger can assert conversio
 346:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_ANY       /**< Both the edges can assert conversion request */
 347:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_EDGE_t;
 348:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 349:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 350:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the external trigger input selection possibilities, to assert a conversion. Refer the V
 351:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  section of the reference manual for details of peripherals which can be used. Also refer xmc_va
 352:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  detailed definitions of the peripherals which can take the control of these enumeration items.
 353:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_INPUT_SELECT_t for this enumeration.
 354:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 355:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_INPUT_SELECT
 356:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 357:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_A = 0, /**< Trigger select signal A */
 358:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_B,     /**< Trigger select signal B */
 359:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_C,     /**< Trigger select signal C */
 360:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_D,     /**< Trigger select signal D */
 361:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_E,     /**< Trigger select signal E */
 362:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_F,     /**< Trigger select signal F */
 363:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_G,     /**< Trigger select signal G */
 364:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_H,     /**< Trigger select signal H */
 365:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_I,     /**< Trigger select signal I */
 366:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_J,     /**< Trigger select signal J */
 367:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_K,     /**< Trigger select signal K */
 368:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_L,     /**< Trigger select signal L */
 369:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_M,     /**< Trigger select signal M */
 370:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_N,     /**< Trigger select signal N */
 371:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_O,     /**< Trigger select signal O */
 372:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_P      /**< Trigger select signal P */
 373:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   
 374:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_INPUT_SELECT_t;
 375:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 376:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 377:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the external gating input selection possibilities, to gate the conversion requests. Ref
 378:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  interconnects section of the reference manual for details of peripherals which can be used. Als
 379:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  xmc_vadc_map.h file for detailed definitions of the peripherals which can take the control of t
 380:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  items. Use @ref XMC_VADC_GATE_INPUT_SELECT_t for this enumeration.
 381:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 382:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATE_INPUT_SELECT
 383:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 384:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_A = 0, /**< Gating select signal A */
 385:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_B,     /**< Gating select signal B */
 386:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_C,     /**< Gating select signal C */
 387:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_D,     /**< Gating select signal D */
 388:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_E,     /**< Gating select signal E */
 389:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_F,     /**< Gating select signal F */
 390:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_G,     /**< Gating select signal G */
 391:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_H,     /**< Gating select signal H */
 392:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_I,     /**< Gating select signal I */
 393:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_J,     /**< Gating select signal J */
 394:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_K,     /**< Gating select signal K */
 395:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_L,     /**< Gating select signal L */
 396:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_M,     /**< Gating select signal M */
 397:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_N,     /**< Gating select signal N */
 398:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_O,     /**< Gating select signal O */
 399:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_P      /**< Gating select signal P */
 400:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   
 401:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATE_INPUT_SELECT_t;
 402:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 403:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 404:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the condition for gating the conversion requests. It can be used to set the ENGT field
 405:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * of ASMR/BSMR/QMR register respectively for auto_scan/background_scan/queue request sources.
 406:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_GATEMODE_t for this enumeration.
 407:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 408:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATEMODE
 409:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 410:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_BLOCK = 0,  /**< External triggers are permanently blocked */
 411:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_IGNORE,     /**< External triggers are unconditionally passed */
 412:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVEHIGH, /**< External trigger is passed only if the gate signal is high */
 413:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVELOW  /**< External trigger is passed only if the gate signal is low */
 414:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATEMODE_t;
 415:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 416:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 417:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion result handling mode. Use @ref XMC_VADC_DMM_t for this enumeration.
 418:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 419:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_DMM
 420:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 421:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_REDUCTION_MODE = 0, /**< Standard Data reduction mode*/
 422:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_FILTERING_MODE,     /**< Provide option to select Finite Impulse Response Filter (FI
 423:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                         Infinite Impulse Response Filter (IIR)*/
 424:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_DIFFERENCE_MODE,    /**< Difference mode is selected*/
 425:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_DMM_t;
 426:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 427:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 428:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the conversion mode. It defines the resolution of conversion. Use XMC_VADC_CONVMODE_t f
 429:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 430:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CONVMODE
 431:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 432:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_12BIT       = 0,  /**< Results of conversion are 12bits wide */
 433:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_10BIT       = 1,  /**< Results of conversion are 10bits wide */
 434:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_8BIT        = 2,  /**< Results of conversion are 8bits wide */
 435:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_FASTCOMPARE = 5  /**< Input signal compared with a preset range */
 436:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CONVMODE_t;
 437:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 438:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 439:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the output of a fast compare mode. Use @ref XMC_VADC_FAST_COMPARE_t for
 440:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  this enumeration.
 441:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 442:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_FAST_COMPARE
 443:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 444:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_LOW = 0, /**< Input lower than than programmed reference */
 445:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_HIGH ,   /**< Input higher than than programmed reference */
 446:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_UNKNOWN  /**< Unknown, Conversion probably still ongoing */
 447:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_FAST_COMPARE_t;
 448:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  
 449:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 450:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the type of scan request source to be used. It can choose between auto scan and backgrou
 451:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * source methods. Use @ref XMC_VADC_SCAN_TYPE_t for this enumeration.
 452:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 453:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_TYPE
 454:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 455:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_GROUPSCAN = 0, /**< Auto scan mode of operation selected. Also called as Group
 456:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_BACKGROUND    /**< Background scan mode of operation selected. Also called as 
 457:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_TYPE_t;
 458:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 459:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 460:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the behavior of load event for the scan request source. Use @ref XMC_VADC_SCAN_LOAD_t fo
 461:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 462:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_LOAD
 463:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 464:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_OVERWRITE = 0, /**< The old set of channels is discarded in favor of the new s
 465:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                          awaiting conversion */
 466:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_COMBINE       /**< The new set of channels are combined with the pending chann
 467:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                          previous set */
 468:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_LOAD_t;
 469:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 470:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 471:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion classes that can be selected for each channel. The enumeration members ho
 472:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * global classes. The conversion classes decides the properties of conversion, like resolution, sa
 473:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_CHANNEL_CONV_t for this enumeration.
 474:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 475:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 476:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_CONV
 477:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 478:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 = 0, /**< Conversion property set-0 specific to the group */
 479:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS1,     /**< Conversion property set-1 specific to the group */
 480:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS0,    /**< Conversion property set-0, Module wide */
 481:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1    /**< Conversion property set-1, Module wide */
 482:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONV_t;
 483:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 484:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 485:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the references to boundary values used for limit checking feature. Each of these can be 
 486:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * either an upper bound or a lower bound. Use @ref XMC_VADC_CHANNEL_BOUNDARY_t for this enumeratio
 487:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 488:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 489:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY
 490:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 491:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 = 0, /**< Group specific Boundary-0 value */
 492:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1,     /**< Group specific Boundary-1 value */
 493:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0,    /**< Module wide Boundary-0 value */
 494:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1    /**< Module wide Boundary-1 value */
 495:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_t;
 496:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 497:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 498:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the voltage which the capacitor is charged to. Used in Broken wire detection feature. Us
 499:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @ref XMC_VADC_CHANNEL_BWDCH_t for this enumeration.
 500:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 501:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BWDCH
 502:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 503:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAGND = 0, /**< Capacitor pre-charged to ground*/
 504:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAREF     /**< Capacitor pre-charged to reference voltage*/
 505:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BWDCH_t;
 506:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 507:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 508:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Defines the criteria for event generation by the channel. Use @ref XMC_VADC_CHANNEL_EVGEN_t fo
 509:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 510:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_EVGEN
 511:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 512:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_NEVER     = 0,  /**< No event generated */
 513:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_INBOUND   = 1U, /**< Event generated when the result is within the normal 
 514:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPHIGH  = 1U, /**< Event generated when the result of fast compare opera
 515:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_OUTBOUND  = 2U, /**< Event generated when the result is outside the normal
 516:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPLOW   = 2U, /**< Event generated when the result result of fast compar
 517:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_ALWAYS    = 3U /**< Event generated always after conversion - unconditiona
 518:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_EVGEN_t;
 519:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 520:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 521:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the reference voltage selection for conversion. Use @ref XMC_VADC_CHANNEL_REF_t for this
 522:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 523:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_REF
 524:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 525:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_INTREF = 0, /**< Internal VARef */
 526:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_ALT_CH0    /**< External voltage available on Channel-0 of the perticular gr
 527:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_REF_t;
 528:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  
 529:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 530:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the criteria for boundary flag assertion. Use @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t
 531:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 532:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 533:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY_CONDITION
 534:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 535:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_ABOVE_BAND = 0, /**< Set Boundary condition criteria to asser
 536:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_BELOW_BAND     /**< Set Boundary condition criteria to assert
 537:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t;
 538:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  
 539:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 540:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the event which can lead to a global service request assertion. Use @ref XMC_VADC_GLOBAL
 541:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 542:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 543:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_EVENT
 544:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 545:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE = VADC_GLOBEFLAG_SEVGLB_Msk, /**< Background scan request sourc
 546:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_RESULT      = VADC_GLOBEFLAG_REVGLB_Msk  /**< Global result event */
 547:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_EVENT_t;
 548:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  
 549:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 550:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the power modes of a VADC Group. Use @ref XMC_VADC_GROUP_POWERMODE_t for this enumeratio
 551:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 552:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_POWERMODE
 553:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 554:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_OFF       = 0, /**< Group is powered down */
 555:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED1,     /**< Reserved */
 556:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED2,     /**< Reserved */
 557:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_NORMAL        /**< Group is powered up */
 558:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_POWERMODE_t;
 559:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 560:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 561:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the status of a VADC group (also known as kernel). Use @ref XMC_VADC_GROUP_STATE_t for 
 562:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 563:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_STATE
 564:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 565:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_IDLE = 0, /**< Idle and can convert if requested */
 566:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_BUSY      /**< Busy with an ongoing conversion */
 567:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_STATE_t;
 568:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 569:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 570:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the reference to sample time and conversion mode settings. Use @ref XMC_VADC_GROUP_CONV
 571:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 572:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 573:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_CONV
 574:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 575:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_STD = 0, /**< Settings pertaining to channels directly attached to VADC modul
 576:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_EMUX    /**< Settings pertaining to channels connected to VADC via EMUX */
 577:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONV_t;
 578:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 579:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 580:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbiter behavior. Use @ref XMC_VADC_GROUP_ARBMODE_t for this enumera
 581:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 582:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_ARBMODE
 583:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 584:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ALWAYS = 0, /**< Arbiter runs all the time */
 585:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ONDEMAND    /**< Arbiter runs only if a conversion request is asserted by 
 586:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                           request sources */
 587:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_ARBMODE_t;
 588:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 589:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 590:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX mode of operation. Use @ref XMC_VADC_GROUP_EMUXMODE_t for this enumeration.
 591:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 592:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXMODE
 593:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 594:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SWCTRL = 0,     /**< Perform EMUX in Software control mode*/
 595:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_STEADYMODE,     /**< Perform EMUX in Steady mode (Use EMUX set value)*/
 596:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SINGLEMODE,     /**< Perform EMUX in Single step mode*/
 597:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SEQUENCEMODE,   /**< Perform EMUX in Sequence mode*/
 598:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXMODE_t;
 599:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 600:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 601:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX channel selection encoding scheme. Use @ref XMC_VADC_GROUP_EMUXCODE_t for this
 602:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 603:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXCODE
 604:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 605:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_BINARY = 0, /**< A linearly incrementing code serves are MUX-SEL */
 606:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_GRAY       /**< The MUX-SEL is gray encoded */
 607:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCODE_t;
 608:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 609:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 610:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the service request set used. Use @ref XMC_VADC_GROUP_IRQ_t for this enumeration.
 611:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 612:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_IRQ
 613:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 614:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_KERNEL = 0, /**< Refers to Group specific service request */
 615:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_SHARED     /**< Refers to Module wide service request */
 616:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_IRQ_t;
 617:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 618:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 619:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the alignment of the converted result. Use @ref XMC_VADC_RESULT_ALIGN_t for this enumer
 620:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 621:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_ALIGN
 622:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 623:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_LEFT = 0,  /**< Always align result to left */
 624:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_RIGHT      /**< Always align result to right */
 625:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_ALIGN_t;
 626:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 627:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_SUBTRATION 
 628:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 629:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_LEFT_ALIGN  = 0U,  /**< Always align result to left */
 630:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 631:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_LEFT_ALIGN  = 2U,  /**< Always align result to left */
 632:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 633:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_LEFT_ALIGN   = 4U,  /**< Always align result to left */
 634:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_RIGHT_ALIGN  = 0U,  /**< Always align result to right */
 635:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_SUBTRATION_t;
 636:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 637:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 638:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbitration priority. Use @ref XMC_VADC_GROUP_RS_PRIORITY_t for this
 639:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 640:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_RS_PRIORITY
 641:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 642:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_0 = 0, /**< Lowest priority for the request source*/
 643:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_1,     /**< Second lowest priority for the request source*/
 644:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_2,     /**< Second highest priority for the request source*/
 645:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_3,     /**< Highest priority for the request source*/
 646:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_RS_PRIORITY_t;
 647:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 648:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 649:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the various modes for the boundary flag. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t f
 650:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 651:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_BOUNDARY_FLAG_MODE
 652:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 653:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_DISABLED = 0,       /**< Disable boundary flag*/
 654:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED,            /**< Always enable boundary*/
 655:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_LOW, /**< Enable boundary flag when gate level
 656:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_HIGH /**< Enable boundary flag when gate level
 657:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t;
 658:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 659:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 660:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 661:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the boundary select for Channel. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t for this 
 662:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 663:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_SELECT
 664:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 665:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_LOWER_BOUND = 0U,       /**< Select the lower boundary*/
 666:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_UPPER_BOUND = 2U        /**< Selects the upper boundary*/
 667:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_BOUNDARY_SELECT_t;
 668:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 669:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 670:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 671:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the group indices. Use @ref XMC_VADC_GROUP_INDEX_t for this enumeration.
 672:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 673:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_INDEX
 674:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 675:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_0   = 0,
 676:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_1,
 677:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 678:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_2,
 679:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_3
 680:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 681:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_INDEX_t;
 682:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 683:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 684:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** * Defines channel alias.
 685:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** * All enum items are available for channels 0 and 1. Other Channels can accept only XMC_VADC_CHANNE
 686:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** */
 687:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_ALIAS
 688:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 689:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_DISABLED = -1,
 690:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH0 = 0,
 691:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH1 = 1,
 692:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH2 = 2,
 693:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH3 = 3,
 694:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH4 = 4,
 695:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH5 = 5,
 696:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH6 = 6,
 697:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH7 = 7
 698:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_ALIAS_t;
 699:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 700:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 701:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 702:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 703:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 704:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the gain calibration selection.
 705:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 706:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_GAIN_LEVEL
 707:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 708:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_0 = SHS_CALOC0_CALOFFVAL0_Pos, /**< Select the calibration value for gain
 709:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_1 = SHS_CALOC0_CALOFFVAL1_Pos, /**< Select the calibration value for gain
 710:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_2 = SHS_CALOC0_CALOFFVAL2_Pos, /**< Select the calibration value for gain
 711:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_3 = SHS_CALOC0_CALOFFVAL3_Pos  /**< Select the calibration value for gain
 712:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SHS_GAIN_LEVEL_t;
 713:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 714:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 715:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 716:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the Delta sigma loop.
 717:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 718:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_LOOP_CH
 719:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 720:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_0 = SHS_LOOP_LPCH0_Pos, /**< Select Delta-sigma loop 0*/
 721:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_1 = SHS_LOOP_LPCH1_Pos /**< Select Delta-sigma loop 1*/
 722:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SHS_LOOP_CH_t;
 723:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 724:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 725:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Provides the order in which the SHS should do the calibration
 726:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 727:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER
 728:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 729:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_POST_CONV = 0, /**< Calibration occur after conversion take
 730:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_PRE_CONV   /**< Calibration occur before conversion takes p
 731:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t;
 732:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 733:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 734:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 735:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 736:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Provides possible routing values for the boundary flag.
 737:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 738:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_NODE
 739:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 740:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_0 = 0U, /**<Route the Group boundary flag to Common b
 741:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_1,      /**<Route the Group boundary flag to Common b
 742:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_2,      /**<Route the Group boundary flag to Common b
 743:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_3,      /**<Route the Group boundary flag to Common b
 744:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_0,  /**<Route the Group boundary flag to Common Service Req
 745:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_1,  /**<Route the Group boundary flag to Common Service Req
 746:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_2,  /**<Route the Group boundary flag to Common Service Req
 747:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_3   /**<Route the Group boundary flag to Common Service Req
 748:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_BOUNDARY_NODE_t;
 749:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 750:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 751:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 752:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 753:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the ready signal selection
 754:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 755:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SYNCTR_EVAL
 756:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 757:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_1 = VADC_G_SYNCTR_EVALR1_Msk, /**<Mask to set the EVAL1 bits of SYNCTR */
 758:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 759:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_2 = VADC_G_SYNCTR_EVALR2_Msk, /**<Mask to set the EVAL2 bits of SYNCTR */
 760:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_3 = VADC_G_SYNCTR_EVALR3_Msk  /**<Mask to set the EVAL3 bits of SYNCTR */
 761:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 762:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SYNCTR_EVAL_t;
 763:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 764:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 765:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * DATA STRUCTURES
 766:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 767:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard start*/
 768:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
 769:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma push
 770:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma anon_unions
 771:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
 772:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma warning 586
 773:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 774:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 775:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 776:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC scan request source. Use type @ref XMC_VADC_SCAN_CONFIG_t for t
 777:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 778:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_SCAN_CONFIG
 779:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 780:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 781:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how scan request source would
 782:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 783:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter. If the Conversion
 784:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                          selected as Cancel inject repeat/Never mode then this fiel
 785:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                          priority of scan request source. Uses @ref XMC_VADC_GROUP_
 786:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 787:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 788:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 789:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 790:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 791:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Use any one Group related result register as 
 792:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 793:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 794:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 795:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 796:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 797:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 798:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 799:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_INPUT_SELECT_t enumeration*/
 800:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 801:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal. Uses @ref
 802:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_EDGE_t */
 803:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 804:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 805:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_GATE_INPUT_SELECT_t */
 806:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 8;
 807:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Decides whether timer mode for equi-distant s
 808:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       activated or not.*/
 809:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 3;
 810:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 811:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t asctrl;
 812:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 813:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 814:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 815:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 816:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 817:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 2;
 818:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversions be initiated by external hardware trig
 819:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t req_src_interrupt  : 1;  /**< Request source event can be generated after a conv
 820:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t enable_auto_scan   : 1;  /**< Enables the continuous conversion mode. Conversion
 821:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  of the last channel in a scan sequence will cause 
 822:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t load_mode          : 1;  /**< Selects load event mode. Uses @ref XMC_VADC_SCAN_L
 823:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 26;
 824:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 825:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t asmr;
 826:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 827:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_CONFIG_t;
 828:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 829:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 830:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef XMC_VADC_SCAN_CONFIG_t XMC_VADC_BACKGROUND_CONFIG_t; /**< Type defined the scan configurati
 831:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                  structure for background Request S
 832:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 833:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 834:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC channel. Use type XMC_VADC_CHANNEL_CONFIG_t for this enumeratio
 835:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 836:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_CHANNEL_CONFIG
 837:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 838:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 839:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 840:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 841:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 842:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t input_class                : 2;  /**< Input conversion class selection.
 843:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_CONV_t */
 844:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 2;
 845:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t lower_boundary_select      : 2;  /**< Which boundary register serves as lower bo
 846:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 847:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t upper_boundary_select      : 2;  /**< Which boundary register serves as upper bo
 848:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 849:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_criteria         : 2;  /**< When should an event be generated?
 850:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_EVGEN_t */
 851:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sync_conversion            : 1;  /**< Enables synchronous conversion for the con
 852:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t alternate_reference        : 1;  /**< Input reference voltage selection either V
 853:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_REF_t*/
 854:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 4;
 855:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t result_reg_number          : 4;  /**< Group result register number */
 856:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t use_global_result          : 1;  /**< Use global result register for background 
 857:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t result_alignment           : 1;  /**< Alignment of the results read in the resul
 858:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_RESULT_ALIGN_t */
 859:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 6;
 860:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t broken_wire_detect_channel : 2;  /**< Source to be used to charge the capacitor 
 861:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BWDCH_t. */
 862:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t broken_wire_detect         : 1;  /**< Configures extra phase before the capacito
 863:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 864:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t chctr;
 865:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 866:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 867:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 868:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 869:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 870:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 8;
 871:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 872:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch0 : 1; /**< Condition for which the boundary flag should
 873:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                        Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITIO
 874:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch1 : 1; /**< Condition for which the boundary flag should
 875:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 876:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch2 : 1; /**< Condition for which the boundary flag should
 877:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 878:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch3 : 1; /**< Condition for which the boundary flag should
 879:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 880:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 881:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 4;
 882:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 883:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 4;
 884:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 885:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch0  : 1; /**< Inverts boundary flag output.*/
 886:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch1  : 1; /**< Inverts boundary flag output.*/
 887:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch2  : 1; /**< Inverts boundary flag output.*/
 888:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch3  : 1; /**< Inverts boundary flag output.*/
 889:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 890:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 891:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch0  : 1; /**< Enable the boundary flag output on the speci
 892:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch1  : 1; /**< Enable the boundary flag output on the speci
 893:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch2  : 1; /**< Enable the boundary flag output on the speci
 894:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch3  : 1; /**< Enable the boundary flag output on the speci
 895:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 896:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 12;
 897:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 898:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t bfl;
 899:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 900:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 901:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 902:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 903:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 904:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 905:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch0    : 4; /**< Specify the basic operation of boundary flag 
 906:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 907:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch1    : 4; /**< Specify the basic operation of boundary flag 
 908:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 909:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch2    : 4; /**< Specify the basic operation of boundary flag 
 910:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 911:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch3    : 4; /**< Specify the basic operation of boundary flag 
 912:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 913:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t                           : 16;
 914:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 915:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t bflc;
 916:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 917:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 918:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     bool    channel_priority;  /**< Only non priority channels can be converted by Background Reque
 919:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     int8_t  alias_channel;     /**< Specifies the channel which has to be aliased with CH0/CH1 (whi
 920:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                     Force the value to \b(int8_t)-1 to bypass alias feature.
 921:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                     Uses @ref XMC_VADC_CHANNEL_ALIAS_t  for configuration.*/
 922:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONFIG_t;
 923:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 924:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 925:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize a queue entry. Use type @ref XMC_VADC_QUEUE_ENTRY_t.
 926:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 927:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_ENTRY
 928:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 929:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 930:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 931:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 932:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 933:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t channel_num        : 5;  /**< Channel number associated with this queue entry.<B
 934:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t refill_needed      : 1;  /**< Conversion completed channel gets inserted back in
 935:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t generate_interrupt : 1;  /**< Generates a queue request source event */
 936:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversion requests are raised on an external trig
 937:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 24;
 938:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 939:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 940:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qinr0;
 941:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 942:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_ENTRY_t;
 943:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 944:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 945:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing a VADC queue request source. Use type @ref XMC_VADC_QUEUE_CONFIG_t.
 946:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 947:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_CONFIG
 948:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 949:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 950:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how queue request source woul
 951:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 952:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter.Uses @ref XMC_VADC
 953:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 954:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 955:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 956:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 957:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 958:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Uses any one Group related result register as
 959:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 960:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 961:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 962:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 963:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 964:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 965:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 966:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_INPUT_SELECT_t */
 967:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 968:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal.
 969:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_EDGE_t */
 970:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 971:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 972:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GATE_INPUT_SELECT_t */
 973:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 8;
 974:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Timer mode for equi-distant sampling shall be
 975:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 3;
 976:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 977:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qctrl0;
 978:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 979:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 980:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 981:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 982:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 983:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                   : 2;
 984:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger  : 1;  /**< Are external triggers supported? */
 985:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                   : 29;
 986:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 987:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qmr0;
 988:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 989:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_CONFIG_t;
 990:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 991:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
 992:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 993:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the global input class configuration. Configured parameters are sample 
 994:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
 995:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 996:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLASS
 997:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 998:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 999:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1000:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1001:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1002:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
1003:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1004:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1005:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
1006:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1007:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1008:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
1009:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
1010:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1011:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1012:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
1013:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1014:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1015:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1016:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 16;
1017:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1018:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1019:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globiclass;
1020:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1021:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLASS_t;
1022:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1023:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1024:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1025:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize converter and arbiter clock configuration
1026:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1027:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLOCK
1028:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
1029:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1030:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1031:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1032:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1033:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1034:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t analog_clock_divider     : 5;  /**< Clock for the converter. <BR>Range: [0x0 to 
1035:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 2;
1036:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t msb_conversion_clock     : 1;  /**< Additional clock cycle for analog converter 
1037:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbiter_clock_divider    : 2;  /**< Request source arbiter clock divider. <BR>Ra
1038:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 5;
1039:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 17;
1040:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1041:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globcfg;
1042:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1043:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLOCK_t;
1044:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1045:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1046:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1047:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1048:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize the VADC Global functions
1049:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1050:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CONFIG
1051:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
1052:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1053:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1054:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1055:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1056:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1057:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1058:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1059:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1060:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1061:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globbound;
1062:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1063:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1064:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLOCK_t clock_config; /**< ADC clock configurations*/
1065:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1066:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class0;      /**< ADC input conversion configurations for GLOBICLASS[0
1067:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class1;      /**< ADC input conversion configurations for GLOBICLASS[1
1068:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1069:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1070:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1071:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1072:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 16;
1073:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Data reduction stages */
1074:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
1075:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Results of the next conversion will not be ov
1076:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       result register until the previous value is r
1077:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 6;
1078:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1079:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1080:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globrcr;
1081:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1082:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1083:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1084:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1085:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1086:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t module_disable              : 1;  /**< Disables the module clock.*/
1087:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                             : 2;
1088:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t disable_sleep_mode_control  : 1;  /**< Set it to true in order to disable the Sl
1089:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                             : 28;
1090:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1091:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t clc;
1092:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1093:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CONFIG_t;
1094:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1095:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1096:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1097:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the group input class configuration. Configured parameters are sample t
1098:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
1099:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1100:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CLASS
1101:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
1102:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1103:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1104:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1105:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1106:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
1107:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1108:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1109:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
1110:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1111:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1112:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
1113:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1114:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1115:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
1116:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1117:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1118:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1119:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_iclass0;
1120:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1121:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CLASS_t;
1122:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1123:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1124:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1125:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  EMUX related configuration structure.
1126:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1127:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_EMUXCFG
1128:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
1129:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1130:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1131:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1132:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1133:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t starting_external_channel : 3;  /**< External channel number to which the VADC w
1134:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         generate a control signal (needed to select
1135:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         the analog multiplexer)*/
1136:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 13;
1137:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1138:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t connected_channel         : 10; /**< The Channel to which the EMUX is connected.
1139:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1140:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t connected_channel         : 5;  /**< The Channel to which the EMUX is connected.
1141:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 5;
1142:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1143:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_mode                 : 2;  /**< Selects the external multiplexer modes: Ste
1144:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         Uses @ref XMC_VADC_GROUP_EMUXMODE_t*/
1145:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_coding               : 1;  /**< Select Binary or Gray coding. Uses @ref XMC
1146:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t stce_usage                : 1;  /**< Use STCE for each conversion of an external
1147:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1148:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_channel_select_style : 1;  /**< Selects the style of configuring the \b con
1149:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         (Each bit represents the channel or entire 
1150:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 1;
1151:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1152:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 2;
1153:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1154:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1155:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_emuxctr;
1156:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1157:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCFG_t;
1158:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1159:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1160:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1161:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Group Configuration Data Structures
1162:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1163:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1164:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CONFIG
1165:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
1166:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_EMUXCFG_t emux_config;    /**< External multiplexer related configurations */
1167:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class0;           /**< ADC input conversion configurations for GxICLASS[
1168:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class1;           /**< ADC input conversion configurations for GxICLASS[
1169:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1170:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1171:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1172:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1173:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1174:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1175:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1176:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1177:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1178:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_bound;
1179:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1180:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1181:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1182:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1183:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1184:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 4;
1185:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbitration_round_length : 2;  /**< Number of arbiter slots to be considered */
1186:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 1;
1187:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbiter_mode             : 1;  /**< Arbiter mode - Select either Continuous mode
1188:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_ARBMODE_t */
1189:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 24;
1190:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1191:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_arbcfg;
1192:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1193:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONFIG_t;
1194:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1195:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1196:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize VADC Group result register.
1197:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1198:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1199:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_RESULT_CONFIG
1200:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
1201:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1202:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1203:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1204:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1205:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 16;
1206:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Configures the data reduction stages */
1207:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t post_processing_mode    : 2;  /**< Result data processing mode. Uses @ref  XMC_V
1208:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       For normal operation select
1209:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_DMM_t::XMC_VADC_DMM_REDUCTION_MODE
1210:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       and data_reduction_control as 0*/
1211:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 2;
1212:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Allow the conversion only after previous resu
1213:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t part_of_fifo            : 2;  /**< Make the result register a part of Result FIF
1214:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
1215:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1216:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1217:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_rcr;
1218:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1219:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_CONFIG_t;
1220:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1221:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1222:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1223:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1224:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Structure to initialize the Stepper configurations
1225:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1226:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_STEP_CONFIG
1227:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
1228:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1229:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1230:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1231:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1232:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step0            :3;  /**< Select a Sample and hold unit for the stepper's s
1233:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1234:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step0             :1;  /**< Should the step be added to the sequence */
1235:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step1            :3;  /**< Select a Sample and hold unit for the stepper's s
1236:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1237:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step1             :1;  /**< Should the step be added to the sequence */
1238:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step2            :3;  /**< Select a Sample and hold unit for the stepper's s
1239:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1240:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step2             :1;  /**< Should the step be added to the sequence */
1241:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step3            :3;  /**< Select a Sample and hold unit for the stepper's s
1242:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1243:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step3             :1;  /**< Should the step be added to the sequence */
1244:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step4            :3;  /**< Select a Sample and hold unit for the stepper's s
1245:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1246:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step4             :1;  /**< Should the step be added to the sequence */
1247:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step5            :3;  /**< Select a Sample and hold unit for the stepper's s
1248:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1249:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step5             :1;  /**< Should the step be added to the sequence */
1250:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step6            :3;  /**< Select a Sample and hold unit for the stepper's s
1251:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1252:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step6             :1;  /**< Should the step be added to the sequence */
1253:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step7            :3;  /**< Select a Sample and hold unit for the stepper's s
1254:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1255:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step7             :1;  /**< Should the step be added to the sequence */
1256:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1257:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1258:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t stepcfg;
1259:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1260:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t;
1261:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1262:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1263:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sample and hold Initialization structure
1264:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1265:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_CONFIG
1266:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
1267:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1268:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1269:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1270:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1271:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t shs_clock_divider        :4; /**< The divider value for the SHS clock. Range: [0x0 t
1272:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :6;
1273:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t analog_reference_select  :2; /**< It is possible to different reference voltage for 
1274:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  */
1275:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :20;
1276:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1277:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t shscfg;
1278:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1279:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1280:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t calibration_order; /**< order in which the calibration sh
1281:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1282:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CONFIG_t;
1283:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1284:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1285:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1286:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Detailed result structure
1287:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1288:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  typedef struct XMC_VADC_DETAILED_RESULT
1289:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
1290:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1291:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1292:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1293:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1294:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t result                   :16;  /**< Result of the Analog to digital conversion*/
1295:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t data_reduction_counter   :4;   /**< Results reduction counter value*/
1296:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t channel_number           :5;   /**< Converted channel number*/
1297:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_channel_number      :3;   /**< Converted external multiplexer channel number.
1298:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  Only applicable for GxRES[0] result register*/
1299:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t converted_request_source :2;   /**< Converted request source*/
1300:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t fast_compare_result      :1;   /**< Fast compare result if conversion mode is fast c
1301:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t vaild_result             :1;   /**< Valid flag is set when a new result is available
1302:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1303:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t res;
1304:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1305:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_DETAILED_RESULT_t;
1306:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  
1307:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1308:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard end*/
1309:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
1310:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma pop
1311:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
1312:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma warning restore
1313:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1314:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1315:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * static inline functions
1316:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1317:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1318:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U) 
1319:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_CHECK_GROUP_PTR(XMC_VADC_GROUP_t *const group_ptr)
1320:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
1321:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
1322:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1) || (group_ptr == VADC_G2) || (group_ptr =
1323:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1324:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1));
1325:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1326:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
1327:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1328:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1329:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * API Prototypes
1330:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1331:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1332:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #ifdef __cplusplus
1333:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** extern "C" {
1334:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1335:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1336:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1337:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param None
1338:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1339:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1340:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1341:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1342:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module.<BR>\n
1343:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would ungate the clock to the VADC module (if applicable). Also this API would bring
1344:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * the VADC module out of reset state(if applicable), by asserting the appropriate registers.
1345:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_UngatePeripheralClock() and XMC_SCU_RESET_DeassertPeripheral
1346:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * if needed. Directly accessed register is  COMPARATOR.ORCCTRL (Refer to the errata for XMC1100).
1347:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1348:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1349:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableModule().
1350:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1351:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_EnableModule(void);
1352:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1353:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1354:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param None
1355:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1356:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1357:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1358:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1359:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module.<BR>\n
1360:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would gate the clock to the VADC module (if applicable). Also this API would put
1361:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * the VADC module into the reset state(if applicable) by asserting the appropriate registers.
1362:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_GatePeripheralClock() and XMC_SCU_RESET_AssertPeripheralRese
1363:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1364:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1365:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModule().
1366:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1367:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_DisableModule(void);
1368:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1369:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1370:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1371:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module.
1372:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config Pointer to initialization data structure
1373:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1374:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1375:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1376:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1377:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC global module with the associated configuration structure pointed by \a con
1378:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * enables the global access to registers by configuring reset and clock un-gating for selected dev
1379:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * initializes global class, boundary , result resources by setting GLOBICLASS,GLOBBOUND,GLOBRCR re
1380:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * configures the global analog and digital clock dividers by setting GLOBCFG register. Refer relat
1381:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * the configurations later in the program.
1382:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1383:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1384:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_ClockInit()<BR>
1385:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1386:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *conf
1387:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1388:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1389:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1390:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1391:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1392:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1393:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1394:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1395:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module clock.\n\n Call this API before any further configuration of VADC. It se
1396:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * register to enable.
1397:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1398:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1399:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1400:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1401:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1402:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1403:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
1404:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Enable:Wrong Module Pointer", (global_ptr == VADC))
1405:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_DISR_Msk);
1406:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
1407:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1408:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1409:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1410:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1411:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1412:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1413:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1414:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1415:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module clock.\n\n After this API call, no conversion will occur. Call
1416:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModuleClock() to enable the VADC module later in the program.
1417:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1418:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1419:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1420:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1421:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1422:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1423:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
1424:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Disable:Wrong Module Pointer", (global_ptr == VADC))
1425:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_DISR_Pos);
1426:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
1427:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1428:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1429:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1430:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1431:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1432:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1433:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1434:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1435:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables VADC module to sleep if a sleep request comes.\n\n
1436:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * It resets the EDIS bit of CLC register for enabling the sleep mode.
1437:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1438:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1439:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableSleepMode().
1440:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1441:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1442:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
1443:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1444:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_EDIS_Msk);
1445:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
1446:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1447:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1448:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1449:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1450:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1451:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1452:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1453:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1454:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Ignores the sleep mode request for the VADC.\n\n
1455:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * With the sleep feature enabled, the module will respond to sleep
1456:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * requests by going into a low power mode. It resets the EDIS bit of CLC register for enabling the
1457:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1458:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1459:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableSleepMode().
1460:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1461:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1462:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
1463:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1464:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_EDIS_Pos);
1465:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
1466:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1467:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1468:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1469:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1470:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1471:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to the data structure containing clock configuration data
1472:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1473:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1474:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1475:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1476:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the VADC clock.<BR>\n
1477:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the clock configuration of the VADC module using the config structure pointed by \a conf
1478:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * The clock to the analog converter and to the request source arbiter is configured by setting the
1479:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1480:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1481:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1482:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1483:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1484:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClockInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_
1485:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
1486:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClockInit:Wrong Module Pointer", (global_ptr == VADC))
1487:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1488:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Write the Clock configuration into the GLOBCFG register */
1489:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG = (uint32_t)(config->globcfg | (VADC_GLOBCFG_DIVWC_Msk));
1490:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
1491:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1492:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1493:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1494:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1495:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1496:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Conversion class parameter structure
1497:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_type configure the input call for either standard conversion or EMUX related convers
1498:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
1499:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                Range: [0x0, 0x1]
1500:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1501:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1502:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the ADC conversion settings like sample time and resolution.<BR>\n
1503:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc global resource associated with \a config structure. It
1504:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
1505:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * the GLOBALICLASS register specified by \a set_num with the required settings.
1506:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1507:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1508:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1509:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1510:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1511:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1512:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1513:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLAS
1514:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
1515:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1516:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1517:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1518:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC global module
1519:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to result configuration data structure
1520:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1521:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1522:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1523:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1524:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes global result register.<BR>\n
1525:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes Global Result Register with specified settings configured in the \a config structure
1526:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * results in configuration of GLOBRCR register. This helps in configuring the Data reduction mode,
1527:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * , wait for read mode on the GLOBRES register.
1528:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1529:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1530:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1531:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1532:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1533:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1534:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1535:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_ResultInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
1536:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1537:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ResultInit:Wrong Module Pointer", (global_ptr == VADC))
1538:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1539:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Configure GLOBRCR*/
1540:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBRCR = config->g_rcr;
1541:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1542:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  
1543:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1544:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1545:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1546:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1547:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1548:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1549:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1550:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of G
1551:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * enable the startup calibration feature. After turning it on, it loops until all active groups fi
1552:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call XMC_VADC_GLOBAL_Enable() and XMC_VADC_GLOBAL_ClockInit() before calling this API in sequenc
1553:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableStartupCalibration() can disable the calibration feature at runtime.
1554:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1555:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1556:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1557:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1558:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1559:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1560:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr);
1561:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1562:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1563:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1564:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1565:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr  Constant pointer to the VADC module.
1566:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1567:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1568:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1569:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1570:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of 
1571:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * disable the startup calibration feature. Calling the API XMC_VADC_GLOBAL_EnsableStartupCalibrati
1572:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * calibration feature at runtime.
1573:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1574:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1575:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1576:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1577:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1578:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableStartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
1579:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
1580:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableStartupCalibration:Wrong Module Pointer", (global_ptr == VADC)
1581:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= ~((uint32_t)VADC_GLOBCFG_SUCAL_Msk);
1582:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
1583:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1584:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1585:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1586:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1587:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1588:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be disabled. <BR>
1589:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1590:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1591:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1592:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1593:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1594:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the post calibration for a particular group specified as \a group_number.\n\n It config
1595:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * of GLOBCFG register to disable the post calibration feature. Call XMC_VADC_GLOBAL_Enable() and
1596:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit() before calling this API in sequence. Calling the API
1597:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnablePostCalibration() can enable back the calibration feature at runtime.
1598:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1599:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1600:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1601:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1602:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1603:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1604:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1605:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1606:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, ui
1607:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
1608:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1609:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1610:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_numbe
1611:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
1612:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1613:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1614:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1615:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1616:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be enabled. <BR>
1617:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1618:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1619:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1620:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1621:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1622:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the post calibration for a particular group specified as \a group_number.\n\n It configu
1623:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * of GLOBCFG register to enable the post calibration feature. Calling the API XMC_VADC_GLOBAL_Disa
1624:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * can disable the calibration feature at runtime.
1625:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1626:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1627:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1628:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1629:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1630:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uin
1631:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
1632:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1633:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1634:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= (~ (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_nu
1635:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
1636:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1637:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1638:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
1639:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1640:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1641:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1642:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>Range[0 - 4095]
1643:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>Range[0 - 4095]
1644:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1645:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1646:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1647:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1648:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
1649:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * absolute boundaries. They define a range against which the result of a conversion can be compare
1650:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
1651:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
1652:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * GLOBBOUND1 who will derive their values from this palette.
1653:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1654:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1655:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1656:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1657:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1658:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetBoundaries(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t boundary0, c
1659:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1660:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1661:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1662:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1663:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
1664:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_value  Boundary Value<BR>Range[0 - 4095]
1665:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1666:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1667:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1668:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1669:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs either the boundary 0 or boundary 1 for result comparison.\n\n This defines a range aga
1670:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
1671:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * capability to a compare value.
1672:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1673:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1674:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1675:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1676:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1677:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetIndividualBoundary(XMC_VADC_GLOBAL_t *const global_ptr,
1678:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                            const XMC_VADC_CHANNEL_BOUNDARY_t selection,
1679:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                            const uint16_t boundary_value); 
1680:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1681:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1682:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_AVAILABLE== 1U)
1683:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1684:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1685:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module
1686:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param emuxif       The EMUX interface<BR>Range[0x0 - 0x1]
1687:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group        The VADC group which must be bound to the desired emux
1688:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1689:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1690:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1691:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1692:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Binds a VADC \a group to an EMUX interface specified in \a emuxif.<BR>\n
1693:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects which group's scan request source will control the EMUX interface (set of control select
1694:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * By passing \b group it would configure that group's scan request source to control the EMUX sele
1695:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \b emuxif.
1696:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1697:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1698:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1699:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1700:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BindGroupToEMux(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t emuxif, co
1701:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1702:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1703:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1704:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1705:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1706:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1707:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return uint32_t Complete global result register value GLOBRES
1708:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1709:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1710:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Retrieves the complete result from the global result register associated with the \a global_ptr.
1711:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result register GLOBRES for the validity of the data. If the validity is assured, data is fi
1712:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * the global result register, cached locally next and subsequently returned to the caller.
1713:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1714:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1715:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetResult()
1716:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1717:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GLOBAL_GetDetailedResult(XMC_VADC_GLOBAL_t *const global_ptr)
1718:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
1719:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetDetailedResult:Wrong Module Pointer", (global_ptr == VADC))
1720:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1721:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  return(global_ptr->GLOBRES);
1722:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
1723:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1724:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1725:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1726:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1727:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1728:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return XMC_VADC_RESULT_SIZE_t 16 bit result register value.<BR>
1729:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *         Range[0x0 - 0X0FFF]
1730:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1731:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1732:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Retrieves the conversion result from the global result register associated with the \a global_pt
1733:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * lightweight version of XMC_VADC_GLOBAL_GetDetailedResult(). The behavior is exactly the same, ju
1734:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * only the 16 bit numeric result returned back to the application instead of the complete GLOBRES 
1735:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1736:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1737:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetDetailedResult()
1738:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1739:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GLOBAL_GetResult(XMC_VADC_GLOBAL_t *const global_pt
1740:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
1741:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetResult:Wrong Module Pointer", (global_ptr == VADC))
1742:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1743:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((XMC_VADC_RESULT_SIZE_t)global_ptr->GLOBRES);
1744:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
1745:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1746:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1747:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1748:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1749:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param compare_val Compare value which the result of a conversion will be compared against.
1750:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *         <BR>Range[0x0 - 0X0FFF]
1751:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1752:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1753:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1754:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1755:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set compare value in the global result register for fast compare mode.\n\n The result of a conve
1756:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * be compared to the compare value entered as part of \a compare_val. The prerequisite is that the
1757:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * with this global register must select an ICLASS which has the conversion mode configured as fast
1758:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @ref XMC_VADC_GLOBAL_GetCompareResult() after this API to
1759:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1760:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1761:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1762:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1763:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetCompareValue(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_SIZ
1764:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1765:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1766:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1767:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1768:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return compare high or low. Refer @ref XMC_VADC_FAST_COMPARE_t enum
1769:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1770:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1771:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1772:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1773:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines the result of fast compare operation.\n\n This API returns the result of fast compare
1774:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * the valid flag in the global result register GLOBRES is set.
1775:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1776:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1777:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1778:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1779:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GLOBAL_GetCompareResult(XMC_VADC_GLOBAL_t *const global_ptr);
1780:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1781:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1782:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1783:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr         Constant pointer to the VADC module
1784:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param event_type   Desired event that must be manually asserted
1785:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1786:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1787:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1788:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1789:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts an event that can lead to an interrupt.\n\n This API manually asserts the reque
1790:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * (Background request source event or a global result event) by setting the GLOBEVFLAG register wi
1791:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \a event_type.
1792:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1793:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1794:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1795:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1796:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1797:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_TriggerEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32
1798:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
1799:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Module Pointer", (global_ptr == VADC))
1800:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Global Event", 
1801:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****             ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT == 
1802:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1803:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG = event_type;
1804:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
1805:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1806:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1807:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1808:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1809:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param event_type Event that must be acknowledged
1810:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1811:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1812:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1813:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1814:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1815:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges an event that has been asserted manually or automatically.\n\n This API acknowledge
1816:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * by clearing GLOBEFLAG sticky flag.
1817:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1818:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1819:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1820:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1821:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClearEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t
1822:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
1823:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Module Pointer", (global_ptr == VADC))
1824:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Global Event", 
1825:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****             ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT == 
1826:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1827:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG = ((uint32_t)(event_type << (uint32_t)16));
1828:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
1829:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1830:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1831:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1832:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1833:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr The service request to which the global result event is connected. Refer @ref XMC_VADC
1834:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1835:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1836:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1837:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1838:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Binds the global result event to one of the 4 shared service requests.\n\n This API binds the g
1839:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  to one of the 4 module wide shared service requests .Sets GLOBEVNP register with the correspond
1840:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1841:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1842:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode()
1843:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1844:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t
1845:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1846:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1847:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1848:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1849:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr The service request to which the global request source event is connected. Refer @ref 
1850:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1851:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1852:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1853:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1854:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Binds the background request source event to one of the 4 shared service requests.\n\n This API 
1855:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source event to one of the 4 module wide shared service requests. Sets GLOBEVNP register
1856:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * corresponding \a sr line.
1857:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1858:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1859:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SetResultEventInterruptNode()
1860:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1861:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC
1862:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1863:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1864:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1865:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1866:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  config Struct consisting of various SHS related configurations.
1867:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1868:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1869:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1870:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1871:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the basic SHS parameters.<BR>\n
1872:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the clock divider configuration, the analog reference selection and
1873:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * the calibration order for the Sample and Hold unit.
1874:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1875:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1876:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1877:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1878:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  void XMC_VADC_GLOBAL_SHS_Init(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, const XMC_VADC_GLOBAL_SHS_CONF
1879:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1880:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1881:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  /**
1882:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param shs_ptr Constant pointer to the VADC Sample and hold module
1883:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param  config Struct consisting of various step configurations.
1884:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1885:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return None
1886:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1887:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Description:</b><br>
1888:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   * Configures the stepper sequence for the converter.<BR>\n
1889:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   * Stepper of the SHS can be configured to take up a specific sequence of groups for conversion.
1890:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   * The stepper sequence is configured using this API.
1891:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1892:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><BR>
1893:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   * None.
1894:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   */
1895:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetStepperSequence(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1896:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                              const XMC_VADC_GLOBAL_SHS_STEP_CONFIG_
1897:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1898:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
1899:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1900:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong config pointer",
1901:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****              (config == (XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t*)NULL))
1902:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1903:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->STEPCFG = (uint32_t) config->stepcfg;
1904:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1905:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1906:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1907:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  /**
1908:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param shs_ptr Constant pointer to the VADC Sample and hold module
1909:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1910:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return bool returns true if the analog converter is operable
1911:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   *              returns false if the analog converter is powered down
1912:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1913:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Description:</b><br>
1914:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   * Returns the converter status.<BR>\n
1915:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   * Returns the ANRDY bit field of the SHSCFG register.
1916:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1917:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><BR>
1918:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   * None.
1919:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   */
1920:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE bool XMC_VADC_GLOBAL_SHS_IsConverterReady(XMC_VADC_GLOBAL_SHS_t *const shs_ptr)
1921:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1922:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_IsConverterReady:Wrong SHS Pointer",(shs_ptr == (XMC_VADC_GLOBAL_
1923:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1924:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   return((bool)((shs_ptr->SHSCFG >> (uint32_t)SHS_SHSCFG_ANRDY_Pos) & (uint32_t)0x1));
1925:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1926:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1927:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1928:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1929:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1930:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
1931:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1932:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1933:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1934:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1935:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
1936:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
1937:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * this mode the ADC module will convert the input depending on the value stored in the SST bit of 
1938:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would configure the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
1939:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1940:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1941:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1942:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1943:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,XMC_VADC_GROUP_
1944:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1945:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1946:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1947:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be disabled.<BR>Range: [0x
1948:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1949:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1950:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1951:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1952:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
1953:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from accelerated mode to compatible mode of conversion is neede
1954:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would clear the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
1955:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1956:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1957:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1958:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1959:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,XMC_VADC_GROUP
1960:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1961:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1962:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1963:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
1964:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sst_value Value of short sample time that needs to be configured.<BR>
1965:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                  Range: [0x0 to 0x3F]
1966:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1967:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1968:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1969:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1970:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the Accelerated timing mode sample time.<BR>\n
1971:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
1972:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Accelerated mode the ADC module will convert the input depending on the value stored in the SST 
1973:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  SHS0_TIMCFGx. This API would configure the shot sample time either in SHS0_TIMCFG0.SST or SHS0_
1974:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1975:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1976:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1977:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1978:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetShortSampleTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1979:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                             XMC_VADC_GROUP_INDEX_t group_num,
1980:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                             uint8_t sst_value);
1981:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
1982:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1983:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1984:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1985:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  divs_value The clock divider value that is possible
1986:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    <BR>Range:[0x0 to 0xF]
1987:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1988:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1989:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1990:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure Sample and hold clock divider value.<BR>\n
1991:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the clock divider configuration. This determines the frequency of conversio
1992:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * of the Sample and hold converter.
1993:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1994:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1995:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1996:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1997:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetClockDivider(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, uint
1998:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
1999:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong SHS Pointer",
2000:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2001:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong divide factor selected",
2002:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****              (divs_value < (uint32_t)0x10))
2003:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2004:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG =  (shs_ptr->SHSCFG & (~(uint32_t)SHS_SHSCFG_DIVS_Msk)) | (uint32_t)SHS_SHSCFG_SC
2005:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG |=  ((uint32_t)divs_value << SHS_SHSCFG_DIVS_Pos) | (uint32_t)SHS_SHSCFG_SCWC_Msk
2006:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
2007:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2008:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2009:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2010:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_value gain value possible
2011:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Range:[0x0 to 0x3]
2012:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2013:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  ch_num The channel number for which the gain has to be configured
2014:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2015:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2016:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2017:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the gain value for SHS.<BR>\n
2018:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would set the gain factor for a selected channel.
2019:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2020:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2021:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2022:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2023:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetGainFactor(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2024:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                        uint8_t gain_value,
2025:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                        XMC_VADC_GROUP_INDEX_t group_num,
2026:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                        uint8_t ch_num);
2027:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2028:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
2029:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2030:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2031:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  max_calibration_time calibration time
2032:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                              Range:[0x0 to 0x3F]
2033:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2034:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2035:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2036:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the Maximum calibration timing.<BR>\n
2037:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the Maximum time after which the calibration should occur. If no adc conver
2038:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * occur during this duration then the calibration would run irrespective of conversions. The max t
2039:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter can go without a calibration is set in this API.
2040:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2041:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2042:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2043:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2044:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetMaxCalTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2045:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                        uint32_t max_calibration_time)
2046:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
2047:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetMaxCalTime:Wrong SHS Pointer",
2048:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2049:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2050:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->CALCTR &= ~((uint32_t)SHS_CALCTR_CALMAX_Msk);
2051:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->CALCTR |=  ((uint32_t)max_calibration_time << SHS_CALCTR_CALMAX_Pos);
2052:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
2053:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2054:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2055:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2056:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2057:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2058:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2059:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2060:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2061:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the Gain and offset calibration.<BR>\n
2062:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the gain and offset calibration for all the Sample and hold units.
2063:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2064:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2065:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations()<BR>.
2066:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2067:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2068:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          XMC_VADC_GROUP_INDEX_t group_num);
2069:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2070:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2071:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2072:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2073:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2074:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2075:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2076:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the Gain and offset calibration.<BR>\n
2077:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the gain and offset calibration for all the Sample and hold units.
2078:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2079:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2080:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2081:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2082:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2083:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                           XMC_VADC_GROUP_INDEX_t group_num);
2084:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2085:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2086:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2087:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2088:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2089:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2090:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2091:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2092:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Read the calibration value for the selected gain level.<BR>\n
2093:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would return the offset calibration val
2094:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * selected gain level. This is applicable for all the channels in the group that use the particula
2095:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2096:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2097:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue()<BR>.
2098:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2099:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** uint8_t XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2100:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_GROUP_INDEX_t group_num,
2101:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_SHS_GAIN_LEVEL_t gain_level);
2102:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2103:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2104:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2105:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2106:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2107:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  offset_calibration_value The offset calibration value to be set.
2108:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2109:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2110:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2111:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set the calibration value for the selected gain level.<BR>\n
2112:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would set the offset value of the selec
2113:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2114:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2115:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue()<BR>.
2116:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2117:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2118:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    XMC_VADC_GROUP_INDEX_t group_num,
2119:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    XMC_VADC_SHS_GAIN_LEVEL_t gain_level,
2120:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    uint8_t offset_calibration_value);
2121:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2122:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2123:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2124:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2125:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2126:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2127:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  ch_num Channel number for which the configurations applies
2128:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2129:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2130:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2131:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the delta sigma loop of the SHS.<BR>\n
2132:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * There are 2 Delta-Sigma loops that can be configured. This API would configure the loop (loop_se
2133:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * with the appropriate group_num and channel_num.
2134:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP bit fields.
2135:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2136:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2137:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop()<BR>.
2138:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2139:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2140:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                            XMC_VADC_GROUP_INDEX_t group_num,
2141:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                            XMC_VADC_SHS_LOOP_CH_t loop_select,
2142:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                            uint8_t ch_num);
2143:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2144:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2145:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2146:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2147:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2148:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2149:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2150:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the selected Delta-Sigma loop.<BR>\n
2151:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2152:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2153:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2154:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2155:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2156:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2157:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2158:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               XMC_VADC_SHS_LOOP_CH_t loop_select)
2159:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
2160:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong SHS Pointer",
2161:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2162:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2163:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
2164:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2165:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->LOOP |= (uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select;
2166:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
2167:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2168:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2169:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2170:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2171:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2172:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2173:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2174:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the selected delta sigma loop.<BR>\n
2175:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2176:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2177:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2178:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2179:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2180:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2181:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr
2182:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                XMC_VADC_SHS_LOOP_CH_t loop_select)
2183:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
2184:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong SHS Pointer",
2185:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2186:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2187:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
2188:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2189:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->LOOP &= ~((uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select);
2190:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2191:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
2192:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2193:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2194:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
2195:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2196:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2197:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the VADC group.
2198:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config Pointer to the initialization data structure
2199:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2200:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2201:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2202:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2203:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC group module with the associated configuration structure pointed by \a conf
2204:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * initializes the group specified as part of the \a group_ptr. It initializes group conversion cla
2205:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * configuration , boundary configuration by setting GxICLASS,GxARBCFG,GxBOUND, registers. It also
2206:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * configures the EMUX control register if applicable. Refer related API's to change the configurat
2207:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  program.
2208:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2209:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2210:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_InputClassInit()<BR>
2211:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_SetPowerMode()<BR>
2212:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_SetBoundaries()<BR>
2213:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ExternalMuxControlInit()<BR>
2214:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2215:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_Init(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config);
2216:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2217:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2218:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2219:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group.
2220:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  group related conversion class parameter structure
2221:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_type Use direct channels or EMUX channels. Refer @ref XMC_VADC_GROUP_CONV_t enum
2222:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
2223:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                Range[0x0, 0x1]
2224:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2225:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2226:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2227:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2228:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc group resource associated with \a config structure. It 
2229:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
2230:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * the G_ICLASS register specified by \a set_num with the required settings.
2231:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2232:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2233:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2234:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_Init()
2235:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2236:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2237:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t 
2238:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                    const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num);
2239:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2240:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2241:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2242:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC Group which must be set as a slave
2243:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param master_grp The master group number<BR>
2244:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2245:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group The slave group number<BR>
2246:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2247:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2248:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2249:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2250:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2251:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures a VADC Group as a slave group.\n\n Conversion of identically numbered channels across
2252:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2253:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is the
2254:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * master group while Groups-0 and 3 are the slave groups. It uses the SYNCCTR register for the con
2255:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2256:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2257:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_SetSyncMaster()<BR>
2258:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR>
2259:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_EnableChannelSyncRequest()<BR>
2260:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2261:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2262:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t s
2263:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2264:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2265:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2266:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC Group.
2267:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param power_mode  Desired power mode
2268:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2269:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2270:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2271:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2272:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the power mode of a VADC group.\n\n For a VADC group to actually convert an analog si
2273:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter must be turned on.
2274:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2275:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2276:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2277:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2278:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_
2279:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2280:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2281:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2282:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2283:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2284:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2285:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2286:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2287:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures a VADC Group as a master group.<BR>\n
2288:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Conversion of identically numbered channels across groups can be
2289:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2290:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is therefore the mast
2291:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Groups-0 and 3 are the slave groups.
2292:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2293:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2294:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2295:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2296:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr);
2297:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2298:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2299:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2300:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2301:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2302:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     <BR>Range: [0x0 to 0x3]
2303:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2304:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2305:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2306:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the ready signal for master group.<BR>\n
2307:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would read the \b slave_group number and determine which EVAL configuration to apply fo
2308:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * slave set. Checks the readiness of slaves in synchronized conversions. Conversion of identically
2309:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * across groups can be synchronized. For example, when the trigger to convert CH-1 of Group-2 is r
2310:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * possible to simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this ex
2311:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * therefore the master group while Groups-0 and 3 are the slave groups. Before the master can requ
2312:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * for synchronized conversion, it has the option of checking the readiness of the slaves.
2313:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2314:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2315:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()
2316:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2317:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2318:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2319:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2320:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2321:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the master VADC Group
2322:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2323:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2324:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2325:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2326:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Clears the ready signal for master group.<BR>\n
2327:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Ignores the readiness of slaves in synchronized conversions.This API would read the \b slave_gro
2328:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * determine which EVAL configuration to apply for the given master slave set. Then clears the conf
2329:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is called when the master should issue the conversion request without waiting for the s
2330:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * assert a ready signal. The ready signal is asserted by the slave group(s) when the conversion is
2331:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * in these channels.
2332:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2333:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2334:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()<BR>
2335:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2336:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_IgnoreSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2337:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2338:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2339:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2340:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group waiting for ready signal
2341:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param eval_waiting_group  The VADC Group which expects a ready signal to start it's conversion.
2342:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param eval_origin_group  The VADC Group from which the eval_waiting_group will expect a ready s
2343:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2344:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2345:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2346:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets the ready signal in the eval_waiting_group .<BR>\n
2347:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion all the slaves participating need to configure the ready signal.
2348:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A slave group will also need to configure the ready signals coming from the other slave groups.
2349:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the Sync.slave's EVAL Bits (GxSYNCTR.EVALy).
2350:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2351:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2352:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2353:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2354:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncSlaveReadySignal(XMC_VADC_GROUP_t *const group_ptr,
2355:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                             uint32_t eval_waiting_group,
2356:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                             uint32_t eval_origin_group);
2357:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2358:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2359:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2360:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group
2361:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2362:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *         uint32_t EVAL bits for the group
2363:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2364:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2365:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Get the Eval bits of the group.<BR>\n
2366:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion the master's ready signal configuration must be copied onto the slav
2367:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would return the Sync EVAL Bits (GxSYNCTR.EVALy) which can be used to set in 
2368:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2369:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2370:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2371:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2372:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetSyncReadySignal(XMC_VADC_GROUP_t *const group_ptr)
2373:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
2374:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t eval_mask;
2375:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetSyncReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
2376:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2377:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
2378:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk | VADC_G_SYNCTR_EVALR2_Msk | VADC_G_SYNCTR_EVALR3_Msk;
2379:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #else
2380:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk;
2381:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2382:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   return( group_ptr->SYNCTR & eval_mask);
2383:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
2384:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2385:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2386:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group
2387:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param eval_mask  mask to configure the eval bits
2388:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Use XMC_VADC_SYNCTR_EVAL_t to create the mask.
2389:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2390:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2391:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2392:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set the Eval bits of the group.<BR>\n
2393:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion the master's ready signal configuration must be copied onto the slav
2394:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the Sync EVAL Bits (GxSYNCTR.EVALy).
2395:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2396:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2397:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2398:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2399:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_SetSyncReadySignal(XMC_VADC_GROUP_t *const group_ptr, uint32_t 
2400:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
2401:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t eval_mask;
2402:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
2403:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2404:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
2405:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk | VADC_G_SYNCTR_EVALR2_Msk | VADC_G_SYNCTR_EVALR3_Msk;
2406:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #else
2407:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk;
2408:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2409:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SYNCTR &= ~(eval_mask);
2410:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SYNCTR |= mask;
2411:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
2412:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2413:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2414:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2415:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the master VADC Group
2416:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num  Channel whose conversion triggers conversion in slave groups
2417:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2418:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2419:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2420:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up a channel for synchronized conversion.\n\n Conversion of identically numbered channels a
2421:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * can be synchronized. For example, when the trigger to
2422:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * convert CH-1 of Group-2 is received, it is possible to simultaneously request conversion of CH-1
2423:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Group-3. Group-2 in this example is therefore the master group while Groups-0 and 3 are the slav
2424:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Before the master can request its slaves for synchronized conversion, it has the option of check
2425:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * of the slaves.
2426:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2427:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2428:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2429:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2430:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_EnableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
2431:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2432:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2433:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2434:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2435:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     Channel whose conversion triggers conversion in slave groups
2436:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2437:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2438:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2439:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the synchronization request for the particular channel specified as ch_num. To enable th
2440:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * call the API @ref XMC_VADC_GROUP_EnableChannelSyncRequest().
2441:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2442:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2443:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2444:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2445:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_DisableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_
2446:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2447:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2448:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2449:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2450:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2451:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return retuns IDLE if converter is free else returns busy. Refer @ref XMC_VADC_GROUP_STATE_t en
2452:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2453:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2454:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Checks the live status of the analog to digital converter. The converter can either idle doing n
2455:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * sampling + converting.
2456:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2457:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2458:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2459:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2460:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** XMC_VADC_GROUP_STATE_t XMC_VADC_GROUP_IsConverterBusy(XMC_VADC_GROUP_t *const group_ptr);
2461:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2462:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2463:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2464:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group whose global boundary registers are to be pr
2465:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>
2466:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2467:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>
2468:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2469:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2470:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2471:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2472:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2473:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
2474:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * absolute boundaries. They defines a range against which the result of a conversion can be compar
2475:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
2476:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
2477:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * G_BOUND1 who will derive their values from this palette.
2478:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2479:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2480:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2481:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2482:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2483:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaries(XMC_VADC_GROUP_t *const group_ptr, 
2484:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                   const uint32_t boundary0, 
2485:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                   const uint32_t boundary1);
2486:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2487:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2488:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2489:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
2490:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_value Select the boundary value.
2491:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2492:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2493:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2494:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2495:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundary with \a boundary_value for result comparison.\n\n This defines a range aga
2496:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
2497:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * capability to a compare value.
2498:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2499:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2500:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2501:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2502:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetIndividualBoundary(XMC_VADC_GROUP_t *const group_ptr,
2503:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_CHANNEL_BOUNDARY_t selection,
2504:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const uint16_t boundary_value); 
2505:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2506:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2507:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2508:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr_num   The service request number (0 through 3)
2509:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param type     IRQ type (Kernel specific interrupt vs Module wide shared interrupt )
2510:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2511:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2512:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2513:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Activates a Service Request line(manually trigger).<BR>\n
2514:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * VADC provides few SR lines for each group and a few more which is shared across all the groups.
2515:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * These SR lines can be connected to an NVIC node which in-turn would generate an interrupt.
2516:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would manually trigger the given SR line. Could be used for evaluation and testing purp
2517:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2518:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2519:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2520:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2521:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_TriggerServiceRequest(XMC_VADC_GROUP_t *const group_ptr, 
2522:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const uint32_t sr_num, 
2523:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_GROUP_IRQ_t type);
2524:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2525:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2526:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2527:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group
2528:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param emux_cfg   EMUX configuration structure
2529:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2530:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2531:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2532:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures group EMUX parameters associated with the \a emux_cfg configuration structure.\n\n An
2533:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * interface allows additional channels to be connected to a VADC group. The conversion properties
2534:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * of such channels can be different from the standard channels which are directly connected to the
2535:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API configures conversion properties of channels connected via EMUX interface.
2536:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2537:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2538:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2539:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2540:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
2541:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                            const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
2542:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
  27              	 .loc 1 2542 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 85B0     	 sub sp,sp,#20
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 24
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 3960     	 str r1,[r7]
2543:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t   emux_config;
2544:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2545:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
2546:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2547:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_P
  44              	 .loc 1 2547 0
  45 000a 3B78     	 ldrb r3,[r7]
  46 000c C3F30203 	 ubfx r3,r3,#0,#3
  47 0010 DBB2     	 uxtb r3,r3
  48 0012 1A46     	 mov r2,r3
2548:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****               ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
  49              	 .loc 1 2548 0
  50 0014 BB78     	 ldrb r3,[r7,#2]
  51 0016 C3F30403 	 ubfx r3,r3,#0,#5
  52 001a DBB2     	 uxtb r3,r3
  53 001c 1B04     	 lsls r3,r3,#16
2547:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****               ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
  54              	 .loc 1 2547 0
  55 001e 1343     	 orrs r3,r3,r2
  56 0020 FB60     	 str r3,[r7,#12]
2549:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2550:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->EMUXCTR  = emux_config;
  57              	 .loc 1 2550 0
  58 0022 7B68     	 ldr r3,[r7,#4]
  59 0024 FA68     	 ldr r2,[r7,#12]
  60 0026 C3F8F021 	 str r2,[r3,#496]
2551:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
  61              	 .loc 1 2551 0
  62 002a FB78     	 ldrb r3,[r7,#3]
  63 002c C3F30013 	 ubfx r3,r3,#4,#1
  64 0030 DBB2     	 uxtb r3,r3
  65 0032 1A07     	 lsls r2,r3,#28
2552:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
  66              	 .loc 1 2552 0
  67 0034 FB78     	 ldrb r3,[r7,#3]
  68 0036 C3F38103 	 ubfx r3,r3,#2,#2
  69 003a DBB2     	 uxtb r3,r3
  70 003c 9B06     	 lsls r3,r3,#26
2551:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
  71              	 .loc 1 2551 0
  72 003e 1A43     	 orrs r2,r2,r3
2553:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
  73              	 .loc 1 2553 0
  74 0040 FB78     	 ldrb r3,[r7,#3]
  75 0042 C3F34013 	 ubfx r3,r3,#5,#1
  76 0046 DBB2     	 uxtb r3,r3
  77 0048 5B07     	 lsls r3,r3,#29
2551:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
  78              	 .loc 1 2551 0
  79 004a 1343     	 orrs r3,r3,r2
  80 004c FB60     	 str r3,[r7,#12]
2554:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2555:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
2556:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_P
2557:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2558:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
  81              	 .loc 1 2558 0
  82 004e 7B68     	 ldr r3,[r7,#4]
  83 0050 D3F8F021 	 ldr r2,[r3,#496]
  84 0054 FB68     	 ldr r3,[r7,#12]
  85 0056 1343     	 orrs r3,r3,r2
  86 0058 43F00042 	 orr r2,r3,#-2147483648
  87 005c 7B68     	 ldr r3,[r7,#4]
  88 005e C3F8F021 	 str r2,[r3,#496]
2559:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
  89              	 .loc 1 2559 0
  90 0062 1437     	 adds r7,r7,#20
  91              	.LCFI3:
  92              	 .cfi_def_cfa_offset 4
  93 0064 BD46     	 mov sp,r7
  94              	.LCFI4:
  95              	 .cfi_def_cfa_register 13
  96              	 
  97 0066 5DF8047B 	 ldr r7,[sp],#4
  98              	.LCFI5:
  99              	 .cfi_restore 7
 100              	 .cfi_def_cfa_offset 0
 101 006a 7047     	 bx lr
 102              	 .cfi_endproc
 103              	.LFE178:
 105              	 .section .text.XMC_VADC_GROUP_ScanEnableArbitrationSlot,"ax",%progbits
 106              	 .align 2
 107              	 .thumb
 108              	 .thumb_func
 110              	XMC_VADC_GROUP_ScanEnableArbitrationSlot:
 111              	.LFB181:
2560:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2561:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if XMC_VADC_BOUNDARY_FLAG_SELECT == 1U
2562:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2563:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2564:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2565:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_flag_num The Boundary flag for which the interrupt node needs to be configured.
2566:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                          Range: [0x0 to 0x3]
2567:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param node    Service Request node Id
2568:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2569:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2570:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2571:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2572:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Connects the boundary event to the SR line of VADC or to a common boundary flag.<BR>\n
2573:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a boundary event. Hence to get a interrupt o
2574:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
2575:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * field GxBFLNP.BFLxNP.
2576:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2577:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2578:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2579:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2580:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaryEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
2581:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                   const uint8_t boundary_flag_num,
2582:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                   const XMC_VADC_BOUNDARY_NODE_t node);
2583:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2584:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2585:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2586:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2587:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2588:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    uint32_t The complete GxALIAS register
2589:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2590:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2591:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the ALIAS values.\n The ALIAS value that is configured for Channel-0 and channel-1 are r
2592:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2593:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2594:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2595:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2596:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetAlias(XMC_VADC_GROUP_t *const group_ptr)
2597:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
2598:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetAliasWrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
2599:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   return (group_ptr->ALIAS);
2600:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
2601:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2602:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2603:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2604:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_class  conversion property to be extracted
2605:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2606:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    XMC_VADC_GROUP_CLASS_t The complete GxICLASSy register
2607:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2608:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2609:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the input class configuration values.\n
2610:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This returns the sampling time configuration and resolution configured in the appropriate group 
2611:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \b conv_class. A call to this API would return the register GxICLASSy.
2612:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2613:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2614:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2615:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2616:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_GROUP_CLASS_t XMC_VADC_GROUP_GetInputClass(XMC_VADC_GROUP_t *const group_p
2617:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                     const XMC_VADC_CHANNEL_CONV_t c
2618:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
2619:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CLASS_t input_value;
2620:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
2621:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong conv_class selected", 
2622:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****              (XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLA
2623:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2624:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   input_value.g_iclass0 = (uint32_t) 0xFFFFFFFF;
2625:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   if ((XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLASS1 == 
2626:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   {
2627:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     input_value.g_iclass0 = group_ptr->ICLASS[(uint32_t)conv_class];
2628:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   }
2629:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2630:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   return (input_value);
2631:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
2632:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2633:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2634:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GSCAN_AVAILABLE == 1U)
2635:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2636:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
2637:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to Scan configuration
2638:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2639:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2640:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2641:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC SCAN functional block.<BR>\n
2642:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * The GROUP SCAN request source functional block converts channels sequentially starting with the 
2643:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * channel to the lowest. Channels must register themselves as being part of the the scan sequence.
2644:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_ScanEnableA
2645:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
2646:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_ScanDisableArbi
2647:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxASCTRL, GxASMR needed scan request s
2648:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2649:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2650:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR> XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2651:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanSelectGating()<BR>
2652:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2653:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SCAN_CONFIG_t *confi
2654:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2655:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2656:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2657:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2658:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2659:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2660:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2661:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the scan request source.<BR>\n
2662:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2663:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2664:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot. Thus this must be enabled if any conversion need to take place.
2665:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2666:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2667:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2668:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2669:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2670:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2671:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 112              	 .loc 1 2671 0
 113              	 .cfi_startproc
 114              	 
 115              	 
 116              	 
 117 0000 80B4     	 push {r7}
 118              	.LCFI6:
 119              	 .cfi_def_cfa_offset 4
 120              	 .cfi_offset 7,-4
 121 0002 83B0     	 sub sp,sp,#12
 122              	.LCFI7:
 123              	 .cfi_def_cfa_offset 16
 124 0004 00AF     	 add r7,sp,#0
 125              	.LCFI8:
 126              	 .cfi_def_cfa_register 7
 127 0006 7860     	 str r0,[r7,#4]
2672:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2673:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN1_Msk;
 128              	 .loc 1 2673 0
 129 0008 7B68     	 ldr r3,[r7,#4]
 130 000a D3F88430 	 ldr r3,[r3,#132]
 131 000e 43F00072 	 orr r2,r3,#33554432
 132 0012 7B68     	 ldr r3,[r7,#4]
 133 0014 C3F88420 	 str r2,[r3,#132]
2674:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
 134              	 .loc 1 2674 0
 135 0018 0C37     	 adds r7,r7,#12
 136              	.LCFI9:
 137              	 .cfi_def_cfa_offset 4
 138 001a BD46     	 mov sp,r7
 139              	.LCFI10:
 140              	 .cfi_def_cfa_register 13
 141              	 
 142 001c 5DF8047B 	 ldr r7,[sp],#4
 143              	.LCFI11:
 144              	 .cfi_restore 7
 145              	 .cfi_def_cfa_offset 0
 146 0020 7047     	 bx lr
 147              	 .cfi_endproc
 148              	.LFE181:
 150 0022 00BF     	 .section .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot,"ax",%progbits
 151              	 .align 2
 152              	 .thumb
 153              	 .thumb_func
 155              	XMC_VADC_GROUP_ScanDisableArbitrationSlot:
 156              	.LFB182:
2675:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2676:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2677:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2678:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2679:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2680:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2681:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2682:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the scan request source.<BR>\n
2683:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2684:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2685:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot.A call to this API will lead to all conversions request by scan to be blocked.
2686:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2687:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2688:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2689:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR>
2690:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2691:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2692:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 157              	 .loc 1 2692 0
 158              	 .cfi_startproc
 159              	 
 160              	 
 161              	 
 162 0000 80B4     	 push {r7}
 163              	.LCFI12:
 164              	 .cfi_def_cfa_offset 4
 165              	 .cfi_offset 7,-4
 166 0002 83B0     	 sub sp,sp,#12
 167              	.LCFI13:
 168              	 .cfi_def_cfa_offset 16
 169 0004 00AF     	 add r7,sp,#0
 170              	.LCFI14:
 171              	 .cfi_def_cfa_register 7
 172 0006 7860     	 str r0,[r7,#4]
2693:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
2694:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN1_Msk);
 173              	 .loc 1 2694 0
 174 0008 7B68     	 ldr r3,[r7,#4]
 175 000a D3F88430 	 ldr r3,[r3,#132]
 176 000e 23F00072 	 bic r2,r3,#33554432
 177 0012 7B68     	 ldr r3,[r7,#4]
 178 0014 C3F88420 	 str r2,[r3,#132]
2695:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
 179              	 .loc 1 2695 0
 180 0018 0C37     	 adds r7,r7,#12
 181              	.LCFI15:
 182              	 .cfi_def_cfa_offset 4
 183 001a BD46     	 mov sp,r7
 184              	.LCFI16:
 185              	 .cfi_def_cfa_register 13
 186              	 
 187 001c 5DF8047B 	 ldr r7,[sp],#4
 188              	.LCFI17:
 189              	 .cfi_restore 7
 190              	 .cfi_def_cfa_offset 0
 191 0020 7047     	 bx lr
 192              	 .cfi_endproc
 193              	.LFE182:
 195 0022 00BF     	 .section .text.XMC_VADC_GROUP_BackgroundEnableArbitrationSlot,"ax",%progbits
 196              	 .align 2
 197              	 .thumb
 198              	 .thumb_func
 200              	XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:
 201              	.LFB198:
2696:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2697:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2698:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2699:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2700:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    bool  returns true if the arbitration is enabled else returns false.
2701:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2702:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2703:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the arbitration status of the scan request source.<BR>\n
2704:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2705:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2706:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot. A call to this API would return the status of the arbitration slot of scan.
2707:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxARBPR.ASEN1.
2708:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2709:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2710:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR
2711:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2712:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr)
2713:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
2714:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GROU
2715:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2716:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN1_Msk) >> VADC_G_ARBPR_ASEN1_Pos);
2717:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
2718:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2719:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2720:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2721:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_input  Choice of the input earmarked as a trigger line
2722:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2723:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2724:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2725:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2726:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for scan request source.<BR>\n
2727:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2728:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
2729:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2730:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
2731:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTSEL.
2732:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2733:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2734:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectGating()<BR> XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
2735:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2736:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_TRIGGER_INPUT_SEL
2737:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2738:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2739:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2740:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2741:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Trigger edge selection
2742:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2743:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2744:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2745:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2746:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the trigger edge for scan request source.<BR>\n
2747:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2748:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible trigger edges. This is
2749:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2750:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTMODE.
2751:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2752:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2753:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2754:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2755:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER
2756:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2757:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2758:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2759:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param gating_input  Module input signal meant to be selected as gating input
2760:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2761:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2762:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2763:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2764:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for scan request source.<BR>\n
2765:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
2766:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the scan request source o
2767:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxASMR.ENGT has to be config
2768:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxAS
2769:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2770:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2771:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2772:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2773:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectGating(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATE_INPUT_SELECT_
2774:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2775:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2776:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2777:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the scan request source
2778:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2779:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2780:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2781:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2782:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of scan request source.<BR>\n
2783:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
2784:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
2785:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
2786:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2787:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2788:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectGating();
2789:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2790:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_G
2791:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
2792:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2793:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMODE
2794:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2795:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
2796:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= (uint32_t) (~((uint32_t)VADC_G_ASMR_ENGT_Msk));
2797:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Set the new gating mode */
2798:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)((uint32_t)mode_sel << VADC_G_ASMR_ENGT_Pos);
2799:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
2800:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2801:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2802:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2803:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2804:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2805:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2806:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2807:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
2808:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2809:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2810:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2811:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2812:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. Every request source event will cause a load event to occur. A call to this API would 
2813:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2814:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2815:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2816:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableContinuousMode()<BR>
2817:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2818:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2819:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
2820:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
2821:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_SCAN_Msk;
2822:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
2823:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2824:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2825:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2826:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2827:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2828:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2829:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2830:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
2831:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2832:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2833:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2834:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2835:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. By invoking this feature the Autoscan mode of operations is disabled. A call to this A
2836:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2837:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2838:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2839:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableContinuousMode()<BR>
2840:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2841:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2842:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
2843:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2844:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_SCAN_Msk);
2845:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
2846:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2847:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2848:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2849:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2850:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2851:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2852:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2853:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
2854:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
2855:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the s
2856:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxASMR.LD
2857:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2858:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2859:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2860:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2861:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
2862:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
2863:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
2864:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_LDEV_Msk;
2865:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
2866:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2867:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2868:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2869:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2870:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2871:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2872:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2873:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing scan sequence conversion.<BR>\n
2874:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
2875:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
2876:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
2877:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxASMR, GxASCTRL, GxARBPR to achieve the sequen
2878:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2879:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2880:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2881:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2882:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSequenceAbort(XMC_VADC_GROUP_t *const group_ptr);
2883:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2884:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2885:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2886:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel meant to be added to scan sequence
2887:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
2888:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2889:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2890:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2891:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2892:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds a channel to the scan sequence.<BR>\n
2893:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the scan request source. This will be added to
2894:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
2895:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
2896:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2897:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2898:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddMultipleChannels()<BR>
2899:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2900:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddChannelToSequence(XMC_VADC_GROUP_t *const group_ptr, con
2901:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
2902:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("VADC_GSCAN_AddSingleChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
2903:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddChannelToSequence:Wrong Channel Number", 
2904:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
2905:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASSEL |= (uint32_t)((uint32_t)1 << ch_num);
2906:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
2907:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2908:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2909:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2910:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
2911:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
2912:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
2913:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the selected channels
2914:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
2915:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2916:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2917:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2918:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2919:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
2920:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
2921:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
2922:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
2923:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2924:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2925:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddChannelToSequence()<BR>
2926:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2927:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddMultipleChannels(XMC_VADC_GROUP_t *const group_ptr, cons
2928:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
2929:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddMultipleChannels:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR
2930:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASSEL = ch_mask;
2931:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
2932:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2933:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2934:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2935:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
2936:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
2937:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2938:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
2939:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2940:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2941:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determine if the channel is pending for conversion.<BR>\n
2942:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
2943:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
2944:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
2945:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the channel is found in the pending register (GxASPND).
2946:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2947:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2948:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanGetNumChannelsPending()<BR>
2949:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2950:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanIsChannelPending(XMC_VADC_GROUP_t *const group_ptr, const u
2951:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
2952:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2953:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
2954:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_C
2955:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2956:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   return( (bool)((uint32_t)(group_ptr->ASPND >> ch_num) & 1U));
2957:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
2958:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2959:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2960:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_ptr     Constant pointer to the VADC group
2961:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return  <BR>
2962:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
2963:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *              <BR>Range: [0x0 to 0x8]
2964:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2965:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2966:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the total number of pending channels.<BR>\n
2967:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
2968:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
2969:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
2970:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * return the total number of channels pending (GxASPND).
2971:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2972:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2973:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanIsChannelPending()<BR>
2974:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2975:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GROUP_ScanGetNumChannelsPending(XMC_VADC_GROUP_t *const group_ptr);
2976:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2977:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2978:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2979:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2980:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2981:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2982:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2983:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
2984:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will set the request source event for scan. This will trigger a interrupt if the
2985:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
2986:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
2987:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2988:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2989:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2990:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2991:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
2992:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
2993:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
2994:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFLAG    |= (uint32_t)VADC_G_SEFLAG_SEV1_Msk;
2995:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
2996:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
2997:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2998:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2999:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3000:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3001:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3002:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3003:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges the scan conversion complete request source event.<BR>\n
3004:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
3005:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
3006:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3007:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3008:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanTriggerReqSrcEvent()<BR>
3009:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3010:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanClearReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
3011:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
3012:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanClearReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
3013:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFCLR |= (uint32_t)VADC_G_SEFCLR_SEV1_Msk;
3014:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
3015:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3016:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3017:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3018:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3019:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
3020:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
3021:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3022:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3023:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
3024:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will get the status of the scan request source event. Will return a true
3025:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the event has occurred for scan. A call to this API would access the register bit field GxSEF
3026:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3027:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3028:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3029:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3030:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanGetReqSrcEventStatus(XMC_VADC_GROUP_t *const group_ptr)
3031:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
3032:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GSCAN_GetRSEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
3033:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   return( (bool)(group_ptr->SEFLAG & (uint32_t)VADC_G_SEFLAG_SEV1_Msk));
3034:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
3035:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3036:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3037:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
3038:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr    Service Request Id
3039:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3040:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3041:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3042:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3043:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Connects the scan request source event to the SR line of VADC.<BR>\n
3044:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a scan request source event. Hence to get a 
3045:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
3046:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * field GxSEVNP.SEV1NP .
3047:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3048:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3049:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3050:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3051:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VA
3052:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3053:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3054:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3055:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3056:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3057:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3058:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3059:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the trigger for scan request source.<BR>\n
3060:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API, the trigger signal will be activated for the scan request source. The trigger
3061:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * edge will be selected from the ASCTRL register. The Selection of a input will be done by
3062:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectTrigger(). A call to this API would configure the register bit field Gx
3063:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3064:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3065:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanDisableExternalTrigger()<BR>
3066:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3067:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
3068:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
3069:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
3070:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3071:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_ENTR_Msk;
3072:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
3073:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3074:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3075:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3076:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3077:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3078:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3079:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3080:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the trigger for scan request source.<BR>
3081:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the scan request source.
3082:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the scan request source. If any configuration were
3083:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * to select the trigger input in GxASCTRL, it will be not be effected by this API.
3084:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENTR.
3085:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3086:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3087:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
3088:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3089:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
3090:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
3091:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
3092:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3093:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENTR_Msk);
3094:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
3095:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3096:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3097:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3098:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param channel_num   channel number to be removed from the scan sequence.
3099:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3100:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3101:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3102:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3103:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Removes a channel from the scan sequence.<BR>
3104:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the it is possible to remove a single channel from the conversion sequence.
3105:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * The remaining channels will continue however they are.
3106:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register GxASSEL.
3107:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3108:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3109:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3110:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3111:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanRemoveChannel(XMC_VADC_GROUP_t *const group_ptr, const uint32_t channel_num
3112:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3113:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3114:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3115:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3116:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3117:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3118:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3119:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the scan request source event .<BR>
3120:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be activated for the scan request source.
3121:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3122:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENSI.
3123:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3124:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3125:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableEvent(),<BR> XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode()<BR>
3126:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3127:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableEvent(XMC_VADC_GROUP_t *const group_ptr)
3128:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
3129:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
3130:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3131:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= ((uint32_t)VADC_G_ASMR_ENSI_Msk);
3132:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
3133:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3134:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3135:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3136:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3137:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3138:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3139:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3140:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the scan request source event .<BR>
3141:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be deactivated for the scan request source.
3142:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3143:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENSI.
3144:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3145:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3146:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableEvent(),<BR> XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode()<BR>
3147:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3148:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableEvent(XMC_VADC_GROUP_t *const group_ptr)
3149:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
3150:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
3151:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3152:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENSI_Msk);
3153:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
3154:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
3155:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3156:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3157:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Pointer to the VADC module
3158:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to initialization data structure
3159:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3160:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3161:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the Background scan functional block.<BR>\n
3162:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * The BACKGROUND SCAN request source functional block converts channels of all VADC groups that ha
3163:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * been assigned as a priority channel (priority channels can be converted only by queue and scan).
3164:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source converts the unprioritized channels. Unprioritized channels however can also be u
3165:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * and scan. But a channel which is prioritized can not be used with background request source.
3166:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3167:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3168:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR> XMC_VADC_GROUP_BackgroundDisableArbitratio
3169:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundSelectGating()<BR>
3170:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3171:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_
3172:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3173:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
3174:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3175:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group which may receive a
3176:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                  conversion request from background request source
3177:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3178:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3179:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3180:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3181:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3182:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the Background request source.<BR>\n
3183:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
3184:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
3185:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * comes to the Background slot. Thus this must be enabled if any conversion need to take place.
3186:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2.
3187:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3188:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3189:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
3190:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3191:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_p
3192:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 202              	 .loc 1 3192 0
 203              	 .cfi_startproc
 204              	 
 205              	 
 206              	 
 207 0000 80B4     	 push {r7}
 208              	.LCFI18:
 209              	 .cfi_def_cfa_offset 4
 210              	 .cfi_offset 7,-4
 211 0002 83B0     	 sub sp,sp,#12
 212              	.LCFI19:
 213              	 .cfi_def_cfa_offset 16
 214 0004 00AF     	 add r7,sp,#0
 215              	.LCFI20:
 216              	 .cfi_def_cfa_register 7
 217 0006 7860     	 str r0,[r7,#4]
3193:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_
3194:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 218              	 .loc 1 3194 0
 219 0008 7B68     	 ldr r3,[r7,#4]
 220 000a D3F88430 	 ldr r3,[r3,#132]
 221 000e 43F08062 	 orr r2,r3,#67108864
 222 0012 7B68     	 ldr r3,[r7,#4]
 223 0014 C3F88420 	 str r2,[r3,#132]
3195:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
 224              	 .loc 1 3195 0
 225 0018 0C37     	 adds r7,r7,#12
 226              	.LCFI21:
 227              	 .cfi_def_cfa_offset 4
 228 001a BD46     	 mov sp,r7
 229              	.LCFI22:
 230              	 .cfi_def_cfa_register 13
 231              	 
 232 001c 5DF8047B 	 ldr r7,[sp],#4
 233              	.LCFI23:
 234              	 .cfi_restore 7
 235              	 .cfi_def_cfa_offset 0
 236 0020 7047     	 bx lr
 237              	 .cfi_endproc
 238              	.LFE198:
 240 0022 00BF     	 .section .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot,"ax",%progbits
 241              	 .align 2
 242              	 .thumb
 243              	 .thumb_func
 245              	XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:
 246              	.LFB199:
3196:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3197:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3198:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group which may receive a conversion request
3199:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     from background request source
3200:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3201:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3202:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3203:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3204:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the Background request source.<BR>\n
3205:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
3206:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
3207:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * comes to the Background slot.A call to this API will lead to all conversions request by Backgrou
3208:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2
3209:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3210:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3211:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
3212:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3213:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_
3214:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 247              	 .loc 1 3214 0
 248              	 .cfi_startproc
 249              	 
 250              	 
 251              	 
 252 0000 80B4     	 push {r7}
 253              	.LCFI24:
 254              	 .cfi_def_cfa_offset 4
 255              	 .cfi_offset 7,-4
 256 0002 83B0     	 sub sp,sp,#12
 257              	.LCFI25:
 258              	 .cfi_def_cfa_offset 16
 259 0004 00AF     	 add r7,sp,#0
 260              	.LCFI26:
 261              	 .cfi_def_cfa_register 7
 262 0006 7860     	 str r0,[r7,#4]
3215:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK
3216:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 263              	 .loc 1 3216 0
 264 0008 7B68     	 ldr r3,[r7,#4]
 265 000a D3F88430 	 ldr r3,[r3,#132]
 266 000e 23F08062 	 bic r2,r3,#67108864
 267 0012 7B68     	 ldr r3,[r7,#4]
 268 0014 C3F88420 	 str r2,[r3,#132]
3217:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
 269              	 .loc 1 3217 0
 270 0018 0C37     	 adds r7,r7,#12
 271              	.LCFI27:
 272              	 .cfi_def_cfa_offset 4
 273 001a BD46     	 mov sp,r7
 274              	.LCFI28:
 275              	 .cfi_def_cfa_register 13
 276              	 
 277 001c 5DF8047B 	 ldr r7,[sp],#4
 278              	.LCFI29:
 279              	 .cfi_restore 7
 280              	 .cfi_def_cfa_offset 0
 281 0020 7047     	 bx lr
 282              	 .cfi_endproc
 283              	.LFE199:
 285 0022 00BF     	 .section .text.XMC_VADC_GROUP_QueueEnableArbitrationSlot,"ax",%progbits
 286              	 .align 2
 287              	 .thumb
 288              	 .thumb_func
 290              	XMC_VADC_GROUP_QueueEnableArbitrationSlot:
 291              	.LFB214:
3218:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
3219:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3220:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3221:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3222:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3223:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_TRIGGER_INPUT_SELECT_t
3224:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3225:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3226:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3227:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3228:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for Background request source.<BR>\n
3229:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3230:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3231:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3232:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3233:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTSEL.
3234:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3235:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3236:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3237:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3238:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTrigger(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t in
3239:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3240:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3241:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3242:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3243:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Select the trigger edge
3244:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3245:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3246:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3247:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3248:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger edge for Background request source.<BR>\n
3249:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3250:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible values for the trigger 
3251:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3252:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTMODE.
3253:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3254:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3255:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3256:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3257:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
3258:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3259:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3260:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3261:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Module input signal meant to be selected as gating input
3262:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_GATE_INPUT_SELECT_t
3263:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3264:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3265:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3266:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3267:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for Background request source.<BR>\n
3268:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3269:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the Background request so
3270:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxBRSMR.ENGT has to be confi
3271:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field BRSC
3272:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3273:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3274:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR>
3275:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3276:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectGating(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t inp
3277:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3278:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3279:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3280:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the background scan request source
3281:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3282:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3283:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3284:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * <b>Details of function</b><br>
3285:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of background request source.<BR>\n
3286:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3287:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3288:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3289:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENGT.
3290:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3291:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3292:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectGating();
3293:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3294:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundSetGatingMode(XMC_VADC_GLOBAL_t *const global_ptr,
3295:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                             XMC_VADC_GATEMODE_t mode_sel)
3296:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
3297:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong Module Pointer", (global_ptr == VADC))
3298:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_G
3299:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3300:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
3301:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= (uint32_t)(~((uint32_t)VADC_BRSMR_ENGT_Msk));
3302:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Configure the new gating mode*/
3303:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)((uint32_t)mode_sel << VADC_BRSMR_ENGT_Pos);
3304:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
3305:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3306:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3307:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3308:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3309:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3310:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3311:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3312:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3313:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
3314:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3315:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is needed. Using autoscan (continuous conversion)feature it is possible to start the con
3316:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * once and allow the sequence to repeat without any further triggers. Once all channels belonging 
3317:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source have been converted, a request source completion event is generated. Generation o
3318:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * can restart the Background configure sequence. Every request source event will cause a load even
3319:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would access the register bit field BRSMR.SCAN.
3320:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3321:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3322:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableContinuousMode()<BR>
3323:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3324:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableContinuousMode(XMC_VADC_GLOBAL_t *const global
3325:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
3326:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableContinuousMode:Wrong Module Pointer", (global_ptr == 
3327:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_SCAN_Msk;
3328:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
3329:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3330:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3331:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3332:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3333:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3334:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3335:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3336:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
3337:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3338:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
3339:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a Background req
3340:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
3341:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. By invoking this API the Autoscan mode of operations is disabled. A call to this API w
3342:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * register bit field BRSMR.SCAN.
3343:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3344:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3345:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableContinuousMode()<BR>
3346:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3347:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableContinuousMode(XMC_VADC_GLOBAL_t *const globa
3348:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
3349:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableContinuousMode:Wrong Module Pointer", (global_ptr ==
3350:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_SCAN_Msk);
3351:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
3352:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3353:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3354:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3355:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3356:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3357:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3358:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3359:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
3360:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3361:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the b
3362:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * has already been filled up with entries. A call to this API would set the register bit field BRS
3363:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3364:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3365:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3366:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3367:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_pt
3368:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
3369:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VAD
3370:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
3371:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
3372:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3373:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3374:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3375:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3376:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3377:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3378:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3379:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing background scan conversion(sequence).<BR>\n
3380:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
3381:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
3382:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
3383:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers BRSMR, BRSCTRL, GxARBPR(if group is available) 
3384:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * current scan sequence.
3385:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3386:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3387:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3388:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3389:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundAbortSequence(XMC_VADC_GLOBAL_t *const global_ptr);
3390:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3391:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3392:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3393:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3394:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Request source
3395:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The unprioritized channel meant to be added to the scan sequence
3396:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3397:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3398:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3399:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3400:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3401:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds a channel to the background scan sequence.<BR>\n
3402:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the background scan request source. This will 
3403:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
3404:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3405:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3406:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3407:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
3408:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3409:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global
3410:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                     const uint32_t grp_num,
3411:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                     const uint32_t ch_num)
3412:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
3413:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == 
3414:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_V
3415:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
3416:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3417:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3418:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
3419:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
3420:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3421:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3422:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3423:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3424:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
3425:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
3426:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
3427:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the previously selected channels
3428:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
3429:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3430:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3431:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3432:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3433:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
3434:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
3435:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
3436:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3437:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3438:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3439:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3440:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3441:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgndAddMultipleChannels(XMC_VADC_GLOBAL_t *const global_ptr
3442:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t grp_num,
3443:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t ch_mask)
3444:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
3445:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Module Pointer", (global_ptr == VADC
3446:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Group Number",   ((grp_num) < XMC_VA
3447:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= ch_mask;
3448:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
3449:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3450:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3451:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3452:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3453:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
3454:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3455:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3456:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
3457:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3458:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3459:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determine if the channel is pending.<BR>\n
3460:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
3461:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3462:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
3463:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the channel is found in the pending register (BRSPND[\b grp_num]).
3464:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3465:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3466:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending()<BR>
3467:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3468:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundIsChannelPending(XMC_VADC_GLOBAL_t *const global_ptr
3469:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t grp_num,
3470:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t ch_num)
3471:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
3472:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Module Pointer", (global_ptr == VADC
3473:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Group Number",   ((grp_num) < XMC_VA
3474:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Channel Number",
3475:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3476:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3477:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   return( (bool)(global_ptr->BRSPND[grp_num] & (uint32_t)((uint32_t)1 << ch_num)));
3478:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
3479:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3480:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3481:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3482:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return  <BR>
3483:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
3484:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *              <BR>Range: [0x0 to (0x8*number of groups)]
3485:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3486:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3487:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the number of pending channels.<BR>\n
3488:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
3489:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3490:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
3491:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * return the total number of channels pending (BRSPND[\b grp_num]).
3492:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3493:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3494:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundIsChannelPending()<BR>
3495:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3496:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending(XMC_VADC_GLOBAL_t *const global_ptr);
3497:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3498:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3499:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3500:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3501:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3502:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3503:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3504:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
3505:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will set the request source event for background scan. This will trigger a interrupt if
3506:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
3507:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB.
3508:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3509:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3510:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
3511:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3512:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent(XMC_VADC_GLOBAL_t *const global_p
3513:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
3514:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent:Wrong Module Pointer", (global_ptr == VA
3515:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk;
3516:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
3517:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3518:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3519:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3520:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3521:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3522:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3523:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3524:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges the background scan conversion complete request source event.<BR>\n
3525:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
3526:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB
3527:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3528:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3529:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent()<BR>
3530:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3531:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent(XMC_VADC_GLOBAL_t *const global_ptr
3532:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
3533:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent:Wrong Module Pointer", (global_ptr == VADC
3534:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLBCLR_Msk;
3535:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
3536:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3537:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3538:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3539:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3540:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
3541:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
3542:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3543:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3544:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
3545:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will get the status of the background scan request source event. Will return a true
3546:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the event has occurred for background scan. A call to this API would configure the register
3547:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field GLOBEFLAG.SEVGLB.
3548:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3549:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3550:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3551:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3552:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus(XMC_VADC_GLOBAL_t *const global
3553:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
3554:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus:Wrong Module Pointer", (global_ptr == 
3555:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   return((bool)(global_ptr->GLOBEFLAG & (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk));
3556:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
3557:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3558:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3559:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3560:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3561:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3562:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3563:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3564:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the trigger for background scan request source.<BR>\n
3565:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be activated for the scan request source. The trigger signal 
3566:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * edge will be selected from the BRSCTRL register. The Selection of a input will be done by
3567:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectTrigger(). A call to this API would configure the register bit f
3568:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3569:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3570:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(
3571:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3572:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger(XMC_VADC_GLOBAL_t *const globa
3573:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
3574:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger:Wrong Module Pointer", (global_ptr ==
3575:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3576:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_ENTR_Msk;
3577:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
3578:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3579:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3580:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3581:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3582:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3583:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3584:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3585:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the trigger for background scan request source.<BR>
3586:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the background scan request source.
3587:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the background scan request source. If any configu
3588:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * to select the trigger input in BRSCTRL will be not be effected. A call to this API would configu
3589:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field BRSMR.ENTR.
3590:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3591:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><br>
3592:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<BR>
3593:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3594:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(XMC_VADC_GLOBAL_t *const glob
3595:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
3596:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger:Wrong Module Pointer", (global_ptr =
3597:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3598:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_ENTR_Msk);
3599:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
3600:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3601:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3602:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3603:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3604:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3605:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3606:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3607:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the background scan request source event .<BR>
3608:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be activated for the background scan request sou
3609:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3610:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENSI.
3611:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3612:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3613:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableEvent(),<BR> XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptN
3614:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3615:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableEvent(XMC_VADC_GLOBAL_t *const global_ptr)
3616:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
3617:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableEvent:Wrong Module Pointer", (global_ptr == VADC))
3618:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3619:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= ((uint32_t)VADC_BRSMR_ENSI_Msk);
3620:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
3621:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3622:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3623:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr     Pointer to the VADC module
3624:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3625:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3626:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3627:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3628:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the background scan request source event .<BR>
3629:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be deactivated for the background scan request s
3630:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3631:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENSI.
3632:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3633:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3634:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableEvent(),<BR> XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNo
3635:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3636:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableEvent(XMC_VADC_GLOBAL_t *const global_ptr)
3637:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
3638:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableEvent:Wrong Module Pointer", (global_ptr == VADC))
3639:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3640:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_ENSI_Msk);
3641:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
3642:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3643:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_QUEUE_AVAILABLE == 1U)
3644:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3645:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
3646:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to initialization data structure
3647:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3648:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3649:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3650:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3651:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes VADC QUEUE functional block.<BR>\n
3652:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * The QUEUE request source functional block converts channels stored in a queue. The first channel
3653:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * queue is converted first. A channel once converted, can be placed back into the queue if desired
3654:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_QueueEnable
3655:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
3656:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_QueueDisableArb
3657:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxQCTRL0, GxQMR0 to configure the queu
3658:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * source.
3659:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3660:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3661:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR> XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR
3662:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR> XMC_VADC_GROUP_QueueSelectGating()<BR>
3663:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3664:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *con
3665:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3666:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3667:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3668:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3669:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3670:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3671:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3672:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the queue request source.<BR>\n
3673:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3674:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3675:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot. Thus this must be enabled if any conversion need to take place.
3676:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3677:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3678:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3679:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
3680:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3681:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3682:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 292              	 .loc 1 3682 0
 293              	 .cfi_startproc
 294              	 
 295              	 
 296              	 
 297 0000 80B4     	 push {r7}
 298              	.LCFI30:
 299              	 .cfi_def_cfa_offset 4
 300              	 .cfi_offset 7,-4
 301 0002 83B0     	 sub sp,sp,#12
 302              	.LCFI31:
 303              	 .cfi_def_cfa_offset 16
 304 0004 00AF     	 add r7,sp,#0
 305              	.LCFI32:
 306              	 .cfi_def_cfa_register 7
 307 0006 7860     	 str r0,[r7,#4]
3683:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
3684:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
 308              	 .loc 1 3684 0
 309 0008 7B68     	 ldr r3,[r7,#4]
 310 000a D3F88430 	 ldr r3,[r3,#132]
 311 000e 43F08072 	 orr r2,r3,#16777216
 312 0012 7B68     	 ldr r3,[r7,#4]
 313 0014 C3F88420 	 str r2,[r3,#132]
3685:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
 314              	 .loc 1 3685 0
 315 0018 0C37     	 adds r7,r7,#12
 316              	.LCFI33:
 317              	 .cfi_def_cfa_offset 4
 318 001a BD46     	 mov sp,r7
 319              	.LCFI34:
 320              	 .cfi_def_cfa_register 13
 321              	 
 322 001c 5DF8047B 	 ldr r7,[sp],#4
 323              	.LCFI35:
 324              	 .cfi_restore 7
 325              	 .cfi_def_cfa_offset 0
 326 0020 7047     	 bx lr
 327              	 .cfi_endproc
 328              	.LFE214:
 330 0022 00BF     	 .section .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot,"ax",%progbits
 331              	 .align 2
 332              	 .thumb
 333              	 .thumb_func
 335              	XMC_VADC_GROUP_QueueDisableArbitrationSlot:
 336              	.LFB215:
3686:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3687:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3688:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3689:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3690:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3691:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3692:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3693:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the queue request source.<BR>\n
3694:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3695:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3696:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot.A call to this API will lead to all conversions request by queue to be blocked
3697:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3698:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3699:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3700:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
3701:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3702:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3703:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 337              	 .loc 1 3703 0
 338              	 .cfi_startproc
 339              	 
 340              	 
 341              	 
 342 0000 80B4     	 push {r7}
 343              	.LCFI36:
 344              	 .cfi_def_cfa_offset 4
 345              	 .cfi_offset 7,-4
 346 0002 83B0     	 sub sp,sp,#12
 347              	.LCFI37:
 348              	 .cfi_def_cfa_offset 16
 349 0004 00AF     	 add r7,sp,#0
 350              	.LCFI38:
 351              	 .cfi_def_cfa_register 7
 352 0006 7860     	 str r0,[r7,#4]
3704:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
3705:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
 353              	 .loc 1 3705 0
 354 0008 7B68     	 ldr r3,[r7,#4]
 355 000a D3F88430 	 ldr r3,[r3,#132]
 356 000e 23F08072 	 bic r2,r3,#16777216
 357 0012 7B68     	 ldr r3,[r7,#4]
 358 0014 C3F88420 	 str r2,[r3,#132]
3706:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
 359              	 .loc 1 3706 0
 360 0018 0C37     	 adds r7,r7,#12
 361              	.LCFI39:
 362              	 .cfi_def_cfa_offset 4
 363 001a BD46     	 mov sp,r7
 364              	.LCFI40:
 365              	 .cfi_def_cfa_register 13
 366              	 
 367 001c 5DF8047B 	 ldr r7,[sp],#4
 368              	.LCFI41:
 369              	 .cfi_restore 7
 370              	 .cfi_def_cfa_offset 0
 371 0020 7047     	 bx lr
 372              	 .cfi_endproc
 373              	.LFE215:
 375 0022 00BF     	 .section .text.XMC_VADC_GROUP_QueueFlushEntries,"ax",%progbits
 376              	 .align 2
 377              	 .thumb
 378              	 .thumb_func
 380              	XMC_VADC_GROUP_QueueFlushEntries:
 381              	.LFB219:
3707:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3708:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3709:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3710:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3711:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3712:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    bool  returns true if the arbitration is enabled else returns false.
3713:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3714:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3715:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the arbitration status of the queue request source.<BR>\n
3716:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the queue request source must have its conversion request considered by the arbiter, it must 
3717:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3718:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot. A call to this API would return the status of the arbitration slot of queue.
3719:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxARBPR.ASEN1.
3720:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3721:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3722:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<
3723:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3724:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr
3725:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
3726:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GRO
3727:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3728:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN0_Msk) >> VADC_G_ARBPR_ASEN0_Pos);
3729:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
3730:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3731:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3732:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3733:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3734:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3735:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3736:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3737:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3738:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for queue request source.<BR>\n
3739:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3740:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3741:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3742:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3743:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTSEL.
3744:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3745:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3746:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3747:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3748:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, 
3749:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****                                        const XMC_VADC_TRIGGER_INPUT_SELECT_t input_num);
3750:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3751:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3752:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3753:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Choice of the trigger edge
3754:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3755:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3756:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3757:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3758:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal edge for queue request source.<BR>\n
3759:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3760:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 trigger edges. This is
3761:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3762:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3763:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTMODE.
3764:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3765:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3766:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3767:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3768:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGE
3769:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3770:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3771:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3772:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as the gating line
3773:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3774:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3775:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3776:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3777:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for queue request source.<BR>\n
3778:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3779:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the queue request source 
3780:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxQMR0.ENGT has to be config
3781:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxQC
3782:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3783:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3784:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR>
3785:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3786:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectGating(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GATE_INPUT_
3787:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3788:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3789:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3790:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the queue request source
3791:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3792:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3793:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3794:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * <b>Details of function</b><br>
3795:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of queue request source.<BR>\n
3796:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3797:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3798:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3799:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQMR0.ENGT.
3800:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3801:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3802:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_QueueSelectGating();
3803:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3804:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_
3805:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
3806:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
3807:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMOD
3808:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3809:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
3810:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 &= (uint32_t)(~((uint32_t) VADC_G_QMR0_ENGT_Msk));
3811:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Set the new gating mode */
3812:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)mode_sel << VADC_G_QMR0_ENGT_Pos);
3813:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
3814:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3815:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3816:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3817:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3818:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3819:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3820:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3821:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3822:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>
3823:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3824:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * the queue unit to generate a conversion request to the analog converter. It is assumed that the 
3825:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxQMR0.TR
3826:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3827:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Note:</b><br>
3828:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * The conversion of queue entry will start immediately after the entry has been loaded into GxQINR
3829:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This happens only if the queue entry has been loaded into the register without the need for the 
3830:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * If a H/W Trigger is selected while loading the entry, the conversion will occur in one of the 2 
3831:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * <ul>
3832:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * <li> The H/W generates a trigger needed for the queue request source.
3833:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * <li> The Conversion is triggered manually by calling this API.
3834:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * </ul>
3835:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3836:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3837:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
3838:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3839:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
3840:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
3841:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
3842:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_TREV_Pos);
3843:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
3844:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3845:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3846:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3847:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3848:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    uint32_t returns the total number of channels.
3849:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *             <BR>Range: [0x0 to 0x8]
3850:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3851:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3852:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the number of channels present in the queue.<BR>\n
3853:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will return the queue buffer size. This buffer will be consisting of valid queue entrie
3854:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * will be converted when a trigger event occurs. All the entries that are loaded onto the GxQINR0 
3855:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * be added to the queue buffer. Hence if an application needs to get the number of valid queue ent
3856:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * this API would provide the interface. A call to this API would access the registers GxQBUR0, GxQ
3857:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * to determine the queue length.
3858:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3859:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3860:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
3861:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3862:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GROUP_QueueGetLength(XMC_VADC_GROUP_t *const group_ptr);
3863:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3864:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3865:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3866:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3867:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3868:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3869:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3870:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing conversion by flushing the queue.<BR>\n
3871:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will flush the queue buffer. Ongoing conversion of the Queue request source will
3872:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
3873:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxQCTRL0, GxQMR0, GxARBPR in order to abort
3874:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * the queue sequence.
3875:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3876:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3877:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueFlushEntries() <BR>
3878:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3879:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueAbortSequence(XMC_VADC_GROUP_t *const group_ptr);
3880:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3881:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3882:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3883:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3884:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3885:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3886:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3887:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * Flushing the queue Entry.<BR>\n
3888:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will flush one entry in the queue buffer. Ongoing conversion of the Queue request sourc
3889:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
3890:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers  GxQMR0. This is a Blocking API, i.e will only 
3891:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * all the entries are removed from the queue.
3892:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3893:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3894:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueAbortSequence(0<BR>
3895:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3896:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueFlushEntries(XMC_VADC_GROUP_t *const group_ptr)
3897:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** {
 382              	 .loc 1 3897 0
 383              	 .cfi_startproc
 384              	 
 385              	 
 386              	 
 387 0000 80B4     	 push {r7}
 388              	.LCFI42:
 389              	 .cfi_def_cfa_offset 4
 390              	 .cfi_offset 7,-4
 391 0002 83B0     	 sub sp,sp,#12
 392              	.LCFI43:
 393              	 .cfi_def_cfa_offset 16
 394 0004 00AF     	 add r7,sp,#0
 395              	.LCFI44:
 396              	 .cfi_def_cfa_register 7
 397 0006 7860     	 str r0,[r7,#4]
3898:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Initiate flushing of the queue */
3899:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_FLUSH_Msk;
 398              	 .loc 1 3899 0
 399 0008 7B68     	 ldr r3,[r7,#4]
 400 000a D3F80431 	 ldr r3,[r3,#260]
 401 000e 43F48062 	 orr r2,r3,#1024
 402 0012 7B68     	 ldr r3,[r7,#4]
 403 0014 C3F80421 	 str r2,[r3,#260]
3900:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** 
3901:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   while( !((group_ptr->QSR0)& (uint32_t)VADC_G_QSR0_EMPTY_Msk))
 404              	 .loc 1 3901 0
 405 0018 00BF     	 nop
 406              	.L9:
 407              	 .loc 1 3901 0 is_stmt 0 discriminator 1
 408 001a 7B68     	 ldr r3,[r7,#4]
 409 001c D3F80831 	 ldr r3,[r3,#264]
 410 0020 03F02003 	 and r3,r3,#32
 411 0024 002B     	 cmp r3,#0
 412 0026 F8D0     	 beq .L9
3902:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   {
3903:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****     /* Wait until the queue is indeed flushed */
3904:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h ****   }
3905:D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc\xmc_vadc.h **** }
 413              	 .loc 1 3905 0 is_stmt 1
 414 0028 0C37     	 adds r7,r7,#12
 415              	.LCFI45:
 416              	 .cfi_def_cfa_offset 4
 417 002a BD46     	 mov sp,r7
 418              	.LCFI46:
 419              	 .cfi_def_cfa_register 13
 420              	 
 421 002c 5DF8047B 	 ldr r7,[sp],#4
 422              	.LCFI47:
 423              	 .cfi_restore 7
 424              	 .cfi_def_cfa_offset 0
 425 0030 7047     	 bx lr
 426              	 .cfi_endproc
 427              	.LFE219:
 429 0032 00BF     	 .section .rodata.g_xmc_vadc_group_array,"a",%progbits
 430              	 .align 2
 433              	g_xmc_vadc_group_array:
 434 0000 00440040 	 .word 1073759232
 435 0004 00480040 	 .word 1073760256
 436 0008 004C0040 	 .word 1073761280
 437 000c 00500040 	 .word 1073762304
 438              	 .section .text.XMC_VADC_GLOBAL_EnableModule,"ax",%progbits
 439              	 .align 2
 440              	 .global XMC_VADC_GLOBAL_EnableModule
 441              	 .thumb
 442              	 .thumb_func
 444              	XMC_VADC_GLOBAL_EnableModule:
 445              	.LFB239:
 446              	 .file 2 "../Libraries/XMCLib/src/xmc_vadc.c"
   1:../Libraries/XMCLib/src/xmc_vadc.c **** /**
   2:../Libraries/XMCLib/src/xmc_vadc.c ****  * @file xmc_vadc.c
   3:../Libraries/XMCLib/src/xmc_vadc.c ****  * @date 2016-06-17
   4:../Libraries/XMCLib/src/xmc_vadc.c ****  *
   5:../Libraries/XMCLib/src/xmc_vadc.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_vadc.c **** ***************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_vadc.c ****  * XMClib v2.1.8 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_vadc.c ****  *
   9:../Libraries/XMCLib/src/xmc_vadc.c ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_vadc.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_vadc.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_vadc.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_vadc.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_vadc.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_vadc.c ****  * 
  18:../Libraries/XMCLib/src/xmc_vadc.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_vadc.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_vadc.c ****  * 
  21:../Libraries/XMCLib/src/xmc_vadc.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_vadc.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_vadc.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_vadc.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_vadc.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_vadc.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_vadc.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_vadc.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_vadc.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_vadc.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_vadc.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  36:../Libraries/XMCLib/src/xmc_vadc.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_vadc.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  39:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-02-15:
  40:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_vadc.c ****  *      
  42:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-02-20:
  43:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Revised for XMC1201 device.<br>
  44:../Libraries/XMCLib/src/xmc_vadc.c ****  *   
  45:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-04-27:
  46:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added new APIs for SHS.<br>
  47:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added New APIs for trigger edge selection.<BR>
  48:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added new APIs for Queue flush entries, boundary selection, Boundary node pointer.<BR>
  49:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Revised GatingMode APIs and EMUX Control Init API.<BR>
  50:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  51:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-06-20:
  52:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  54:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-06-25:
  55:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - BFL configuration in channel initialization fixed.
  56:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  57:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-07-28:
  58:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - CLOCK_GATING_SUPPORTED and PERIPHERAL_RESET_SUPPORTED macros used
  59:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Clubbed the macro definitions for XMC13 XMC12 and XMC14
  60:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Clubbed the macro definitions for XMC44 XMC47 and XMC48
  61:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New APIs Created.
  62:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GLOBAL_SetIndividualBoundary
  63:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetIndividualBoundary
  64:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetAlias
  65:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetInputClass
  66:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelSetIclass
  67:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetResultAlignment
  68:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetInputClass
  69:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetResultSubtractionValue
  70:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  71:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-12-01:
  72:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fixed the analog calibration voltage for XMC1100 to external reference upper supply range.
  73:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fixed the XMC_VADC_GLOBAL_StartupCalibration() for XMC1100.
  74:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  75:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2016-06-17:
  76:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New macros added XMC_VADC_SHS_FULL_SET_REG, XMC_VADC_RESULT_PRIORITY_AVAILABLE 
  77:../Libraries/XMCLib/src/xmc_vadc.c ****  *       and XMC_VADC_SYNCTR_START_LOCATION
  78:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New Enum added XMC_VADC_SHS_GAIN_LEVEL_t and XMC_VADC_SYNCTR_EVAL_t
  79:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fixed the EVAL configuration in API XMC_VADC_GROUP_CheckSlaveReadiness and XMC_VADC_GROUP_
  80:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New APIs added are:
  81:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetSyncSlaveReadySignal
  82:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetAssertedEvents
  83:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetAssertedResultEvents
  84:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetResultRegPriority
  85:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetSyncReadySignal
  86:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetSyncReadySignal
  87:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetResultRegPriority
  88:../Libraries/XMCLib/src/xmc_vadc.c ****  * @endcond 
  89:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  90:../Libraries/XMCLib/src/xmc_vadc.c ****  */
  91:../Libraries/XMCLib/src/xmc_vadc.c **** 
  92:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
  93:../Libraries/XMCLib/src/xmc_vadc.c ****  * HEADER FILES
  94:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
  95:../Libraries/XMCLib/src/xmc_vadc.c **** #include <xmc_vadc.h>
  96:../Libraries/XMCLib/src/xmc_vadc.c **** 
  97:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
  98:../Libraries/XMCLib/src/xmc_vadc.c ****  * MACROS
  99:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 100:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_MAX_ICLASS_SET          (2U)  /**< Defines the maximum number of conversion parame
 101:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_NUM_EMUX_INTERFACES     (2U)  /**< Defines the maximum number of external multiple
 102:../Libraries/XMCLib/src/xmc_vadc.c **** 
 103:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_RESULT_LEFT_ALIGN_10BIT (2U)  /**< Defines the 10 bit converted result register le
 104:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     is used in the XMC_VADC_GLOBAL_SetCompareValue(
 105:../Libraries/XMCLib/src/xmc_vadc.c **** 
 106:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_SYNCTR_START_LOCATION (3U)  /**< Defines the location in SYNCTR needed for calcula
 107:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 108:../Libraries/XMCLib/src/xmc_vadc.c ****  * ENUMS
 109:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 110:../Libraries/XMCLib/src/xmc_vadc.c **** 
 111:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 112:../Libraries/XMCLib/src/xmc_vadc.c ****  * DATA STRUCTURES
 113:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 114:../Libraries/XMCLib/src/xmc_vadc.c **** 
 115:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 116:../Libraries/XMCLib/src/xmc_vadc.c ****  * GLOBAL DATA
 117:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 118:../Libraries/XMCLib/src/xmc_vadc.c **** 
 119:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 120:../Libraries/XMCLib/src/xmc_vadc.c **** 
 121:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U) 
 122:../Libraries/XMCLib/src/xmc_vadc.c **** static VADC_G_TypeDef *const g_xmc_vadc_group_array[XMC_VADC_MAXIMUM_NUM_GROUPS] = {(VADC_G_TypeDef
 123:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 124:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 125:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 126:../Libraries/XMCLib/src/xmc_vadc.c **** #else
 127:../Libraries/XMCLib/src/xmc_vadc.c **** static VADC_G_TypeDef *const g_xmc_vadc_group_array[XMC_VADC_MAXIMUM_NUM_GROUPS] = {(VADC_G_TypeDef
 128:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 129:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 130:../Libraries/XMCLib/src/xmc_vadc.c **** 
 131:../Libraries/XMCLib/src/xmc_vadc.c **** #endif 
 132:../Libraries/XMCLib/src/xmc_vadc.c **** 
 133:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 134:../Libraries/XMCLib/src/xmc_vadc.c ****  * LOCAL ROUTINES
 135:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 136:../Libraries/XMCLib/src/xmc_vadc.c **** 
 137:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 138:../Libraries/XMCLib/src/xmc_vadc.c ****  * API IMPLEMENTATION
 139:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 140:../Libraries/XMCLib/src/xmc_vadc.c **** 
 141:../Libraries/XMCLib/src/xmc_vadc.c **** /*API to enable the VADC Module*/
 142:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_EnableModule(void)
 143:../Libraries/XMCLib/src/xmc_vadc.c **** {
 447              	 .loc 2 143 0
 448              	 .cfi_startproc
 449              	 
 450              	 
 451 0000 80B5     	 push {r7,lr}
 452              	.LCFI48:
 453              	 .cfi_def_cfa_offset 8
 454              	 .cfi_offset 7,-8
 455              	 .cfi_offset 14,-4
 456 0002 00AF     	 add r7,sp,#0
 457              	.LCFI49:
 458              	 .cfi_def_cfa_register 7
 144:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
 145:../Libraries/XMCLib/src/xmc_vadc.c ****    * Enable Out of Range Comparator for ADC channels pins P2.2to P2.9. This hack is applicable only
 146:../Libraries/XMCLib/src/xmc_vadc.c ****    * and in particular the G11 step.
 147:../Libraries/XMCLib/src/xmc_vadc.c ****    *
 148:../Libraries/XMCLib/src/xmc_vadc.c ****    * Please refer to the XMC1000 Errata sheet V1.4 released 2014-06 Errata ID : ADC_AI.003 Additona
 149:../Libraries/XMCLib/src/xmc_vadc.c ****    * function
 150:../Libraries/XMCLib/src/xmc_vadc.c ****    */
 151:../Libraries/XMCLib/src/xmc_vadc.c **** 
 152:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined (COMPARATOR)
 153:../Libraries/XMCLib/src/xmc_vadc.c ****   COMPARATOR->ORCCTRL = (uint32_t)0xFF;
 154:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 155:../Libraries/XMCLib/src/xmc_vadc.c **** 
 156:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 157:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 158:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 159:../Libraries/XMCLib/src/xmc_vadc.c **** 
 160:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 161:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Reset the Hardware */
 162:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC )
 459              	 .loc 2 162 0
 460 0004 0120     	 movs r0,#1
 461 0006 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 163:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 164:../Libraries/XMCLib/src/xmc_vadc.c **** }
 462              	 .loc 2 164 0
 463 000a 80BD     	 pop {r7,pc}
 464              	 .cfi_endproc
 465              	.LFE239:
 467              	 .section .text.XMC_VADC_GLOBAL_DisableModule,"ax",%progbits
 468              	 .align 2
 469              	 .global XMC_VADC_GLOBAL_DisableModule
 470              	 .thumb
 471              	 .thumb_func
 473              	XMC_VADC_GLOBAL_DisableModule:
 474              	.LFB240:
 165:../Libraries/XMCLib/src/xmc_vadc.c **** 
 166:../Libraries/XMCLib/src/xmc_vadc.c **** /*API to Disable the VADC Module*/
 167:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_DisableModule(void)
 168:../Libraries/XMCLib/src/xmc_vadc.c **** {
 475              	 .loc 2 168 0
 476              	 .cfi_startproc
 477              	 
 478              	 
 479 0000 80B5     	 push {r7,lr}
 480              	.LCFI50:
 481              	 .cfi_def_cfa_offset 8
 482              	 .cfi_offset 7,-8
 483              	 .cfi_offset 14,-4
 484 0002 00AF     	 add r7,sp,#0
 485              	.LCFI51:
 486              	 .cfi_def_cfa_register 7
 169:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 170:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Reset the Hardware */
 171:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_RESET_AssertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 487              	 .loc 2 171 0
 488 0004 0120     	 movs r0,#1
 489 0006 FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 172:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 173:../Libraries/XMCLib/src/xmc_vadc.c **** 
 174:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 175:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 176:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 177:../Libraries/XMCLib/src/xmc_vadc.c **** 
 178:../Libraries/XMCLib/src/xmc_vadc.c **** }
 490              	 .loc 2 178 0
 491 000a 80BD     	 pop {r7,pc}
 492              	 .cfi_endproc
 493              	.LFE240:
 495              	 .section .text.XMC_VADC_GLOBAL_Init,"ax",%progbits
 496              	 .align 2
 497              	 .global XMC_VADC_GLOBAL_Init
 498              	 .thumb
 499              	 .thumb_func
 501              	XMC_VADC_GLOBAL_Init:
 502              	.LFB241:
 179:../Libraries/XMCLib/src/xmc_vadc.c **** 
 180:../Libraries/XMCLib/src/xmc_vadc.c **** 
 181:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize global resources */
 182:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *conf
 183:../Libraries/XMCLib/src/xmc_vadc.c **** {
 503              	 .loc 2 183 0
 504              	 .cfi_startproc
 505              	 
 506              	 
 507 0000 80B5     	 push {r7,lr}
 508              	.LCFI52:
 509              	 .cfi_def_cfa_offset 8
 510              	 .cfi_offset 7,-8
 511              	 .cfi_offset 14,-4
 512 0002 82B0     	 sub sp,sp,#8
 513              	.LCFI53:
 514              	 .cfi_def_cfa_offset 16
 515 0004 00AF     	 add r7,sp,#0
 516              	.LCFI54:
 517              	 .cfi_def_cfa_register 7
 518 0006 7860     	 str r0,[r7,#4]
 519 0008 3960     	 str r1,[r7]
 184:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 0U)
 185:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
 186:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 187:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))
 188:../Libraries/XMCLib/src/xmc_vadc.c **** 
 189:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the VADC module*/
 190:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GLOBAL_EnableModule();
 520              	 .loc 2 190 0
 521 000a FFF7FEFF 	 bl XMC_VADC_GLOBAL_EnableModule
 191:../Libraries/XMCLib/src/xmc_vadc.c **** 
 192:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->CLC = (uint32_t)(config->clc);
 522              	 .loc 2 192 0
 523 000e 3B68     	 ldr r3,[r7]
 524 0010 5A69     	 ldr r2,[r3,#20]
 525 0012 7B68     	 ldr r3,[r7,#4]
 526 0014 1A60     	 str r2,[r3]
 193:../Libraries/XMCLib/src/xmc_vadc.c **** 
 194:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Clock configuration */
 195:../Libraries/XMCLib/src/xmc_vadc.c **** 
 196:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 197:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Ms
 527              	 .loc 2 197 0
 528 0016 3B68     	 ldr r3,[r7]
 529 0018 5B68     	 ldr r3,[r3,#4]
 530 001a 43F40042 	 orr r2,r3,#32768
 531 001e 7B68     	 ldr r3,[r7,#4]
 532 0020 C3F88020 	 str r2,[r3,#128]
 198:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 199:../Libraries/XMCLib/src/xmc_vadc.c **** 
 200:../Libraries/XMCLib/src/xmc_vadc.c ****   /* ICLASS-0 configuration */
 201:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 533              	 .loc 2 201 0
 534 0024 3B68     	 ldr r3,[r7]
 535 0026 9A68     	 ldr r2,[r3,#8]
 536 0028 7B68     	 ldr r3,[r7,#4]
 537 002a C3F8A020 	 str r2,[r3,#160]
 202:../Libraries/XMCLib/src/xmc_vadc.c **** 
 203:../Libraries/XMCLib/src/xmc_vadc.c ****   /* ICLASS-1 configuration */
 204:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 538              	 .loc 2 204 0
 539 002e 3B68     	 ldr r3,[r7]
 540 0030 DA68     	 ldr r2,[r3,#12]
 541 0032 7B68     	 ldr r3,[r7,#4]
 542 0034 C3F8A420 	 str r2,[r3,#164]
 205:../Libraries/XMCLib/src/xmc_vadc.c **** 
 206:../Libraries/XMCLib/src/xmc_vadc.c **** 
 207:../Libraries/XMCLib/src/xmc_vadc.c ****   /*Result generation related configuration */
 208:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 543              	 .loc 2 208 0
 544 0038 3B68     	 ldr r3,[r7]
 545 003a 1A69     	 ldr r2,[r3,#16]
 546 003c 7B68     	 ldr r3,[r7,#4]
 547 003e C3F88022 	 str r2,[r3,#640]
 209:../Libraries/XMCLib/src/xmc_vadc.c **** 
 210:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
 211:../Libraries/XMCLib/src/xmc_vadc.c **** 
 212:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Boundaries */
 213:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 548              	 .loc 2 213 0
 549 0042 3B68     	 ldr r3,[r7]
 550 0044 1A68     	 ldr r2,[r3]
 551 0046 7B68     	 ldr r3,[r7,#4]
 552 0048 C3F8B820 	 str r2,[r3,#184]
 214:../Libraries/XMCLib/src/xmc_vadc.c **** 
 215:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 216:../Libraries/XMCLib/src/xmc_vadc.c **** 
 217:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Configure the SHS register that are needed for XMC11xx devices*/
 218:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 0U)
 219:../Libraries/XMCLib/src/xmc_vadc.c **** 
 220:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enabling the Analog part of the converter*/
 221:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = SHS0->SHSCFG  | SHS_SHSCFG_SCWC_Msk;
 222:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~(SHS_SHSCFG_ANOFF_Msk);
 223:../Libraries/XMCLib/src/xmc_vadc.c ****   SHS0->SHSCFG = reg;
 224:../Libraries/XMCLib/src/xmc_vadc.c **** 
 225:../Libraries/XMCLib/src/xmc_vadc.c ****   /* From the Errata sheet of XMC1100 V1.7*/
 226:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
 227:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 228:../Libraries/XMCLib/src/xmc_vadc.c **** 
 229:../Libraries/XMCLib/src/xmc_vadc.c **** }
 553              	 .loc 2 229 0
 554 004c 0837     	 adds r7,r7,#8
 555              	.LCFI55:
 556              	 .cfi_def_cfa_offset 8
 557 004e BD46     	 mov sp,r7
 558              	.LCFI56:
 559              	 .cfi_def_cfa_register 13
 560              	 
 561 0050 80BD     	 pop {r7,pc}
 562              	 .cfi_endproc
 563              	.LFE241:
 565 0052 00BF     	 .section .text.XMC_VADC_GLOBAL_InputClassInit,"ax",%progbits
 566              	 .align 2
 567              	 .global XMC_VADC_GLOBAL_InputClassInit
 568              	 .thumb
 569              	 .thumb_func
 571              	XMC_VADC_GLOBAL_InputClassInit:
 572              	.LFB242:
 230:../Libraries/XMCLib/src/xmc_vadc.c **** 
 231:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to Set the Global IClass registers*/
 232:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLAS
 233:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
 234:../Libraries/XMCLib/src/xmc_vadc.c **** {
 573              	 .loc 2 234 0
 574              	 .cfi_startproc
 575              	 
 576              	 
 577              	 
 578 0000 80B4     	 push {r7}
 579              	.LCFI57:
 580              	 .cfi_def_cfa_offset 4
 581              	 .cfi_offset 7,-4
 582 0002 85B0     	 sub sp,sp,#20
 583              	.LCFI58:
 584              	 .cfi_def_cfa_offset 24
 585 0004 00AF     	 add r7,sp,#0
 586              	.LCFI59:
 587              	 .cfi_def_cfa_register 7
 588 0006 F860     	 str r0,[r7,#12]
 589 0008 B960     	 str r1,[r7,#8]
 590 000a 3B60     	 str r3,[r7]
 591 000c 1346     	 mov r3,r2
 592 000e FB71     	 strb r3,[r7,#7]
 235:../Libraries/XMCLib/src/xmc_vadc.c **** 
 236:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
 237:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP
 238:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLA
 239:../Libraries/XMCLib/src/xmc_vadc.c **** 
 240:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
 241:../Libraries/XMCLib/src/xmc_vadc.c ****   if (conv_type == XMC_VADC_GROUP_CONV_STD )
 593              	 .loc 2 241 0
 594 0010 FB79     	 ldrb r3,[r7,#7]
 595 0012 002B     	 cmp r3,#0
 596 0014 09D1     	 bne .L14
 242:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 243:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 244:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->GLOBICLASS[set_num] = config.globiclass &
 597              	 .loc 2 244 0
 598 0016 BA68     	 ldr r2,[r7,#8]
 599 0018 40F21F73 	 movw r3,#1823
 600 001c 1340     	 ands r3,r3,r2
 601 001e FA68     	 ldr r2,[r7,#12]
 602 0020 3968     	 ldr r1,[r7]
 603 0022 2831     	 adds r1,r1,#40
 604 0024 42F82130 	 str r3,[r2,r1,lsl#2]
 605 0028 07E0     	 b .L13
 606              	.L14:
 245:../Libraries/XMCLib/src/xmc_vadc.c ****                                       (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk
 246:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
 247:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 248:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 249:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 250:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC
 607              	 .loc 2 250 0
 608 002a BA68     	 ldr r2,[r7,#8]
 609 002c 054B     	 ldr r3,.L16
 610 002e 1340     	 ands r3,r3,r2
 611 0030 FA68     	 ldr r2,[r7,#12]
 612 0032 3968     	 ldr r1,[r7]
 613 0034 2831     	 adds r1,r1,#40
 614 0036 42F82130 	 str r3,[r2,r1,lsl#2]
 615              	.L13:
 251:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 252:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 253:../Libraries/XMCLib/src/xmc_vadc.c **** }
 616              	 .loc 2 253 0
 617 003a 1437     	 adds r7,r7,#20
 618              	.LCFI60:
 619              	 .cfi_def_cfa_offset 4
 620 003c BD46     	 mov sp,r7
 621              	.LCFI61:
 622              	 .cfi_def_cfa_register 13
 623              	 
 624 003e 5DF8047B 	 ldr r7,[sp],#4
 625              	.LCFI62:
 626              	 .cfi_restore 7
 627              	 .cfi_def_cfa_offset 0
 628 0042 7047     	 bx lr
 629              	.L17:
 630              	 .align 2
 631              	.L16:
 632 0044 00001F07 	 .word 119472128
 633              	 .cfi_endproc
 634              	.LFE242:
 636              	 .section .text.XMC_VADC_GLOBAL_StartupCalibration,"ax",%progbits
 637              	 .align 2
 638              	 .global XMC_VADC_GLOBAL_StartupCalibration
 639              	 .thumb
 640              	 .thumb_func
 642              	XMC_VADC_GLOBAL_StartupCalibration:
 643              	.LFB243:
 254:../Libraries/XMCLib/src/xmc_vadc.c **** 
 255:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable startup calibration feature */
 256:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
 257:../Libraries/XMCLib/src/xmc_vadc.c **** {
 644              	 .loc 2 257 0
 645              	 .cfi_startproc
 646              	 
 647              	 
 648              	 
 649 0000 80B4     	 push {r7}
 650              	.LCFI63:
 651              	 .cfi_def_cfa_offset 4
 652              	 .cfi_offset 7,-4
 653 0002 85B0     	 sub sp,sp,#20
 654              	.LCFI64:
 655              	 .cfi_def_cfa_offset 24
 656 0004 00AF     	 add r7,sp,#0
 657              	.LCFI65:
 658              	 .cfi_def_cfa_register 7
 659 0006 7860     	 str r0,[r7,#4]
 258:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 259:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t i;
 260:../Libraries/XMCLib/src/xmc_vadc.c ****   VADC_G_TypeDef *group_ptr;
 261:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 262:../Libraries/XMCLib/src/xmc_vadc.c ****   
 263:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))
 264:../Libraries/XMCLib/src/xmc_vadc.c **** 
 265:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 660              	 .loc 2 265 0
 661 0008 7B68     	 ldr r3,[r7,#4]
 662 000a D3F88030 	 ldr r3,[r3,#128]
 663 000e 43F00042 	 orr r2,r3,#-2147483648
 664 0012 7B68     	 ldr r3,[r7,#4]
 665 0014 C3F88020 	 str r2,[r3,#128]
 266:../Libraries/XMCLib/src/xmc_vadc.c **** 
 267:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 268:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop until all active groups finish calibration */
 269:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 666              	 .loc 2 269 0
 667 0018 0023     	 movs r3,#0
 668 001a FB73     	 strb r3,[r7,#15]
 669 001c 16E0     	 b .L19
 670              	.L22:
 270:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 271:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr = g_xmc_vadc_group_array[i];
 671              	 .loc 2 271 0
 672 001e FB7B     	 ldrb r3,[r7,#15]
 673 0020 0E4A     	 ldr r2,.L23
 674 0022 52F82330 	 ldr r3,[r2,r3,lsl#2]
 675 0026 BB60     	 str r3,[r7,#8]
 272:../Libraries/XMCLib/src/xmc_vadc.c ****     if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 676              	 .loc 2 272 0
 677 0028 BB68     	 ldr r3,[r7,#8]
 678 002a D3F88030 	 ldr r3,[r3,#128]
 679 002e 03F44033 	 and r3,r3,#196608
 680 0032 002B     	 cmp r3,#0
 681 0034 07D0     	 beq .L20
 273:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 274:../Libraries/XMCLib/src/xmc_vadc.c ****       /* This group is active. Loop until it finishes calibration */
 275:../Libraries/XMCLib/src/xmc_vadc.c ****       while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 682              	 .loc 2 275 0
 683 0036 00BF     	 nop
 684              	.L21:
 685              	 .loc 2 275 0 is_stmt 0 discriminator 1
 686 0038 BB68     	 ldr r3,[r7,#8]
 687 003a D3F88030 	 ldr r3,[r3,#128]
 688 003e 03F08053 	 and r3,r3,#268435456
 689 0042 002B     	 cmp r3,#0
 690 0044 F8D1     	 bne .L21
 691              	.L20:
 269:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 692              	 .loc 2 269 0 is_stmt 1 discriminator 2
 693 0046 FB7B     	 ldrb r3,[r7,#15]
 694 0048 0133     	 adds r3,r3,#1
 695 004a FB73     	 strb r3,[r7,#15]
 696              	.L19:
 269:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 697              	 .loc 2 269 0 is_stmt 0 discriminator 1
 698 004c FB7B     	 ldrb r3,[r7,#15]
 699 004e 032B     	 cmp r3,#3
 700 0050 E5D9     	 bls .L22
 276:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 277:../Libraries/XMCLib/src/xmc_vadc.c ****         /* NOP */
 278:../Libraries/XMCLib/src/xmc_vadc.c ****       }
 279:../Libraries/XMCLib/src/xmc_vadc.c ****     }
 280:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 281:../Libraries/XMCLib/src/xmc_vadc.c **** #else
 282:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop until it finishes calibration */
 283:../Libraries/XMCLib/src/xmc_vadc.c ****   while ((((SHS0->SHSCFG) & (uint32_t)SHS_SHSCFG_STATE_Msk) >> (uint32_t)SHS_SHSCFG_STATE_Pos) ==
 284:../Libraries/XMCLib/src/xmc_vadc.c ****          XMC_VADC_SHS_START_UP_CAL_ACTIVE )
 285:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 286:../Libraries/XMCLib/src/xmc_vadc.c ****     /* NOP */
 287:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 288:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 289:../Libraries/XMCLib/src/xmc_vadc.c **** }
 701              	 .loc 2 289 0 is_stmt 1
 702 0052 1437     	 adds r7,r7,#20
 703              	.LCFI66:
 704              	 .cfi_def_cfa_offset 4
 705 0054 BD46     	 mov sp,r7
 706              	.LCFI67:
 707              	 .cfi_def_cfa_register 13
 708              	 
 709 0056 5DF8047B 	 ldr r7,[sp],#4
 710              	.LCFI68:
 711              	 .cfi_restore 7
 712              	 .cfi_def_cfa_offset 0
 713 005a 7047     	 bx lr
 714              	.L24:
 715              	 .align 2
 716              	.L23:
 717 005c 00000000 	 .word g_xmc_vadc_group_array
 718              	 .cfi_endproc
 719              	.LFE243:
 721              	 .section .text.XMC_VADC_GLOBAL_SetBoundaries,"ax",%progbits
 722              	 .align 2
 723              	 .global XMC_VADC_GLOBAL_SetBoundaries
 724              	 .thumb
 725              	 .thumb_func
 727              	XMC_VADC_GLOBAL_SetBoundaries:
 728              	.LFB244:
 290:../Libraries/XMCLib/src/xmc_vadc.c **** 
 291:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set boudaries for result of conversion. Should the boundaries be violated, interrupts are
 292:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
 293:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetBoundaries(XMC_VADC_GLOBAL_t *const global_ptr,
 294:../Libraries/XMCLib/src/xmc_vadc.c ****                                    const uint32_t boundary0,
 295:../Libraries/XMCLib/src/xmc_vadc.c ****                                    const uint32_t boundary1)
 296:../Libraries/XMCLib/src/xmc_vadc.c **** {
 729              	 .loc 2 296 0
 730              	 .cfi_startproc
 731              	 
 732              	 
 733              	 
 734 0000 80B4     	 push {r7}
 735              	.LCFI69:
 736              	 .cfi_def_cfa_offset 4
 737              	 .cfi_offset 7,-4
 738 0002 87B0     	 sub sp,sp,#28
 739              	.LCFI70:
 740              	 .cfi_def_cfa_offset 32
 741 0004 00AF     	 add r7,sp,#0
 742              	.LCFI71:
 743              	 .cfi_def_cfa_register 7
 744 0006 F860     	 str r0,[r7,#12]
 745 0008 B960     	 str r1,[r7,#8]
 746 000a 7A60     	 str r2,[r7,#4]
 297:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t globbound;
 298:../Libraries/XMCLib/src/xmc_vadc.c **** 
 299:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Module Pointer", (global_ptr == VADC))
 300:../Libraries/XMCLib/src/xmc_vadc.c **** 
 301:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound = 0U;
 747              	 .loc 2 301 0
 748 000c 0023     	 movs r3,#0
 749 000e 7B61     	 str r3,[r7,#20]
 302:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound |= (uint32_t) (boundary0 << VADC_GLOBBOUND_BOUNDARY0_Pos);
 750              	 .loc 2 302 0
 751 0010 7A69     	 ldr r2,[r7,#20]
 752 0012 BB68     	 ldr r3,[r7,#8]
 753 0014 1343     	 orrs r3,r3,r2
 754 0016 7B61     	 str r3,[r7,#20]
 303:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound |= (uint32_t) (boundary1 << VADC_GLOBBOUND_BOUNDARY1_Pos);
 755              	 .loc 2 303 0
 756 0018 7B68     	 ldr r3,[r7,#4]
 757 001a 1B04     	 lsls r3,r3,#16
 758 001c 7A69     	 ldr r2,[r7,#20]
 759 001e 1343     	 orrs r3,r3,r2
 760 0020 7B61     	 str r3,[r7,#20]
 304:../Libraries/XMCLib/src/xmc_vadc.c **** 
 305:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = globbound;
 761              	 .loc 2 305 0
 762 0022 FB68     	 ldr r3,[r7,#12]
 763 0024 7A69     	 ldr r2,[r7,#20]
 764 0026 C3F8B820 	 str r2,[r3,#184]
 306:../Libraries/XMCLib/src/xmc_vadc.c **** }
 765              	 .loc 2 306 0
 766 002a 1C37     	 adds r7,r7,#28
 767              	.LCFI72:
 768              	 .cfi_def_cfa_offset 4
 769 002c BD46     	 mov sp,r7
 770              	.LCFI73:
 771              	 .cfi_def_cfa_register 13
 772              	 
 773 002e 5DF8047B 	 ldr r7,[sp],#4
 774              	.LCFI74:
 775              	 .cfi_restore 7
 776              	 .cfi_def_cfa_offset 0
 777 0032 7047     	 bx lr
 778              	 .cfi_endproc
 779              	.LFE244:
 781              	 .section .text.XMC_VADC_GLOBAL_SetIndividualBoundary,"ax",%progbits
 782              	 .align 2
 783              	 .global XMC_VADC_GLOBAL_SetIndividualBoundary
 784              	 .thumb
 785              	 .thumb_func
 787              	XMC_VADC_GLOBAL_SetIndividualBoundary:
 788              	.LFB245:
 307:../Libraries/XMCLib/src/xmc_vadc.c **** 
 308:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set an individual boundary for conversion results */
 309:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetIndividualBoundary(XMC_VADC_GLOBAL_t *const global_ptr,
 310:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const XMC_VADC_CHANNEL_BOUNDARY_t selection,
 311:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const uint16_t boundary_value)
 312:../Libraries/XMCLib/src/xmc_vadc.c **** {
 789              	 .loc 2 312 0
 790              	 .cfi_startproc
 791              	 
 792              	 
 793              	 
 794 0000 80B4     	 push {r7}
 795              	.LCFI75:
 796              	 .cfi_def_cfa_offset 4
 797              	 .cfi_offset 7,-4
 798 0002 85B0     	 sub sp,sp,#20
 799              	.LCFI76:
 800              	 .cfi_def_cfa_offset 24
 801 0004 00AF     	 add r7,sp,#0
 802              	.LCFI77:
 803              	 .cfi_def_cfa_register 7
 804 0006 7860     	 str r0,[r7,#4]
 805 0008 0B46     	 mov r3,r1
 806 000a FB70     	 strb r3,[r7,#3]
 807 000c 1346     	 mov r3,r2
 808 000e 3B80     	 strh r3,[r7]
 313:../Libraries/XMCLib/src/xmc_vadc.c **** 
 314:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t globbound;
 315:../Libraries/XMCLib/src/xmc_vadc.c **** 
 316:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Module Pointer", (global_ptr == VADC))
 317:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Boundary Selection",
 318:../Libraries/XMCLib/src/xmc_vadc.c ****              ((XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0 == selection) ||
 319:../Libraries/XMCLib/src/xmc_vadc.c ****               (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1 == selection)))
 320:../Libraries/XMCLib/src/xmc_vadc.c **** 
 321:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 322:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound = global_ptr->GLOBBOUND;
 809              	 .loc 2 322 0
 810 0010 7B68     	 ldr r3,[r7,#4]
 811 0012 D3F8B830 	 ldr r3,[r3,#184]
 812 0016 FB60     	 str r3,[r7,#12]
 323:../Libraries/XMCLib/src/xmc_vadc.c **** 
 324:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0 == selection)
 813              	 .loc 2 324 0
 814 0018 FB78     	 ldrb r3,[r7,#3]
 815 001a 022B     	 cmp r3,#2
 816 001c 0AD1     	 bne .L27
 325:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 326:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound &= ~((uint32_t) VADC_GLOBBOUND_BOUNDARY0_Msk);
 817              	 .loc 2 326 0
 818 001e FB68     	 ldr r3,[r7,#12]
 819 0020 23F47F63 	 bic r3,r3,#4080
 820 0024 23F00F03 	 bic r3,r3,#15
 821 0028 FB60     	 str r3,[r7,#12]
 327:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound |= (uint32_t) ((uint32_t) boundary_value << VADC_GLOBBOUND_BOUNDARY0_Pos);
 822              	 .loc 2 327 0
 823 002a 3B88     	 ldrh r3,[r7]
 824 002c FA68     	 ldr r2,[r7,#12]
 825 002e 1343     	 orrs r3,r3,r2
 826 0030 FB60     	 str r3,[r7,#12]
 827 0032 0DE0     	 b .L28
 828              	.L27:
 328:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 329:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1 == selection)
 829              	 .loc 2 329 0
 830 0034 FB78     	 ldrb r3,[r7,#3]
 831 0036 032B     	 cmp r3,#3
 832 0038 0AD1     	 bne .L28
 330:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 331:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound &= ~((uint32_t) VADC_GLOBBOUND_BOUNDARY1_Msk);
 833              	 .loc 2 331 0
 834 003a FB68     	 ldr r3,[r7,#12]
 835 003c 23F07F63 	 bic r3,r3,#267386880
 836 0040 23F47023 	 bic r3,r3,#983040
 837 0044 FB60     	 str r3,[r7,#12]
 332:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound |= (uint32_t) ((uint32_t) boundary_value << VADC_GLOBBOUND_BOUNDARY1_Pos);
 838              	 .loc 2 332 0
 839 0046 3B88     	 ldrh r3,[r7]
 840 0048 1B04     	 lsls r3,r3,#16
 841 004a FA68     	 ldr r2,[r7,#12]
 842 004c 1343     	 orrs r3,r3,r2
 843 004e FB60     	 str r3,[r7,#12]
 844              	.L28:
 333:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 334:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 335:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 336:../Libraries/XMCLib/src/xmc_vadc.c ****     /* For MISRA*/
 337:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 338:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = globbound;
 845              	 .loc 2 338 0
 846 0050 7B68     	 ldr r3,[r7,#4]
 847 0052 FA68     	 ldr r2,[r7,#12]
 848 0054 C3F8B820 	 str r2,[r3,#184]
 339:../Libraries/XMCLib/src/xmc_vadc.c **** 
 340:../Libraries/XMCLib/src/xmc_vadc.c **** }
 849              	 .loc 2 340 0
 850 0058 1437     	 adds r7,r7,#20
 851              	.LCFI78:
 852              	 .cfi_def_cfa_offset 4
 853 005a BD46     	 mov sp,r7
 854              	.LCFI79:
 855              	 .cfi_def_cfa_register 13
 856              	 
 857 005c 5DF8047B 	 ldr r7,[sp],#4
 858              	.LCFI80:
 859              	 .cfi_restore 7
 860              	 .cfi_def_cfa_offset 0
 861 0060 7047     	 bx lr
 862              	 .cfi_endproc
 863              	.LFE245:
 865 0062 00BF     	 .section .text.XMC_VADC_GLOBAL_SetCompareValue,"ax",%progbits
 866              	 .align 2
 867              	 .global XMC_VADC_GLOBAL_SetCompareValue
 868              	 .thumb
 869              	 .thumb_func
 871              	XMC_VADC_GLOBAL_SetCompareValue:
 872              	.LFB246:
 341:../Libraries/XMCLib/src/xmc_vadc.c **** 
 342:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 343:../Libraries/XMCLib/src/xmc_vadc.c **** 
 344:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set compare value for the result register. Result of conversion is compared against this 
 345:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetCompareValue(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_SIZ
 346:../Libraries/XMCLib/src/xmc_vadc.c **** {
 873              	 .loc 2 346 0
 874              	 .cfi_startproc
 875              	 
 876              	 
 877              	 
 878 0000 80B4     	 push {r7}
 879              	.LCFI81:
 880              	 .cfi_def_cfa_offset 4
 881              	 .cfi_offset 7,-4
 882 0002 83B0     	 sub sp,sp,#12
 883              	.LCFI82:
 884              	 .cfi_def_cfa_offset 16
 885 0004 00AF     	 add r7,sp,#0
 886              	.LCFI83:
 887              	 .cfi_def_cfa_register 7
 888 0006 7860     	 str r0,[r7,#4]
 889 0008 0B46     	 mov r3,r1
 890 000a 7B80     	 strh r3,[r7,#2]
 347:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetCompareValue:Wrong Module Pointer", (global_ptr == VADC))
 348:../Libraries/XMCLib/src/xmc_vadc.c **** 
 349:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRES &= ~((uint32_t)VADC_GLOBRES_RESULT_Msk);
 891              	 .loc 2 349 0
 892 000c 7B68     	 ldr r3,[r7,#4]
 893 000e D3F80033 	 ldr r3,[r3,#768]
 894 0012 1B0C     	 lsrs r3,r3,#16
 895 0014 1B04     	 lsls r3,r3,#16
 896 0016 7A68     	 ldr r2,[r7,#4]
 897 0018 C2F80033 	 str r3,[r2,#768]
 350:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRES |= (uint32_t)((uint32_t)compare_val << XMC_VADC_RESULT_LEFT_ALIGN_10BIT);
 898              	 .loc 2 350 0
 899 001c 7B68     	 ldr r3,[r7,#4]
 900 001e D3F80023 	 ldr r2,[r3,#768]
 901 0022 7B88     	 ldrh r3,[r7,#2]
 902 0024 9B00     	 lsls r3,r3,#2
 903 0026 1A43     	 orrs r2,r2,r3
 904 0028 7B68     	 ldr r3,[r7,#4]
 905 002a C3F80023 	 str r2,[r3,#768]
 351:../Libraries/XMCLib/src/xmc_vadc.c **** }
 906              	 .loc 2 351 0
 907 002e 0C37     	 adds r7,r7,#12
 908              	.LCFI84:
 909              	 .cfi_def_cfa_offset 4
 910 0030 BD46     	 mov sp,r7
 911              	.LCFI85:
 912              	 .cfi_def_cfa_register 13
 913              	 
 914 0032 5DF8047B 	 ldr r7,[sp],#4
 915              	.LCFI86:
 916              	 .cfi_restore 7
 917              	 .cfi_def_cfa_offset 0
 918 0036 7047     	 bx lr
 919              	 .cfi_endproc
 920              	.LFE246:
 922              	 .section .text.XMC_VADC_GLOBAL_GetCompareResult,"ax",%progbits
 923              	 .align 2
 924              	 .global XMC_VADC_GLOBAL_GetCompareResult
 925              	 .thumb
 926              	 .thumb_func
 928              	XMC_VADC_GLOBAL_GetCompareResult:
 929              	.LFB247:
 352:../Libraries/XMCLib/src/xmc_vadc.c **** 
 353:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result of comparison */
 354:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GLOBAL_GetCompareResult(XMC_VADC_GLOBAL_t *const global_ptr)
 355:../Libraries/XMCLib/src/xmc_vadc.c **** {
 930              	 .loc 2 355 0
 931              	 .cfi_startproc
 932              	 
 933              	 
 934              	 
 935 0000 80B4     	 push {r7}
 936              	.LCFI87:
 937              	 .cfi_def_cfa_offset 4
 938              	 .cfi_offset 7,-4
 939 0002 85B0     	 sub sp,sp,#20
 940              	.LCFI88:
 941              	 .cfi_def_cfa_offset 24
 942 0004 00AF     	 add r7,sp,#0
 943              	.LCFI89:
 944              	 .cfi_def_cfa_register 7
 945 0006 7860     	 str r0,[r7,#4]
 356:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_FAST_COMPARE_t result;
 357:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
 358:../Libraries/XMCLib/src/xmc_vadc.c **** 
 359:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetCompareResult:Wrong Module Pointer", (global_ptr == VADC))
 360:../Libraries/XMCLib/src/xmc_vadc.c **** 
 361:../Libraries/XMCLib/src/xmc_vadc.c ****   res = global_ptr->GLOBRES;
 946              	 .loc 2 361 0
 947 0008 7B68     	 ldr r3,[r7,#4]
 948 000a D3F80033 	 ldr r3,[r3,#768]
 949 000e BB60     	 str r3,[r7,#8]
 362:../Libraries/XMCLib/src/xmc_vadc.c **** 
 363:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res & (uint32_t)VADC_GLOBRES_VF_Msk)
 950              	 .loc 2 363 0
 951 0010 BB68     	 ldr r3,[r7,#8]
 952 0012 002B     	 cmp r3,#0
 953 0014 06DA     	 bge .L31
 364:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 365:../Libraries/XMCLib/src/xmc_vadc.c ****     result = (XMC_VADC_FAST_COMPARE_t)((uint32_t)(res >> (uint32_t)VADC_GLOBRES_FCR_Pos) & (uint32_
 954              	 .loc 2 365 0
 955 0016 BB68     	 ldr r3,[r7,#8]
 956 0018 9B0F     	 lsrs r3,r3,#30
 957 001a DBB2     	 uxtb r3,r3
 958 001c 03F00103 	 and r3,r3,#1
 959 0020 FB73     	 strb r3,[r7,#15]
 960 0022 01E0     	 b .L32
 961              	.L31:
 366:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 367:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 368:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 369:../Libraries/XMCLib/src/xmc_vadc.c ****     result = XMC_VADC_FAST_COMPARE_UNKNOWN;
 962              	 .loc 2 369 0
 963 0024 0223     	 movs r3,#2
 964 0026 FB73     	 strb r3,[r7,#15]
 965              	.L32:
 370:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 371:../Libraries/XMCLib/src/xmc_vadc.c **** 
 372:../Libraries/XMCLib/src/xmc_vadc.c ****   return result;
 966              	 .loc 2 372 0
 967 0028 FB7B     	 ldrb r3,[r7,#15]
 373:../Libraries/XMCLib/src/xmc_vadc.c **** }
 968              	 .loc 2 373 0
 969 002a 1846     	 mov r0,r3
 970 002c 1437     	 adds r7,r7,#20
 971              	.LCFI90:
 972              	 .cfi_def_cfa_offset 4
 973 002e BD46     	 mov sp,r7
 974              	.LCFI91:
 975              	 .cfi_def_cfa_register 13
 976              	 
 977 0030 5DF8047B 	 ldr r7,[sp],#4
 978              	.LCFI92:
 979              	 .cfi_restore 7
 980              	 .cfi_def_cfa_offset 0
 981 0034 7047     	 bx lr
 982              	 .cfi_endproc
 983              	.LFE247:
 985 0036 00BF     	 .section .text.XMC_VADC_GLOBAL_BindGroupToEMux,"ax",%progbits
 986              	 .align 2
 987              	 .global XMC_VADC_GLOBAL_BindGroupToEMux
 988              	 .thumb
 989              	 .thumb_func
 991              	XMC_VADC_GLOBAL_BindGroupToEMux:
 992              	.LFB248:
 374:../Libraries/XMCLib/src/xmc_vadc.c **** 
 375:../Libraries/XMCLib/src/xmc_vadc.c **** /* Bind one of the four groups to one of the two EMUX interfaces */
 376:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_EMUX_AVAILABLE == 1U)
 377:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BindGroupToEMux(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t emuxif, co
 378:../Libraries/XMCLib/src/xmc_vadc.c **** {
 993              	 .loc 2 378 0
 994              	 .cfi_startproc
 995              	 
 996              	 
 997              	 
 998 0000 80B4     	 push {r7}
 999              	.LCFI93:
 1000              	 .cfi_def_cfa_offset 4
 1001              	 .cfi_offset 7,-4
 1002 0002 87B0     	 sub sp,sp,#28
 1003              	.LCFI94:
 1004              	 .cfi_def_cfa_offset 32
 1005 0004 00AF     	 add r7,sp,#0
 1006              	.LCFI95:
 1007              	 .cfi_def_cfa_register 7
 1008 0006 F860     	 str r0,[r7,#12]
 1009 0008 B960     	 str r1,[r7,#8]
 1010 000a 7A60     	 str r2,[r7,#4]
 379:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t mask;
 380:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t pos;
 381:../Libraries/XMCLib/src/xmc_vadc.c **** 
 382:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong Module Pointer", (global_ptr == VADC))
 383:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong EMUX Group", (emuxif < XMC_VADC_NUM_EMUX_INTERF
 384:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong VADC Group", (group < XMC_VADC_MAXIMUM_NUM_GROU
 385:../Libraries/XMCLib/src/xmc_vadc.c **** 
 386:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == emuxif)
 1011              	 .loc 2 386 0
 1012 000c BB68     	 ldr r3,[r7,#8]
 1013 000e 002B     	 cmp r3,#0
 1014 0010 04D1     	 bne .L35
 387:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 388:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t)VADC_EMUXSEL_EMUXGRP0_Pos;
 1015              	 .loc 2 388 0
 1016 0012 0023     	 movs r3,#0
 1017 0014 3B61     	 str r3,[r7,#16]
 389:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)VADC_EMUXSEL_EMUXGRP0_Msk;
 1018              	 .loc 2 389 0
 1019 0016 0F23     	 movs r3,#15
 1020 0018 7B61     	 str r3,[r7,#20]
 1021 001a 03E0     	 b .L36
 1022              	.L35:
 390:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 391:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 392:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 393:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t)VADC_EMUXSEL_EMUXGRP1_Pos;
 1023              	 .loc 2 393 0
 1024 001c 0423     	 movs r3,#4
 1025 001e 3B61     	 str r3,[r7,#16]
 394:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)VADC_EMUXSEL_EMUXGRP1_Msk;
 1026              	 .loc 2 394 0
 1027 0020 F023     	 movs r3,#240
 1028 0022 7B61     	 str r3,[r7,#20]
 1029              	.L36:
 395:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 396:../Libraries/XMCLib/src/xmc_vadc.c **** 
 397:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->EMUXSEL &= ~(mask);
 1030              	 .loc 2 397 0
 1031 0024 FB68     	 ldr r3,[r7,#12]
 1032 0026 D3F8F023 	 ldr r2,[r3,#1008]
 1033 002a 7B69     	 ldr r3,[r7,#20]
 1034 002c DB43     	 mvns r3,r3
 1035 002e 1A40     	 ands r2,r2,r3
 1036 0030 FB68     	 ldr r3,[r7,#12]
 1037 0032 C3F8F023 	 str r2,[r3,#1008]
 398:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->EMUXSEL |= (uint32_t) (group << pos);
 1038              	 .loc 2 398 0
 1039 0036 FB68     	 ldr r3,[r7,#12]
 1040 0038 D3F8F023 	 ldr r2,[r3,#1008]
 1041 003c 3B69     	 ldr r3,[r7,#16]
 1042 003e 7968     	 ldr r1,[r7,#4]
 1043 0040 01FA03F3 	 lsl r3,r1,r3
 1044 0044 1A43     	 orrs r2,r2,r3
 1045 0046 FB68     	 ldr r3,[r7,#12]
 1046 0048 C3F8F023 	 str r2,[r3,#1008]
 399:../Libraries/XMCLib/src/xmc_vadc.c **** 
 400:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1047              	 .loc 2 400 0
 1048 004c 1C37     	 adds r7,r7,#28
 1049              	.LCFI96:
 1050              	 .cfi_def_cfa_offset 4
 1051 004e BD46     	 mov sp,r7
 1052              	.LCFI97:
 1053              	 .cfi_def_cfa_register 13
 1054              	 
 1055 0050 5DF8047B 	 ldr r7,[sp],#4
 1056              	.LCFI98:
 1057              	 .cfi_restore 7
 1058              	 .cfi_def_cfa_offset 0
 1059 0054 7047     	 bx lr
 1060              	 .cfi_endproc
 1061              	.LFE248:
 1063 0056 00BF     	 .section .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode,"ax",%progbits
 1064              	 .align 2
 1065              	 .global XMC_VADC_GLOBAL_SetResultEventInterruptNode
 1066              	 .thumb
 1067              	 .thumb_func
 1069              	XMC_VADC_GLOBAL_SetResultEventInterruptNode:
 1070              	.LFB249:
 401:../Libraries/XMCLib/src/xmc_vadc.c **** #endif 
 402:../Libraries/XMCLib/src/xmc_vadc.c **** 
 403:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind result event with a service request line */
 404:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t
 405:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1071              	 .loc 2 405 0
 1072              	 .cfi_startproc
 1073              	 
 1074              	 
 1075              	 
 1076 0000 80B4     	 push {r7}
 1077              	.LCFI99:
 1078              	 .cfi_def_cfa_offset 4
 1079              	 .cfi_offset 7,-4
 1080 0002 85B0     	 sub sp,sp,#20
 1081              	.LCFI100:
 1082              	 .cfi_def_cfa_offset 24
 1083 0004 00AF     	 add r7,sp,#0
 1084              	.LCFI101:
 1085              	 .cfi_def_cfa_register 7
 1086 0006 7860     	 str r0,[r7,#4]
 1087 0008 0B46     	 mov r3,r1
 1088 000a FB70     	 strb r3,[r7,#3]
 406:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t node;
 407:../Libraries/XMCLib/src/xmc_vadc.c ****   
 408:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetResultEventInterruptNode:Wrong Module Pointer", (global_ptr == VAD
 409:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetResultEventInterruptNode:Wrong SR Number", (sr <= XMC_VADC_SR_SHAR
 410:../Libraries/XMCLib/src/xmc_vadc.c **** 
 411:../Libraries/XMCLib/src/xmc_vadc.c ****   if (sr >= XMC_VADC_SR_SHARED_SR0)
 1089              	 .loc 2 411 0
 1090 000c FB78     	 ldrb r3,[r7,#3]
 1091 000e 032B     	 cmp r3,#3
 1092 0010 03D9     	 bls .L38
 412:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 413:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 1093              	 .loc 2 413 0
 1094 0012 FB78     	 ldrb r3,[r7,#3]
 1095 0014 043B     	 subs r3,r3,#4
 1096 0016 FB60     	 str r3,[r7,#12]
 1097 0018 01E0     	 b .L39
 1098              	.L38:
 414:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 415:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 416:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 417:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr;
 1099              	 .loc 2 417 0
 1100 001a FB78     	 ldrb r3,[r7,#3]
 1101 001c FB60     	 str r3,[r7,#12]
 1102              	.L39:
 418:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 419:../Libraries/XMCLib/src/xmc_vadc.c **** 
 420:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_REV0NP_Msk);
 1103              	 .loc 2 420 0
 1104 001e 7B68     	 ldr r3,[r7,#4]
 1105 0020 D3F84031 	 ldr r3,[r3,#320]
 1106 0024 23F47022 	 bic r2,r3,#983040
 1107 0028 7B68     	 ldr r3,[r7,#4]
 1108 002a C3F84021 	 str r2,[r3,#320]
 421:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
 1109              	 .loc 2 421 0
 1110 002e 7B68     	 ldr r3,[r7,#4]
 1111 0030 D3F84021 	 ldr r2,[r3,#320]
 1112 0034 FB68     	 ldr r3,[r7,#12]
 1113 0036 1B04     	 lsls r3,r3,#16
 1114 0038 1A43     	 orrs r2,r2,r3
 1115 003a 7B68     	 ldr r3,[r7,#4]
 1116 003c C3F84021 	 str r2,[r3,#320]
 422:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1117              	 .loc 2 422 0
 1118 0040 1437     	 adds r7,r7,#20
 1119              	.LCFI102:
 1120              	 .cfi_def_cfa_offset 4
 1121 0042 BD46     	 mov sp,r7
 1122              	.LCFI103:
 1123              	 .cfi_def_cfa_register 13
 1124              	 
 1125 0044 5DF8047B 	 ldr r7,[sp],#4
 1126              	.LCFI104:
 1127              	 .cfi_restore 7
 1128              	 .cfi_def_cfa_offset 0
 1129 0048 7047     	 bx lr
 1130              	 .cfi_endproc
 1131              	.LFE249:
 1133 004a 00BF     	 .section .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode,"ax",%progbits
 1134              	 .align 2
 1135              	 .global XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode
 1136              	 .thumb
 1137              	 .thumb_func
 1139              	XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:
 1140              	.LFB250:
 423:../Libraries/XMCLib/src/xmc_vadc.c **** 
 424:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind request source event with a service request line */
 425:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC
 426:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1141              	 .loc 2 426 0
 1142              	 .cfi_startproc
 1143              	 
 1144              	 
 1145              	 
 1146 0000 80B4     	 push {r7}
 1147              	.LCFI105:
 1148              	 .cfi_def_cfa_offset 4
 1149              	 .cfi_offset 7,-4
 1150 0002 85B0     	 sub sp,sp,#20
 1151              	.LCFI106:
 1152              	 .cfi_def_cfa_offset 24
 1153 0004 00AF     	 add r7,sp,#0
 1154              	.LCFI107:
 1155              	 .cfi_def_cfa_register 7
 1156 0006 7860     	 str r0,[r7,#4]
 1157 0008 0B46     	 mov r3,r1
 1158 000a FB70     	 strb r3,[r7,#3]
 427:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t node;
 428:../Libraries/XMCLib/src/xmc_vadc.c ****   
 429:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_
 430:../Libraries/XMCLib/src/xmc_vadc.c **** 
 431:../Libraries/XMCLib/src/xmc_vadc.c ****   if (sr >= XMC_VADC_SR_SHARED_SR0)
 1159              	 .loc 2 431 0
 1160 000c FB78     	 ldrb r3,[r7,#3]
 1161 000e 032B     	 cmp r3,#3
 1162 0010 03D9     	 bls .L41
 432:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 433:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 1163              	 .loc 2 433 0
 1164 0012 FB78     	 ldrb r3,[r7,#3]
 1165 0014 043B     	 subs r3,r3,#4
 1166 0016 FB60     	 str r3,[r7,#12]
 1167 0018 01E0     	 b .L42
 1168              	.L41:
 434:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 435:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 436:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 437:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr;
 1169              	 .loc 2 437 0
 1170 001a FB78     	 ldrb r3,[r7,#3]
 1171 001c FB60     	 str r3,[r7,#12]
 1172              	.L42:
 438:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 439:../Libraries/XMCLib/src/xmc_vadc.c **** 
 440:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 1173              	 .loc 2 440 0
 1174 001e 7B68     	 ldr r3,[r7,#4]
 1175 0020 D3F84031 	 ldr r3,[r3,#320]
 1176 0024 23F00F02 	 bic r2,r3,#15
 1177 0028 7B68     	 ldr r3,[r7,#4]
 1178 002a C3F84021 	 str r2,[r3,#320]
 441:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 1179              	 .loc 2 441 0
 1180 002e 7B68     	 ldr r3,[r7,#4]
 1181 0030 D3F84021 	 ldr r2,[r3,#320]
 1182 0034 FB68     	 ldr r3,[r7,#12]
 1183 0036 1A43     	 orrs r2,r2,r3
 1184 0038 7B68     	 ldr r3,[r7,#4]
 1185 003a C3F84021 	 str r2,[r3,#320]
 442:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1186              	 .loc 2 442 0
 1187 003e 1437     	 adds r7,r7,#20
 1188              	.LCFI108:
 1189              	 .cfi_def_cfa_offset 4
 1190 0040 BD46     	 mov sp,r7
 1191              	.LCFI109:
 1192              	 .cfi_def_cfa_register 13
 1193              	 
 1194 0042 5DF8047B 	 ldr r7,[sp],#4
 1195              	.LCFI110:
 1196              	 .cfi_restore 7
 1197              	 .cfi_def_cfa_offset 0
 1198 0046 7047     	 bx lr
 1199              	 .cfi_endproc
 1200              	.LFE250:
 1202              	 .section .text.XMC_VADC_GROUP_Init,"ax",%progbits
 1203              	 .align 2
 1204              	 .global XMC_VADC_GROUP_Init
 1205              	 .thumb
 1206              	 .thumb_func
 1208              	XMC_VADC_GROUP_Init:
 1209              	.LFB251:
 443:../Libraries/XMCLib/src/xmc_vadc.c **** 
 444:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize an instance of group of VADC hardware */
 445:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)  
 446:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
 447:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1210              	 .loc 2 447 0
 1211              	 .cfi_startproc
 1212              	 
 1213              	 
 1214 0000 80B5     	 push {r7,lr}
 1215              	.LCFI111:
 1216              	 .cfi_def_cfa_offset 8
 1217              	 .cfi_offset 7,-8
 1218              	 .cfi_offset 14,-4
 1219 0002 82B0     	 sub sp,sp,#8
 1220              	.LCFI112:
 1221              	 .cfi_def_cfa_offset 16
 1222 0004 00AF     	 add r7,sp,#0
 1223              	.LCFI113:
 1224              	 .cfi_def_cfa_register 7
 1225 0006 7860     	 str r0,[r7,#4]
 1226 0008 3960     	 str r1,[r7]
 448:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
 449:../Libraries/XMCLib/src/xmc_vadc.c **** 
 450:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the input classes */
 451:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 1227              	 .loc 2 451 0
 1228 000a 3B68     	 ldr r3,[r7]
 1229 000c 7868     	 ldr r0,[r7,#4]
 1230 000e 5968     	 ldr r1,[r3,#4]
 1231 0010 0022     	 movs r2,#0
 1232 0012 0023     	 movs r3,#0
 1233 0014 FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 452:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 1234              	 .loc 2 452 0
 1235 0018 3B68     	 ldr r3,[r7]
 1236 001a 7868     	 ldr r0,[r7,#4]
 1237 001c 5968     	 ldr r1,[r3,#4]
 1238 001e 0122     	 movs r2,#1
 1239 0020 0023     	 movs r3,#0
 1240 0022 FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 453:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 1241              	 .loc 2 453 0
 1242 0026 3B68     	 ldr r3,[r7]
 1243 0028 7868     	 ldr r0,[r7,#4]
 1244 002a 9968     	 ldr r1,[r3,#8]
 1245 002c 0022     	 movs r2,#0
 1246 002e 0123     	 movs r3,#1
 1247 0030 FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 454:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 1248              	 .loc 2 454 0
 1249 0034 3B68     	 ldr r3,[r7]
 1250 0036 7868     	 ldr r0,[r7,#4]
 1251 0038 9968     	 ldr r1,[r3,#8]
 1252 003a 0122     	 movs r2,#1
 1253 003c 0123     	 movs r3,#1
 1254 003e FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 455:../Libraries/XMCLib/src/xmc_vadc.c **** 
 456:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBCFG = config->g_arbcfg;
 1255              	 .loc 2 456 0
 1256 0042 3B68     	 ldr r3,[r7]
 1257 0044 1A69     	 ldr r2,[r3,#16]
 1258 0046 7B68     	 ldr r3,[r7,#4]
 1259 0048 C3F88020 	 str r2,[r3,#128]
 457:../Libraries/XMCLib/src/xmc_vadc.c **** 
 458:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = config->g_bound;
 1260              	 .loc 2 458 0
 1261 004c 3B68     	 ldr r3,[r7]
 1262 004e DA68     	 ldr r2,[r3,#12]
 1263 0050 7B68     	 ldr r3,[r7,#4]
 1264 0052 C3F8B820 	 str r2,[r3,#184]
 459:../Libraries/XMCLib/src/xmc_vadc.c **** 
 460:../Libraries/XMCLib/src/xmc_vadc.c ****   /* External mux configuration */
 461:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 1265              	 .loc 2 461 0
 1266 0056 3B68     	 ldr r3,[r7]
 1267 0058 7868     	 ldr r0,[r7,#4]
 1268 005a 1968     	 ldr r1,[r3]
 1269 005c FFF7FEFF 	 bl XMC_VADC_GROUP_ExternalMuxControlInit
 462:../Libraries/XMCLib/src/xmc_vadc.c **** 
 463:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1270              	 .loc 2 463 0
 1271 0060 0837     	 adds r7,r7,#8
 1272              	.LCFI114:
 1273              	 .cfi_def_cfa_offset 8
 1274 0062 BD46     	 mov sp,r7
 1275              	.LCFI115:
 1276              	 .cfi_def_cfa_register 13
 1277              	 
 1278 0064 80BD     	 pop {r7,pc}
 1279              	 .cfi_endproc
 1280              	.LFE251:
 1282 0066 00BF     	 .section .text.XMC_VADC_GROUP_InputClassInit,"ax",%progbits
 1283              	 .align 2
 1284              	 .global XMC_VADC_GROUP_InputClassInit
 1285              	 .thumb
 1286              	 .thumb_func
 1288              	XMC_VADC_GROUP_InputClassInit:
 1289              	.LFB252:
 464:../Libraries/XMCLib/src/xmc_vadc.c **** 
 465:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to program conversion characteristics */
 466:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t 
 467:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
 468:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1290              	 .loc 2 468 0
 1291              	 .cfi_startproc
 1292              	 
 1293              	 
 1294              	 
 1295 0000 80B4     	 push {r7}
 1296              	.LCFI116:
 1297              	 .cfi_def_cfa_offset 4
 1298              	 .cfi_offset 7,-4
 1299 0002 8DB0     	 sub sp,sp,#52
 1300              	.LCFI117:
 1301              	 .cfi_def_cfa_offset 56
 1302 0004 00AF     	 add r7,sp,#0
 1303              	.LCFI118:
 1304              	 .cfi_def_cfa_register 7
 1305 0006 F860     	 str r0,[r7,#12]
 1306 0008 B960     	 str r1,[r7,#8]
 1307 000a 3B60     	 str r3,[r7]
 1308 000c 1346     	 mov r3,r2
 1309 000e FB71     	 strb r3,[r7,#7]
 469:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_class;
 470:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_mode_pos;
 471:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time_pos;
 472:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_mode_mask;
 473:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time_mask;
 474:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time;
 475:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_CONVMODE_t conv_mode;
 476:../Libraries/XMCLib/src/xmc_vadc.c **** 
 477:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_pt
 478:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_
 479:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLAS
 480:../Libraries/XMCLib/src/xmc_vadc.c **** 
 481:../Libraries/XMCLib/src/xmc_vadc.c ****   /* 
 482:../Libraries/XMCLib/src/xmc_vadc.c ****    * Obtain the mask and position macros of the parameters based on what is being requested - Stand
 483:../Libraries/XMCLib/src/xmc_vadc.c ****    * external mux channels.
 484:../Libraries/XMCLib/src/xmc_vadc.c ****    */
 485:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_GROUP_CONV_STD == conv_type)
 1310              	 .loc 2 485 0
 1311 0010 FB79     	 ldrb r3,[r7,#7]
 1312 0012 002B     	 cmp r3,#0
 1313 0014 13D1     	 bne .L45
 486:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 487:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 1314              	 .loc 2 487 0
 1315 0016 0823     	 movs r3,#8
 1316 0018 FB62     	 str r3,[r7,#44]
 488:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 1317              	 .loc 2 488 0
 1318 001a 4FF4E063 	 mov r3,#1792
 1319 001e 7B62     	 str r3,[r7,#36]
 489:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 1320              	 .loc 2 489 0
 1321 0020 0023     	 movs r3,#0
 1322 0022 BB62     	 str r3,[r7,#40]
 490:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 1323              	 .loc 2 490 0
 1324 0024 1F23     	 movs r3,#31
 1325 0026 3B62     	 str r3,[r7,#32]
 491:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time      = (uint32_t) config.sample_time_std_conv;
 1326              	 .loc 2 491 0
 1327 0028 3B7A     	 ldrb r3,[r7,#8]
 1328 002a C3F30403 	 ubfx r3,r3,#0,#5
 1329 002e DBB2     	 uxtb r3,r3
 1330 0030 FB61     	 str r3,[r7,#28]
 492:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 1331              	 .loc 2 492 0
 1332 0032 7B7A     	 ldrb r3,[r7,#9]
 1333 0034 C3F30203 	 ubfx r3,r3,#0,#3
 1334 0038 DBB2     	 uxtb r3,r3
 1335 003a FB76     	 strb r3,[r7,#27]
 1336 003c 13E0     	 b .L46
 1337              	.L45:
 493:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 494:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 495:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 496:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 1338              	 .loc 2 496 0
 1339 003e 1823     	 movs r3,#24
 1340 0040 FB62     	 str r3,[r7,#44]
 497:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 1341              	 .loc 2 497 0
 1342 0042 4FF0E063 	 mov r3,#117440512
 1343 0046 7B62     	 str r3,[r7,#36]
 498:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 1344              	 .loc 2 498 0
 1345 0048 1023     	 movs r3,#16
 1346 004a BB62     	 str r3,[r7,#40]
 499:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 1347              	 .loc 2 499 0
 1348 004c 4FF4F813 	 mov r3,#2031616
 1349 0050 3B62     	 str r3,[r7,#32]
 500:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 1350              	 .loc 2 500 0
 1351 0052 BB7A     	 ldrb r3,[r7,#10]
 1352 0054 C3F30403 	 ubfx r3,r3,#0,#5
 1353 0058 DBB2     	 uxtb r3,r3
 1354 005a FB61     	 str r3,[r7,#28]
 501:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 1355              	 .loc 2 501 0
 1356 005c FB7A     	 ldrb r3,[r7,#11]
 1357 005e C3F30203 	 ubfx r3,r3,#0,#3
 1358 0062 DBB2     	 uxtb r3,r3
 1359 0064 FB76     	 strb r3,[r7,#27]
 1360              	.L46:
 502:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 503:../Libraries/XMCLib/src/xmc_vadc.c **** 
 504:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Determine the class */
 505:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class  = group_ptr->ICLASS[set_num];
 1361              	 .loc 2 505 0
 1362 0066 FB68     	 ldr r3,[r7,#12]
 1363 0068 3A68     	 ldr r2,[r7]
 1364 006a 2832     	 adds r2,r2,#40
 1365 006c 53F82230 	 ldr r3,[r3,r2,lsl#2]
 1366 0070 7B61     	 str r3,[r7,#20]
 506:../Libraries/XMCLib/src/xmc_vadc.c **** 
 507:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the class register */
 508:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class &= ~(conv_mode_mask);
 1367              	 .loc 2 508 0
 1368 0072 7B6A     	 ldr r3,[r7,#36]
 1369 0074 DB43     	 mvns r3,r3
 1370 0076 7A69     	 ldr r2,[r7,#20]
 1371 0078 1340     	 ands r3,r3,r2
 1372 007a 7B61     	 str r3,[r7,#20]
 509:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 1373              	 .loc 2 509 0
 1374 007c FA7E     	 ldrb r2,[r7,#27]
 1375 007e FB6A     	 ldr r3,[r7,#44]
 1376 0080 02FA03F3 	 lsl r3,r2,r3
 1377 0084 7A69     	 ldr r2,[r7,#20]
 1378 0086 1343     	 orrs r3,r3,r2
 1379 0088 7B61     	 str r3,[r7,#20]
 510:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class &= ~(sample_time_mask);
 1380              	 .loc 2 510 0
 1381 008a 3B6A     	 ldr r3,[r7,#32]
 1382 008c DB43     	 mvns r3,r3
 1383 008e 7A69     	 ldr r2,[r7,#20]
 1384 0090 1340     	 ands r3,r3,r2
 1385 0092 7B61     	 str r3,[r7,#20]
 511:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 1386              	 .loc 2 511 0
 1387 0094 BB6A     	 ldr r3,[r7,#40]
 1388 0096 FA69     	 ldr r2,[r7,#28]
 1389 0098 02FA03F3 	 lsl r3,r2,r3
 1390 009c 7A69     	 ldr r2,[r7,#20]
 1391 009e 1343     	 orrs r3,r3,r2
 1392 00a0 7B61     	 str r3,[r7,#20]
 512:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ICLASS[set_num] = conv_class;
 1393              	 .loc 2 512 0
 1394 00a2 FB68     	 ldr r3,[r7,#12]
 1395 00a4 3A68     	 ldr r2,[r7]
 1396 00a6 2832     	 adds r2,r2,#40
 1397 00a8 7969     	 ldr r1,[r7,#20]
 1398 00aa 43F82210 	 str r1,[r3,r2,lsl#2]
 513:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1399              	 .loc 2 513 0
 1400 00ae 3437     	 adds r7,r7,#52
 1401              	.LCFI119:
 1402              	 .cfi_def_cfa_offset 4
 1403 00b0 BD46     	 mov sp,r7
 1404              	.LCFI120:
 1405              	 .cfi_def_cfa_register 13
 1406              	 
 1407 00b2 5DF8047B 	 ldr r7,[sp],#4
 1408              	.LCFI121:
 1409              	 .cfi_restore 7
 1410              	 .cfi_def_cfa_offset 0
 1411 00b6 7047     	 bx lr
 1412              	 .cfi_endproc
 1413              	.LFE252:
 1415              	 .section .text.XMC_VADC_GROUP_SetPowerMode,"ax",%progbits
 1416              	 .align 2
 1417              	 .global XMC_VADC_GROUP_SetPowerMode
 1418              	 .thumb
 1419              	 .thumb_func
 1421              	XMC_VADC_GROUP_SetPowerMode:
 1422              	.LFB253:
 514:../Libraries/XMCLib/src/xmc_vadc.c **** 
 515:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which sets the power mode of analog converter of a VADC group */
 516:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_
 517:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1423              	 .loc 2 517 0
 1424              	 .cfi_startproc
 1425              	 
 1426              	 
 1427              	 
 1428 0000 80B4     	 push {r7}
 1429              	.LCFI122:
 1430              	 .cfi_def_cfa_offset 4
 1431              	 .cfi_offset 7,-4
 1432 0002 85B0     	 sub sp,sp,#20
 1433              	.LCFI123:
 1434              	 .cfi_def_cfa_offset 24
 1435 0004 00AF     	 add r7,sp,#0
 1436              	.LCFI124:
 1437              	 .cfi_def_cfa_register 7
 1438 0006 7860     	 str r0,[r7,#4]
 1439 0008 0B46     	 mov r3,r1
 1440 000a FB70     	 strb r3,[r7,#3]
 518:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t arbcfg;
 519:../Libraries/XMCLib/src/xmc_vadc.c **** 
 520:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
 521:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMOD
 522:../Libraries/XMCLib/src/xmc_vadc.c **** 
 523:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg = group_ptr->ARBCFG;
 1441              	 .loc 2 523 0
 1442 000c 7B68     	 ldr r3,[r7,#4]
 1443 000e D3F88030 	 ldr r3,[r3,#128]
 1444 0012 FB60     	 str r3,[r7,#12]
 524:../Libraries/XMCLib/src/xmc_vadc.c **** 
 525:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 1445              	 .loc 2 525 0
 1446 0014 FB68     	 ldr r3,[r7,#12]
 1447 0016 23F00303 	 bic r3,r3,#3
 1448 001a FB60     	 str r3,[r7,#12]
 526:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg |= (uint32_t)power_mode;
 1449              	 .loc 2 526 0
 1450 001c FB78     	 ldrb r3,[r7,#3]
 1451 001e FA68     	 ldr r2,[r7,#12]
 1452 0020 1343     	 orrs r3,r3,r2
 1453 0022 FB60     	 str r3,[r7,#12]
 527:../Libraries/XMCLib/src/xmc_vadc.c **** 
 528:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBCFG = arbcfg;
 1454              	 .loc 2 528 0
 1455 0024 7B68     	 ldr r3,[r7,#4]
 1456 0026 FA68     	 ldr r2,[r7,#12]
 1457 0028 C3F88020 	 str r2,[r3,#128]
 529:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1458              	 .loc 2 529 0
 1459 002c 1437     	 adds r7,r7,#20
 1460              	.LCFI125:
 1461              	 .cfi_def_cfa_offset 4
 1462 002e BD46     	 mov sp,r7
 1463              	.LCFI126:
 1464              	 .cfi_def_cfa_register 13
 1465              	 
 1466 0030 5DF8047B 	 ldr r7,[sp],#4
 1467              	.LCFI127:
 1468              	 .cfi_restore 7
 1469              	 .cfi_def_cfa_offset 0
 1470 0034 7047     	 bx lr
 1471              	 .cfi_endproc
 1472              	.LFE253:
 1474 0036 00BF     	 .section .text.XMC_VADC_GROUP_SetSyncSlave,"ax",%progbits
 1475              	 .align 2
 1476              	 .global XMC_VADC_GROUP_SetSyncSlave
 1477              	 .thumb
 1478              	 .thumb_func
 1480              	XMC_VADC_GROUP_SetSyncSlave:
 1481              	.LFB254:
 530:../Libraries/XMCLib/src/xmc_vadc.c **** 
 531:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which programs a group as a slave group during sync conversions */
 532:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t s
 533:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1482              	 .loc 2 533 0
 1483              	 .cfi_startproc
 1484              	 
 1485              	 
 1486              	 
 1487 0000 80B4     	 push {r7}
 1488              	.LCFI128:
 1489              	 .cfi_def_cfa_offset 4
 1490              	 .cfi_offset 7,-4
 1491 0002 87B0     	 sub sp,sp,#28
 1492              	.LCFI129:
 1493              	 .cfi_def_cfa_offset 32
 1494 0004 00AF     	 add r7,sp,#0
 1495              	.LCFI130:
 1496              	 .cfi_def_cfa_register 7
 1497 0006 F860     	 str r0,[r7,#12]
 1498 0008 B960     	 str r1,[r7,#8]
 1499 000a 7A60     	 str r2,[r7,#4]
 534:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 535:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )
 536:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
 537:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlave:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
 538:../Libraries/XMCLib/src/xmc_vadc.c ****   
 539:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )
 540:../Libraries/XMCLib/src/xmc_vadc.c **** 
 541:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Determine the coding of SYNCTR */
 542:../Libraries/XMCLib/src/xmc_vadc.c ****   if (slave_grp > master_grp)
 1500              	 .loc 2 542 0
 1501 000c 7A68     	 ldr r2,[r7,#4]
 1502 000e BB68     	 ldr r3,[r7,#8]
 1503 0010 9A42     	 cmp r2,r3
 1504 0012 02D9     	 bls .L49
 543:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 544:../Libraries/XMCLib/src/xmc_vadc.c ****     master_grp = master_grp + 1U;
 1505              	 .loc 2 544 0
 1506 0014 BB68     	 ldr r3,[r7,#8]
 1507 0016 0133     	 adds r3,r3,#1
 1508 0018 BB60     	 str r3,[r7,#8]
 1509              	.L49:
 545:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 546:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
 547:../Libraries/XMCLib/src/xmc_vadc.c ****   
 548:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program SYNCTR */
 549:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr = group_ptr->SYNCTR;
 1510              	 .loc 2 549 0
 1511 001a FB68     	 ldr r3,[r7,#12]
 1512 001c D3F8C030 	 ldr r3,[r3,#192]
 1513 0020 7B61     	 str r3,[r7,#20]
 550:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 1514              	 .loc 2 550 0
 1515 0022 7B69     	 ldr r3,[r7,#20]
 1516 0024 23F00303 	 bic r3,r3,#3
 1517 0028 7B61     	 str r3,[r7,#20]
 551:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   |= master_grp;
 1518              	 .loc 2 551 0
 1519 002a 7A69     	 ldr r2,[r7,#20]
 1520 002c BB68     	 ldr r3,[r7,#8]
 1521 002e 1343     	 orrs r3,r3,r2
 1522 0030 7B61     	 str r3,[r7,#20]
 552:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR = synctr;
 1523              	 .loc 2 552 0
 1524 0032 FB68     	 ldr r3,[r7,#12]
 1525 0034 7A69     	 ldr r2,[r7,#20]
 1526 0036 C3F8C020 	 str r2,[r3,#192]
 553:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1527              	 .loc 2 553 0
 1528 003a 1C37     	 adds r7,r7,#28
 1529              	.LCFI131:
 1530              	 .cfi_def_cfa_offset 4
 1531 003c BD46     	 mov sp,r7
 1532              	.LCFI132:
 1533              	 .cfi_def_cfa_register 13
 1534              	 
 1535 003e 5DF8047B 	 ldr r7,[sp],#4
 1536              	.LCFI133:
 1537              	 .cfi_restore 7
 1538              	 .cfi_def_cfa_offset 0
 1539 0042 7047     	 bx lr
 1540              	 .cfi_endproc
 1541              	.LFE254:
 1543              	 .section .text.XMC_VADC_GROUP_SetSyncMaster,"ax",%progbits
 1544              	 .align 2
 1545              	 .global XMC_VADC_GROUP_SetSyncMaster
 1546              	 .thumb
 1547              	 .thumb_func
 1549              	XMC_VADC_GROUP_SetSyncMaster:
 1550              	.LFB255:
 554:../Libraries/XMCLib/src/xmc_vadc.c **** 
 555:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which programs a group as a master group during sync conversions */
 556:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr)
 557:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1551              	 .loc 2 557 0
 1552              	 .cfi_startproc
 1553              	 
 1554              	 
 1555              	 
 1556 0000 80B4     	 push {r7}
 1557              	.LCFI134:
 1558              	 .cfi_def_cfa_offset 4
 1559              	 .cfi_offset 7,-4
 1560 0002 85B0     	 sub sp,sp,#20
 1561              	.LCFI135:
 1562              	 .cfi_def_cfa_offset 24
 1563 0004 00AF     	 add r7,sp,#0
 1564              	.LCFI136:
 1565              	 .cfi_def_cfa_register 7
 1566 0006 7860     	 str r0,[r7,#4]
 558:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 559:../Libraries/XMCLib/src/xmc_vadc.c **** 
 560:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncMaster:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
 561:../Libraries/XMCLib/src/xmc_vadc.c **** 
 562:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr = group_ptr->SYNCTR;
 1567              	 .loc 2 562 0
 1568 0008 7B68     	 ldr r3,[r7,#4]
 1569 000a D3F8C030 	 ldr r3,[r3,#192]
 1570 000e FB60     	 str r3,[r7,#12]
 563:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 1571              	 .loc 2 563 0
 1572 0010 FB68     	 ldr r3,[r7,#12]
 1573 0012 23F00303 	 bic r3,r3,#3
 1574 0016 FB60     	 str r3,[r7,#12]
 564:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR = synctr;
 1575              	 .loc 2 564 0
 1576 0018 7B68     	 ldr r3,[r7,#4]
 1577 001a FA68     	 ldr r2,[r7,#12]
 1578 001c C3F8C020 	 str r2,[r3,#192]
 565:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1579              	 .loc 2 565 0
 1580 0020 1437     	 adds r7,r7,#20
 1581              	.LCFI137:
 1582              	 .cfi_def_cfa_offset 4
 1583 0022 BD46     	 mov sp,r7
 1584              	.LCFI138:
 1585              	 .cfi_def_cfa_register 13
 1586              	 
 1587 0024 5DF8047B 	 ldr r7,[sp],#4
 1588              	.LCFI139:
 1589              	 .cfi_restore 7
 1590              	 .cfi_def_cfa_offset 0
 1591 0028 7047     	 bx lr
 1592              	 .cfi_endproc
 1593              	.LFE255:
 1595 002a 00BF     	 .section .text.XMC_VADC_GROUP_CheckSlaveReadiness,"ax",%progbits
 1596              	 .align 2
 1597              	 .global XMC_VADC_GROUP_CheckSlaveReadiness
 1598              	 .thumb
 1599              	 .thumb_func
 1601              	XMC_VADC_GROUP_CheckSlaveReadiness:
 1602              	.LFB256:
 566:../Libraries/XMCLib/src/xmc_vadc.c **** 
 567:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable checking of readiness of slaves before a synchronous conversion request is issued 
 568:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
 569:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1603              	 .loc 2 569 0
 1604              	 .cfi_startproc
 1605              	 
 1606              	 
 1607              	 
 1608 0000 80B4     	 push {r7}
 1609              	.LCFI140:
 1610              	 .cfi_def_cfa_offset 4
 1611              	 .cfi_offset 7,-4
 1612 0002 85B0     	 sub sp,sp,#20
 1613              	.LCFI141:
 1614              	 .cfi_def_cfa_offset 24
 1615 0004 00AF     	 add r7,sp,#0
 1616              	.LCFI142:
 1617              	 .cfi_def_cfa_register 7
 1618 0006 7860     	 str r0,[r7,#4]
 1619 0008 3960     	 str r1,[r7]
 570:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i,master_grp_num;
 571:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
 572:../Libraries/XMCLib/src/xmc_vadc.c **** 
 573:../Libraries/XMCLib/src/xmc_vadc.c ****   master_grp_num =0;
 1620              	 .loc 2 573 0
 1621 000a 0023     	 movs r3,#0
 1622 000c BB60     	 str r3,[r7,#8]
 574:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 1623              	 .loc 2 574 0
 1624 000e 0023     	 movs r3,#0
 1625 0010 FB60     	 str r3,[r7,#12]
 1626 0012 0BE0     	 b .L52
 1627              	.L54:
 575:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 576:../Libraries/XMCLib/src/xmc_vadc.c ****     if(g_xmc_vadc_group_array[i] == group_ptr)
 1628              	 .loc 2 576 0
 1629 0014 134A     	 ldr r2,.L56
 1630 0016 FB68     	 ldr r3,[r7,#12]
 1631 0018 52F82320 	 ldr r2,[r2,r3,lsl#2]
 1632 001c 7B68     	 ldr r3,[r7,#4]
 1633 001e 9A42     	 cmp r2,r3
 1634 0020 01D1     	 bne .L53
 577:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 578:../Libraries/XMCLib/src/xmc_vadc.c ****       master_grp_num = i;
 1635              	 .loc 2 578 0
 1636 0022 FB68     	 ldr r3,[r7,#12]
 1637 0024 BB60     	 str r3,[r7,#8]
 1638              	.L53:
 574:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 1639              	 .loc 2 574 0 discriminator 2
 1640 0026 FB68     	 ldr r3,[r7,#12]
 1641 0028 0133     	 adds r3,r3,#1
 1642 002a FB60     	 str r3,[r7,#12]
 1643              	.L52:
 574:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 1644              	 .loc 2 574 0 is_stmt 0 discriminator 1
 1645 002c FB68     	 ldr r3,[r7,#12]
 1646 002e 032B     	 cmp r3,#3
 1647 0030 F0D9     	 bls .L54
 579:../Libraries/XMCLib/src/xmc_vadc.c ****     }
 580:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 581:../Libraries/XMCLib/src/xmc_vadc.c **** 
 582:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Slave group", (master_grp_num == slave_group
 583:../Libraries/XMCLib/src/xmc_vadc.c **** 
 584:../Libraries/XMCLib/src/xmc_vadc.c ****   if(slave_group < master_grp_num)
 1648              	 .loc 2 584 0 is_stmt 1
 1649 0032 3A68     	 ldr r2,[r7]
 1650 0034 BB68     	 ldr r3,[r7,#8]
 1651 0036 9A42     	 cmp r2,r3
 1652 0038 02D2     	 bcs .L55
 585:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 586:../Libraries/XMCLib/src/xmc_vadc.c ****     slave_group++;
 1653              	 .loc 2 586 0
 1654 003a 3B68     	 ldr r3,[r7]
 1655 003c 0133     	 adds r3,r3,#1
 1656 003e 3B60     	 str r3,[r7]
 1657              	.L55:
 587:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 588:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR |= (1U << (slave_group + XMC_VADC_SYNCTR_START_LOCATION));
 1658              	 .loc 2 588 0
 1659 0040 7B68     	 ldr r3,[r7,#4]
 1660 0042 D3F8C020 	 ldr r2,[r3,#192]
 1661 0046 3B68     	 ldr r3,[r7]
 1662 0048 0333     	 adds r3,r3,#3
 1663 004a 1946     	 mov r1,r3
 1664 004c 0123     	 movs r3,#1
 1665 004e 8B40     	 lsls r3,r3,r1
 1666 0050 1A43     	 orrs r2,r2,r3
 1667 0052 7B68     	 ldr r3,[r7,#4]
 1668 0054 C3F8C020 	 str r2,[r3,#192]
 589:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1669              	 .loc 2 589 0
 1670 0058 1437     	 adds r7,r7,#20
 1671              	.LCFI143:
 1672              	 .cfi_def_cfa_offset 4
 1673 005a BD46     	 mov sp,r7
 1674              	.LCFI144:
 1675              	 .cfi_def_cfa_register 13
 1676              	 
 1677 005c 5DF8047B 	 ldr r7,[sp],#4
 1678              	.LCFI145:
 1679              	 .cfi_restore 7
 1680              	 .cfi_def_cfa_offset 0
 1681 0060 7047     	 bx lr
 1682              	.L57:
 1683 0062 00BF     	 .align 2
 1684              	.L56:
 1685 0064 00000000 	 .word g_xmc_vadc_group_array
 1686              	 .cfi_endproc
 1687              	.LFE256:
 1689              	 .section .text.XMC_VADC_GROUP_IgnoreSlaveReadiness,"ax",%progbits
 1690              	 .align 2
 1691              	 .global XMC_VADC_GROUP_IgnoreSlaveReadiness
 1692              	 .thumb
 1693              	 .thumb_func
 1695              	XMC_VADC_GROUP_IgnoreSlaveReadiness:
 1696              	.LFB257:
 590:../Libraries/XMCLib/src/xmc_vadc.c **** 
 591:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable checking of readiness of slaves during synchronous conversions */
 592:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_IgnoreSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
 593:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1697              	 .loc 2 593 0
 1698              	 .cfi_startproc
 1699              	 
 1700              	 
 1701              	 
 1702 0000 80B4     	 push {r7}
 1703              	.LCFI146:
 1704              	 .cfi_def_cfa_offset 4
 1705              	 .cfi_offset 7,-4
 1706 0002 85B0     	 sub sp,sp,#20
 1707              	.LCFI147:
 1708              	 .cfi_def_cfa_offset 24
 1709 0004 00AF     	 add r7,sp,#0
 1710              	.LCFI148:
 1711              	 .cfi_def_cfa_register 7
 1712 0006 7860     	 str r0,[r7,#4]
 1713 0008 3960     	 str r1,[r7]
 594:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i,master_grp_num;
 595:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IgnoreSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
 596:../Libraries/XMCLib/src/xmc_vadc.c **** 
 597:../Libraries/XMCLib/src/xmc_vadc.c ****   master_grp_num =0;
 1714              	 .loc 2 597 0
 1715 000a 0023     	 movs r3,#0
 1716 000c BB60     	 str r3,[r7,#8]
 598:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 1717              	 .loc 2 598 0
 1718 000e 0023     	 movs r3,#0
 1719 0010 FB60     	 str r3,[r7,#12]
 1720 0012 0BE0     	 b .L59
 1721              	.L61:
 599:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 600:../Libraries/XMCLib/src/xmc_vadc.c **** 	if(g_xmc_vadc_group_array[i] == group_ptr)
 1722              	 .loc 2 600 0
 1723 0014 134A     	 ldr r2,.L63
 1724 0016 FB68     	 ldr r3,[r7,#12]
 1725 0018 52F82320 	 ldr r2,[r2,r3,lsl#2]
 1726 001c 7B68     	 ldr r3,[r7,#4]
 1727 001e 9A42     	 cmp r2,r3
 1728 0020 01D1     	 bne .L60
 601:../Libraries/XMCLib/src/xmc_vadc.c **** 	{
 602:../Libraries/XMCLib/src/xmc_vadc.c **** 	  master_grp_num = i;
 1729              	 .loc 2 602 0
 1730 0022 FB68     	 ldr r3,[r7,#12]
 1731 0024 BB60     	 str r3,[r7,#8]
 1732              	.L60:
 598:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 1733              	 .loc 2 598 0 discriminator 2
 1734 0026 FB68     	 ldr r3,[r7,#12]
 1735 0028 0133     	 adds r3,r3,#1
 1736 002a FB60     	 str r3,[r7,#12]
 1737              	.L59:
 598:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 1738              	 .loc 2 598 0 is_stmt 0 discriminator 1
 1739 002c FB68     	 ldr r3,[r7,#12]
 1740 002e 032B     	 cmp r3,#3
 1741 0030 F0D9     	 bls .L61
 603:../Libraries/XMCLib/src/xmc_vadc.c **** 	}
 604:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 605:../Libraries/XMCLib/src/xmc_vadc.c **** 
 606:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IgnoreSlaveReadiness:Wrong Slave group", (master_grp_num == slave_grou
 607:../Libraries/XMCLib/src/xmc_vadc.c **** 
 608:../Libraries/XMCLib/src/xmc_vadc.c ****   if(slave_group < master_grp_num)
 1742              	 .loc 2 608 0 is_stmt 1
 1743 0032 3A68     	 ldr r2,[r7]
 1744 0034 BB68     	 ldr r3,[r7,#8]
 1745 0036 9A42     	 cmp r2,r3
 1746 0038 02D2     	 bcs .L62
 609:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 610:../Libraries/XMCLib/src/xmc_vadc.c **** 	slave_group++;
 1747              	 .loc 2 610 0
 1748 003a 3B68     	 ldr r3,[r7]
 1749 003c 0133     	 adds r3,r3,#1
 1750 003e 3B60     	 str r3,[r7]
 1751              	.L62:
 611:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 612:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR &= ~(1U << (slave_group + XMC_VADC_SYNCTR_START_LOCATION));
 1752              	 .loc 2 612 0
 1753 0040 7B68     	 ldr r3,[r7,#4]
 1754 0042 D3F8C020 	 ldr r2,[r3,#192]
 1755 0046 3B68     	 ldr r3,[r7]
 1756 0048 0333     	 adds r3,r3,#3
 1757 004a 1946     	 mov r1,r3
 1758 004c 0123     	 movs r3,#1
 1759 004e 8B40     	 lsls r3,r3,r1
 1760 0050 DB43     	 mvns r3,r3
 1761 0052 1A40     	 ands r2,r2,r3
 1762 0054 7B68     	 ldr r3,[r7,#4]
 1763 0056 C3F8C020 	 str r2,[r3,#192]
 613:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1764              	 .loc 2 613 0
 1765 005a 1437     	 adds r7,r7,#20
 1766              	.LCFI149:
 1767              	 .cfi_def_cfa_offset 4
 1768 005c BD46     	 mov sp,r7
 1769              	.LCFI150:
 1770              	 .cfi_def_cfa_register 13
 1771              	 
 1772 005e 5DF8047B 	 ldr r7,[sp],#4
 1773              	.LCFI151:
 1774              	 .cfi_restore 7
 1775              	 .cfi_def_cfa_offset 0
 1776 0062 7047     	 bx lr
 1777              	.L64:
 1778              	 .align 2
 1779              	.L63:
 1780 0064 00000000 	 .word g_xmc_vadc_group_array
 1781              	 .cfi_endproc
 1782              	.LFE257:
 1784              	 .section .text.XMC_VADC_GROUP_SetSyncSlaveReadySignal,"ax",%progbits
 1785              	 .align 2
 1786              	 .global XMC_VADC_GROUP_SetSyncSlaveReadySignal
 1787              	 .thumb
 1788              	 .thumb_func
 1790              	XMC_VADC_GROUP_SetSyncSlaveReadySignal:
 1791              	.LFB258:
 614:../Libraries/XMCLib/src/xmc_vadc.c **** 
 615:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to configure EVAL bit in the slave groups*/
 616:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncSlaveReadySignal(XMC_VADC_GROUP_t *const group_ptr,
 617:../Libraries/XMCLib/src/xmc_vadc.c ****                                             uint32_t eval_waiting_group,
 618:../Libraries/XMCLib/src/xmc_vadc.c ****                                             uint32_t eval_origin_group)
 619:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1792              	 .loc 2 619 0
 1793              	 .cfi_startproc
 1794              	 
 1795              	 
 1796              	 
 1797 0000 80B4     	 push {r7}
 1798              	.LCFI152:
 1799              	 .cfi_def_cfa_offset 4
 1800              	 .cfi_offset 7,-4
 1801 0002 85B0     	 sub sp,sp,#20
 1802              	.LCFI153:
 1803              	 .cfi_def_cfa_offset 24
 1804 0004 00AF     	 add r7,sp,#0
 1805              	.LCFI154:
 1806              	 .cfi_def_cfa_register 7
 1807 0006 F860     	 str r0,[r7,#12]
 1808 0008 B960     	 str r1,[r7,#8]
 1809 000a 7A60     	 str r2,[r7,#4]
 620:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlaveReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR
 621:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlaveReadySignal:Wrong Group numbers", (eval_waiting_group == e
 622:../Libraries/XMCLib/src/xmc_vadc.c **** 
 623:../Libraries/XMCLib/src/xmc_vadc.c ****   if(eval_origin_group < eval_waiting_group)
 1810              	 .loc 2 623 0
 1811 000c 7A68     	 ldr r2,[r7,#4]
 1812 000e BB68     	 ldr r3,[r7,#8]
 1813 0010 9A42     	 cmp r2,r3
 1814 0012 02D2     	 bcs .L66
 624:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 625:../Libraries/XMCLib/src/xmc_vadc.c **** 	  eval_origin_group++;
 1815              	 .loc 2 625 0
 1816 0014 7B68     	 ldr r3,[r7,#4]
 1817 0016 0133     	 adds r3,r3,#1
 1818 0018 7B60     	 str r3,[r7,#4]
 1819              	.L66:
 626:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 627:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR |= (1U << (eval_origin_group + XMC_VADC_SYNCTR_START_LOCATION));
 1820              	 .loc 2 627 0
 1821 001a FB68     	 ldr r3,[r7,#12]
 1822 001c D3F8C020 	 ldr r2,[r3,#192]
 1823 0020 7B68     	 ldr r3,[r7,#4]
 1824 0022 0333     	 adds r3,r3,#3
 1825 0024 1946     	 mov r1,r3
 1826 0026 0123     	 movs r3,#1
 1827 0028 8B40     	 lsls r3,r3,r1
 1828 002a 1A43     	 orrs r2,r2,r3
 1829 002c FB68     	 ldr r3,[r7,#12]
 1830 002e C3F8C020 	 str r2,[r3,#192]
 628:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1831              	 .loc 2 628 0
 1832 0032 1437     	 adds r7,r7,#20
 1833              	.LCFI155:
 1834              	 .cfi_def_cfa_offset 4
 1835 0034 BD46     	 mov sp,r7
 1836              	.LCFI156:
 1837              	 .cfi_def_cfa_register 13
 1838              	 
 1839 0036 5DF8047B 	 ldr r7,[sp],#4
 1840              	.LCFI157:
 1841              	 .cfi_restore 7
 1842              	 .cfi_def_cfa_offset 0
 1843 003a 7047     	 bx lr
 1844              	 .cfi_endproc
 1845              	.LFE258:
 1847              	 .section .text.XMC_VADC_GROUP_EnableChannelSyncRequest,"ax",%progbits
 1848              	 .align 2
 1849              	 .global XMC_VADC_GROUP_EnableChannelSyncRequest
 1850              	 .thumb
 1851              	 .thumb_func
 1853              	XMC_VADC_GROUP_EnableChannelSyncRequest:
 1854              	.LFB259:
 629:../Libraries/XMCLib/src/xmc_vadc.c **** 
 630:../Libraries/XMCLib/src/xmc_vadc.c **** 
 631:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the synchronous conversion feature - Applicable only to kernel configured as maste
 632:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_EnableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
 633:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1855              	 .loc 2 633 0
 1856              	 .cfi_startproc
 1857              	 
 1858              	 
 1859              	 
 1860 0000 80B4     	 push {r7}
 1861              	.LCFI158:
 1862              	 .cfi_def_cfa_offset 4
 1863              	 .cfi_offset 7,-4
 1864 0002 85B0     	 sub sp,sp,#20
 1865              	.LCFI159:
 1866              	 .cfi_def_cfa_offset 24
 1867 0004 00AF     	 add r7,sp,#0
 1868              	.LCFI160:
 1869              	 .cfi_def_cfa_register 7
 1870 0006 7860     	 str r0,[r7,#4]
 1871 0008 3960     	 str r1,[r7]
 634:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 635:../Libraries/XMCLib/src/xmc_vadc.c **** 
 636:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_EnableChannelSyncRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
 637:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_EnableChannelSyncRequest:Wrong Channel Number",
 638:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
 639:../Libraries/XMCLib/src/xmc_vadc.c **** 
 640:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr  = group_ptr->SYNCTR;
 1872              	 .loc 2 640 0
 1873 000a 7B68     	 ldr r3,[r7,#4]
 1874 000c D3F8C030 	 ldr r3,[r3,#192]
 1875 0010 FB60     	 str r3,[r7,#12]
 641:../Libraries/XMCLib/src/xmc_vadc.c **** 
 642:../Libraries/XMCLib/src/xmc_vadc.c ****   if (!(synctr &  (uint32_t)VADC_G_SYNCTR_STSEL_Msk))
 1876              	 .loc 2 642 0
 1877 0012 FB68     	 ldr r3,[r7,#12]
 1878 0014 03F00303 	 and r3,r3,#3
 1879 0018 002B     	 cmp r3,#0
 1880 001a 0BD1     	 bne .L67
 643:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 644:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->CHCTR[ch_num] |= (uint32_t)((uint32_t)1 << VADC_G_CHCTR_SYNC_Pos);
 1881              	 .loc 2 644 0
 1882 001c 7B68     	 ldr r3,[r7,#4]
 1883 001e 3A68     	 ldr r2,[r7]
 1884 0020 8032     	 adds r2,r2,#128
 1885 0022 53F82230 	 ldr r3,[r3,r2,lsl#2]
 1886 0026 43F48061 	 orr r1,r3,#1024
 1887 002a 7B68     	 ldr r3,[r7,#4]
 1888 002c 3A68     	 ldr r2,[r7]
 1889 002e 8032     	 adds r2,r2,#128
 1890 0030 43F82210 	 str r1,[r3,r2,lsl#2]
 1891              	.L67:
 645:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 646:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1892              	 .loc 2 646 0
 1893 0034 1437     	 adds r7,r7,#20
 1894              	.LCFI161:
 1895              	 .cfi_def_cfa_offset 4
 1896 0036 BD46     	 mov sp,r7
 1897              	.LCFI162:
 1898              	 .cfi_def_cfa_register 13
 1899              	 
 1900 0038 5DF8047B 	 ldr r7,[sp],#4
 1901              	.LCFI163:
 1902              	 .cfi_restore 7
 1903              	 .cfi_def_cfa_offset 0
 1904 003c 7047     	 bx lr
 1905              	 .cfi_endproc
 1906              	.LFE259:
 1908 003e 00BF     	 .section .text.XMC_VADC_GROUP_DisableChannelSyncRequest,"ax",%progbits
 1909              	 .align 2
 1910              	 .global XMC_VADC_GROUP_DisableChannelSyncRequest
 1911              	 .thumb
 1912              	 .thumb_func
 1914              	XMC_VADC_GROUP_DisableChannelSyncRequest:
 1915              	.LFB260:
 647:../Libraries/XMCLib/src/xmc_vadc.c **** 
 648:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable synchronous conversion feature */
 649:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_DisableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_
 650:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1916              	 .loc 2 650 0
 1917              	 .cfi_startproc
 1918              	 
 1919              	 
 1920              	 
 1921 0000 80B4     	 push {r7}
 1922              	.LCFI164:
 1923              	 .cfi_def_cfa_offset 4
 1924              	 .cfi_offset 7,-4
 1925 0002 85B0     	 sub sp,sp,#20
 1926              	.LCFI165:
 1927              	 .cfi_def_cfa_offset 24
 1928 0004 00AF     	 add r7,sp,#0
 1929              	.LCFI166:
 1930              	 .cfi_def_cfa_register 7
 1931 0006 7860     	 str r0,[r7,#4]
 1932 0008 3960     	 str r1,[r7]
 651:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    synctr;
 652:../Libraries/XMCLib/src/xmc_vadc.c **** 
 653:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_DisableChannelSyncRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
 654:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_DisableChannelSyncRequest:Wrong Channel Number",
 655:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
 656:../Libraries/XMCLib/src/xmc_vadc.c **** 
 657:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr  = group_ptr->SYNCTR;
 1933              	 .loc 2 657 0
 1934 000a 7B68     	 ldr r3,[r7,#4]
 1935 000c D3F8C030 	 ldr r3,[r3,#192]
 1936 0010 FB60     	 str r3,[r7,#12]
 658:../Libraries/XMCLib/src/xmc_vadc.c **** 
 659:../Libraries/XMCLib/src/xmc_vadc.c ****   if (synctr &  (uint32_t)VADC_G_SYNCTR_STSEL_Msk)
 1937              	 .loc 2 659 0
 1938 0012 FB68     	 ldr r3,[r7,#12]
 1939 0014 03F00303 	 and r3,r3,#3
 1940 0018 002B     	 cmp r3,#0
 1941 001a 0BD0     	 beq .L69
 660:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 661:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->CHCTR[ch_num] &= ~((uint32_t)VADC_G_CHCTR_SYNC_Msk);
 1942              	 .loc 2 661 0
 1943 001c 7B68     	 ldr r3,[r7,#4]
 1944 001e 3A68     	 ldr r2,[r7]
 1945 0020 8032     	 adds r2,r2,#128
 1946 0022 53F82230 	 ldr r3,[r3,r2,lsl#2]
 1947 0026 23F48061 	 bic r1,r3,#1024
 1948 002a 7B68     	 ldr r3,[r7,#4]
 1949 002c 3A68     	 ldr r2,[r7]
 1950 002e 8032     	 adds r2,r2,#128
 1951 0030 43F82210 	 str r1,[r3,r2,lsl#2]
 1952              	.L69:
 662:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 663:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1953              	 .loc 2 663 0
 1954 0034 1437     	 adds r7,r7,#20
 1955              	.LCFI167:
 1956              	 .cfi_def_cfa_offset 4
 1957 0036 BD46     	 mov sp,r7
 1958              	.LCFI168:
 1959              	 .cfi_def_cfa_register 13
 1960              	 
 1961 0038 5DF8047B 	 ldr r7,[sp],#4
 1962              	.LCFI169:
 1963              	 .cfi_restore 7
 1964              	 .cfi_def_cfa_offset 0
 1965 003c 7047     	 bx lr
 1966              	 .cfi_endproc
 1967              	.LFE260:
 1969 003e 00BF     	 .section .text.XMC_VADC_GROUP_IsConverterBusy,"ax",%progbits
 1970              	 .align 2
 1971              	 .global XMC_VADC_GROUP_IsConverterBusy
 1972              	 .thumb
 1973              	 .thumb_func
 1975              	XMC_VADC_GROUP_IsConverterBusy:
 1976              	.LFB261:
 664:../Libraries/XMCLib/src/xmc_vadc.c **** 
 665:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the converter state - Idle vs Busy */ 
 666:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_GROUP_STATE_t XMC_VADC_GROUP_IsConverterBusy(XMC_VADC_GROUP_t *const group_ptr)
 667:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1977              	 .loc 2 667 0
 1978              	 .cfi_startproc
 1979              	 
 1980              	 
 1981              	 
 1982 0000 80B4     	 push {r7}
 1983              	.LCFI170:
 1984              	 .cfi_def_cfa_offset 4
 1985              	 .cfi_offset 7,-4
 1986 0002 85B0     	 sub sp,sp,#20
 1987              	.LCFI171:
 1988              	 .cfi_def_cfa_offset 24
 1989 0004 00AF     	 add r7,sp,#0
 1990              	.LCFI172:
 1991              	 .cfi_def_cfa_register 7
 1992 0006 7860     	 str r0,[r7,#4]
 668:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t      arbcfg;
 669:../Libraries/XMCLib/src/xmc_vadc.c **** 
 670:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsConverterBusy:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
 671:../Libraries/XMCLib/src/xmc_vadc.c **** 
 672:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg  = group_ptr->ARBCFG;
 1993              	 .loc 2 672 0
 1994 0008 7B68     	 ldr r3,[r7,#4]
 1995 000a D3F88030 	 ldr r3,[r3,#128]
 1996 000e FB60     	 str r3,[r7,#12]
 673:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg &= (uint32_t)VADC_G_ARBCFG_BUSY_Msk;
 1997              	 .loc 2 673 0
 1998 0010 FB68     	 ldr r3,[r7,#12]
 1999 0012 03F08043 	 and r3,r3,#1073741824
 2000 0016 FB60     	 str r3,[r7,#12]
 674:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg = arbcfg >> VADC_G_ARBCFG_BUSY_Pos;
 2001              	 .loc 2 674 0
 2002 0018 FB68     	 ldr r3,[r7,#12]
 2003 001a 9B0F     	 lsrs r3,r3,#30
 2004 001c FB60     	 str r3,[r7,#12]
 675:../Libraries/XMCLib/src/xmc_vadc.c **** 
 676:../Libraries/XMCLib/src/xmc_vadc.c ****   return( (XMC_VADC_GROUP_STATE_t)arbcfg);
 2005              	 .loc 2 676 0
 2006 001e FB68     	 ldr r3,[r7,#12]
 2007 0020 DBB2     	 uxtb r3,r3
 677:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2008              	 .loc 2 677 0
 2009 0022 1846     	 mov r0,r3
 2010 0024 1437     	 adds r7,r7,#20
 2011              	.LCFI173:
 2012              	 .cfi_def_cfa_offset 4
 2013 0026 BD46     	 mov sp,r7
 2014              	.LCFI174:
 2015              	 .cfi_def_cfa_register 13
 2016              	 
 2017 0028 5DF8047B 	 ldr r7,[sp],#4
 2018              	.LCFI175:
 2019              	 .cfi_restore 7
 2020              	 .cfi_def_cfa_offset 0
 2021 002c 7047     	 bx lr
 2022              	 .cfi_endproc
 2023              	.LFE261:
 2025 002e 00BF     	 .section .text.XMC_VADC_GROUP_SetBoundaries,"ax",%progbits
 2026              	 .align 2
 2027              	 .global XMC_VADC_GROUP_SetBoundaries
 2028              	 .thumb
 2029              	 .thumb_func
 2031              	XMC_VADC_GROUP_SetBoundaries:
 2032              	.LFB262:
 678:../Libraries/XMCLib/src/xmc_vadc.c **** 
 679:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set boundaries for conversion results */
 680:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetBoundaries(XMC_VADC_GROUP_t *const group_ptr, const uint32_t boundary0, cons
 681:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2033              	 .loc 2 681 0
 2034              	 .cfi_startproc
 2035              	 
 2036              	 
 2037              	 
 2038 0000 80B4     	 push {r7}
 2039              	.LCFI176:
 2040              	 .cfi_def_cfa_offset 4
 2041              	 .cfi_offset 7,-4
 2042 0002 87B0     	 sub sp,sp,#28
 2043              	.LCFI177:
 2044              	 .cfi_def_cfa_offset 32
 2045 0004 00AF     	 add r7,sp,#0
 2046              	.LCFI178:
 2047              	 .cfi_def_cfa_register 7
 2048 0006 F860     	 str r0,[r7,#12]
 2049 0008 B960     	 str r1,[r7,#8]
 2050 000a 7A60     	 str r2,[r7,#4]
 682:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t bound;
 683:../Libraries/XMCLib/src/xmc_vadc.c **** 
 684:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetBoundaries:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
 685:../Libraries/XMCLib/src/xmc_vadc.c **** 
 686:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 687:../Libraries/XMCLib/src/xmc_vadc.c ****   bound  = group_ptr->BOUND;
 2051              	 .loc 2 687 0
 2052 000c FB68     	 ldr r3,[r7,#12]
 2053 000e D3F8B830 	 ldr r3,[r3,#184]
 2054 0012 7B61     	 str r3,[r7,#20]
 688:../Libraries/XMCLib/src/xmc_vadc.c ****   bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY0_Msk);
 2055              	 .loc 2 688 0
 2056 0014 7B69     	 ldr r3,[r7,#20]
 2057 0016 23F47F63 	 bic r3,r3,#4080
 2058 001a 23F00F03 	 bic r3,r3,#15
 2059 001e 7B61     	 str r3,[r7,#20]
 689:../Libraries/XMCLib/src/xmc_vadc.c ****   bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY1_Msk);
 2060              	 .loc 2 689 0
 2061 0020 7B69     	 ldr r3,[r7,#20]
 2062 0022 23F07F63 	 bic r3,r3,#267386880
 2063 0026 23F47023 	 bic r3,r3,#983040
 2064 002a 7B61     	 str r3,[r7,#20]
 690:../Libraries/XMCLib/src/xmc_vadc.c ****   bound |= (uint32_t) ((uint32_t) boundary0 << VADC_G_BOUND_BOUNDARY0_Pos);
 2065              	 .loc 2 690 0
 2066 002c 7A69     	 ldr r2,[r7,#20]
 2067 002e BB68     	 ldr r3,[r7,#8]
 2068 0030 1343     	 orrs r3,r3,r2
 2069 0032 7B61     	 str r3,[r7,#20]
 691:../Libraries/XMCLib/src/xmc_vadc.c ****   bound |= (uint32_t) ((uint32_t) boundary1 << VADC_G_BOUND_BOUNDARY1_Pos);
 2070              	 .loc 2 691 0
 2071 0034 7B68     	 ldr r3,[r7,#4]
 2072 0036 1B04     	 lsls r3,r3,#16
 2073 0038 7A69     	 ldr r2,[r7,#20]
 2074 003a 1343     	 orrs r3,r3,r2
 2075 003c 7B61     	 str r3,[r7,#20]
 692:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = bound;
 2076              	 .loc 2 692 0
 2077 003e FB68     	 ldr r3,[r7,#12]
 2078 0040 7A69     	 ldr r2,[r7,#20]
 2079 0042 C3F8B820 	 str r2,[r3,#184]
 693:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2080              	 .loc 2 693 0
 2081 0046 1C37     	 adds r7,r7,#28
 2082              	.LCFI179:
 2083              	 .cfi_def_cfa_offset 4
 2084 0048 BD46     	 mov sp,r7
 2085              	.LCFI180:
 2086              	 .cfi_def_cfa_register 13
 2087              	 
 2088 004a 5DF8047B 	 ldr r7,[sp],#4
 2089              	.LCFI181:
 2090              	 .cfi_restore 7
 2091              	 .cfi_def_cfa_offset 0
 2092 004e 7047     	 bx lr
 2093              	 .cfi_endproc
 2094              	.LFE262:
 2096              	 .section .text.XMC_VADC_GROUP_SetIndividualBoundary,"ax",%progbits
 2097              	 .align 2
 2098              	 .global XMC_VADC_GROUP_SetIndividualBoundary
 2099              	 .thumb
 2100              	 .thumb_func
 2102              	XMC_VADC_GROUP_SetIndividualBoundary:
 2103              	.LFB263:
 694:../Libraries/XMCLib/src/xmc_vadc.c **** 
 695:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set an individual boundary for conversion results */
 696:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetIndividualBoundary(XMC_VADC_GROUP_t *const group_ptr,
 697:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_CHANNEL_BOUNDARY_t selection,
 698:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const uint16_t boundary_value)
 699:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2104              	 .loc 2 699 0
 2105              	 .cfi_startproc
 2106              	 
 2107              	 
 2108              	 
 2109 0000 80B4     	 push {r7}
 2110              	.LCFI182:
 2111              	 .cfi_def_cfa_offset 4
 2112              	 .cfi_offset 7,-4
 2113 0002 85B0     	 sub sp,sp,#20
 2114              	.LCFI183:
 2115              	 .cfi_def_cfa_offset 24
 2116 0004 00AF     	 add r7,sp,#0
 2117              	.LCFI184:
 2118              	 .cfi_def_cfa_register 7
 2119 0006 7860     	 str r0,[r7,#4]
 2120 0008 0B46     	 mov r3,r1
 2121 000a FB70     	 strb r3,[r7,#3]
 2122 000c 1346     	 mov r3,r2
 2123 000e 3B80     	 strh r3,[r7]
 700:../Libraries/XMCLib/src/xmc_vadc.c **** 
 701:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t bound;
 702:../Libraries/XMCLib/src/xmc_vadc.c **** 
 703:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetIndividualBoundary:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
 704:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetIndividualBoundary:Wrong Boundary Selection",
 705:../Libraries/XMCLib/src/xmc_vadc.c ****                ((XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 == selection) ||
 706:../Libraries/XMCLib/src/xmc_vadc.c ****                 (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1 == selection)))
 707:../Libraries/XMCLib/src/xmc_vadc.c **** 
 708:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 709:../Libraries/XMCLib/src/xmc_vadc.c ****   bound  = group_ptr->BOUND;
 2124              	 .loc 2 709 0
 2125 0010 7B68     	 ldr r3,[r7,#4]
 2126 0012 D3F8B830 	 ldr r3,[r3,#184]
 2127 0016 FB60     	 str r3,[r7,#12]
 710:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 == selection)
 2128              	 .loc 2 710 0
 2129 0018 FB78     	 ldrb r3,[r7,#3]
 2130 001a 002B     	 cmp r3,#0
 2131 001c 0AD1     	 bne .L75
 711:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 712:../Libraries/XMCLib/src/xmc_vadc.c ****     bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY0_Msk);
 2132              	 .loc 2 712 0
 2133 001e FB68     	 ldr r3,[r7,#12]
 2134 0020 23F47F63 	 bic r3,r3,#4080
 2135 0024 23F00F03 	 bic r3,r3,#15
 2136 0028 FB60     	 str r3,[r7,#12]
 713:../Libraries/XMCLib/src/xmc_vadc.c ****     bound |= (uint32_t) ((uint32_t) boundary_value << VADC_G_BOUND_BOUNDARY0_Pos);
 2137              	 .loc 2 713 0
 2138 002a 3B88     	 ldrh r3,[r7]
 2139 002c FA68     	 ldr r2,[r7,#12]
 2140 002e 1343     	 orrs r3,r3,r2
 2141 0030 FB60     	 str r3,[r7,#12]
 2142 0032 0DE0     	 b .L76
 2143              	.L75:
 714:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 715:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1 == selection)
 2144              	 .loc 2 715 0
 2145 0034 FB78     	 ldrb r3,[r7,#3]
 2146 0036 012B     	 cmp r3,#1
 2147 0038 0AD1     	 bne .L76
 716:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 717:../Libraries/XMCLib/src/xmc_vadc.c ****     bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY1_Msk);
 2148              	 .loc 2 717 0
 2149 003a FB68     	 ldr r3,[r7,#12]
 2150 003c 23F07F63 	 bic r3,r3,#267386880
 2151 0040 23F47023 	 bic r3,r3,#983040
 2152 0044 FB60     	 str r3,[r7,#12]
 718:../Libraries/XMCLib/src/xmc_vadc.c ****     bound |= (uint32_t) ((uint32_t) boundary_value << VADC_G_BOUND_BOUNDARY1_Pos);
 2153              	 .loc 2 718 0
 2154 0046 3B88     	 ldrh r3,[r7]
 2155 0048 1B04     	 lsls r3,r3,#16
 2156 004a FA68     	 ldr r2,[r7,#12]
 2157 004c 1343     	 orrs r3,r3,r2
 2158 004e FB60     	 str r3,[r7,#12]
 2159              	.L76:
 719:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 720:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 721:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 722:../Libraries/XMCLib/src/xmc_vadc.c ****     /* For MISRA*/
 723:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 724:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = bound;
 2160              	 .loc 2 724 0
 2161 0050 7B68     	 ldr r3,[r7,#4]
 2162 0052 FA68     	 ldr r2,[r7,#12]
 2163 0054 C3F8B820 	 str r2,[r3,#184]
 725:../Libraries/XMCLib/src/xmc_vadc.c **** 
 726:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2164              	 .loc 2 726 0
 2165 0058 1437     	 adds r7,r7,#20
 2166              	.LCFI185:
 2167              	 .cfi_def_cfa_offset 4
 2168 005a BD46     	 mov sp,r7
 2169              	.LCFI186:
 2170              	 .cfi_def_cfa_register 13
 2171              	 
 2172 005c 5DF8047B 	 ldr r7,[sp],#4
 2173              	.LCFI187:
 2174              	 .cfi_restore 7
 2175              	 .cfi_def_cfa_offset 0
 2176 0060 7047     	 bx lr
 2177              	 .cfi_endproc
 2178              	.LFE263:
 2180 0062 00BF     	 .section .text.XMC_VADC_GROUP_TriggerServiceRequest,"ax",%progbits
 2181              	 .align 2
 2182              	 .global XMC_VADC_GROUP_TriggerServiceRequest
 2183              	 .thumb
 2184              	 .thumb_func
 2186              	XMC_VADC_GROUP_TriggerServiceRequest:
 2187              	.LFB264:
 727:../Libraries/XMCLib/src/xmc_vadc.c **** 
 728:../Libraries/XMCLib/src/xmc_vadc.c **** /* Manually assert service request (Interrupt) to NVIC */
 729:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_TriggerServiceRequest(XMC_VADC_GROUP_t *const group_ptr,
 730:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const uint32_t sr_num,
 731:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_GROUP_IRQ_t type)
 732:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2188              	 .loc 2 732 0
 2189              	 .cfi_startproc
 2190              	 
 2191              	 
 2192              	 
 2193 0000 80B4     	 push {r7}
 2194              	.LCFI188:
 2195              	 .cfi_def_cfa_offset 4
 2196              	 .cfi_offset 7,-4
 2197 0002 87B0     	 sub sp,sp,#28
 2198              	.LCFI189:
 2199              	 .cfi_def_cfa_offset 32
 2200 0004 00AF     	 add r7,sp,#0
 2201              	.LCFI190:
 2202              	 .cfi_def_cfa_register 7
 2203 0006 F860     	 str r0,[r7,#12]
 2204 0008 B960     	 str r1,[r7,#8]
 2205 000a 1346     	 mov r3,r2
 2206 000c FB71     	 strb r3,[r7,#7]
 733:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sract;
 734:../Libraries/XMCLib/src/xmc_vadc.c **** 
 735:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
 736:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong SR number", (sr_num <= XMC_VADC_SR_SHARED_
 737:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong SR type", ((type)<= XMC_VADC_GROUP_IRQ_SHA
 738:../Libraries/XMCLib/src/xmc_vadc.c **** 
 739:../Libraries/XMCLib/src/xmc_vadc.c ****   sract = group_ptr->SRACT;
 2207              	 .loc 2 739 0
 2208 000e FB68     	 ldr r3,[r7,#12]
 2209 0010 D3F8C831 	 ldr r3,[r3,#456]
 2210 0014 7B61     	 str r3,[r7,#20]
 740:../Libraries/XMCLib/src/xmc_vadc.c **** 
 741:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_GROUP_IRQ_KERNEL == type)
 2211              	 .loc 2 741 0
 2212 0016 FB79     	 ldrb r3,[r7,#7]
 2213 0018 002B     	 cmp r3,#0
 2214 001a 07D1     	 bne .L78
 742:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 743:../Libraries/XMCLib/src/xmc_vadc.c ****     sract |= (uint32_t)((uint32_t)1 << sr_num);
 2215              	 .loc 2 743 0
 2216 001c BB68     	 ldr r3,[r7,#8]
 2217 001e 0122     	 movs r2,#1
 2218 0020 02FA03F3 	 lsl r3,r2,r3
 2219 0024 7A69     	 ldr r2,[r7,#20]
 2220 0026 1343     	 orrs r3,r3,r2
 2221 0028 7B61     	 str r3,[r7,#20]
 2222 002a 07E0     	 b .L79
 2223              	.L78:
 744:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 745:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 746:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 747:../Libraries/XMCLib/src/xmc_vadc.c ****     sract |= (uint32_t)((uint32_t)1 << (sr_num + (uint32_t)8));
 2224              	 .loc 2 747 0
 2225 002c BB68     	 ldr r3,[r7,#8]
 2226 002e 0833     	 adds r3,r3,#8
 2227 0030 1A46     	 mov r2,r3
 2228 0032 0123     	 movs r3,#1
 2229 0034 9340     	 lsls r3,r3,r2
 2230 0036 7A69     	 ldr r2,[r7,#20]
 2231 0038 1343     	 orrs r3,r3,r2
 2232 003a 7B61     	 str r3,[r7,#20]
 2233              	.L79:
 748:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 749:../Libraries/XMCLib/src/xmc_vadc.c **** 
 750:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SRACT = sract;
 2234              	 .loc 2 750 0
 2235 003c FB68     	 ldr r3,[r7,#12]
 2236 003e 7A69     	 ldr r2,[r7,#20]
 2237 0040 C3F8C821 	 str r2,[r3,#456]
 751:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2238              	 .loc 2 751 0
 2239 0044 1C37     	 adds r7,r7,#28
 2240              	.LCFI191:
 2241              	 .cfi_def_cfa_offset 4
 2242 0046 BD46     	 mov sp,r7
 2243              	.LCFI192:
 2244              	 .cfi_def_cfa_register 13
 2245              	 
 2246 0048 5DF8047B 	 ldr r7,[sp],#4
 2247              	.LCFI193:
 2248              	 .cfi_restore 7
 2249              	 .cfi_def_cfa_offset 0
 2250 004c 7047     	 bx lr
 2251              	 .cfi_endproc
 2252              	.LFE264:
 2254 004e 00BF     	 .section .text.XMC_VADC_GROUP_ScanInit,"ax",%progbits
 2255              	 .align 2
 2256              	 .global XMC_VADC_GROUP_ScanInit
 2257              	 .thumb
 2258              	 .thumb_func
 2260              	XMC_VADC_GROUP_ScanInit:
 2261              	.LFB265:
 752:../Libraries/XMCLib/src/xmc_vadc.c **** 
 753:../Libraries/XMCLib/src/xmc_vadc.c **** #if XMC_VADC_BOUNDARY_FLAG_SELECT == 1U
 754:../Libraries/XMCLib/src/xmc_vadc.c **** 
 755:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the SR line for the Boundary flag node pointer*/
 756:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetBoundaryEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
 757:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                   const uint8_t boundary_flag_num,
 758:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                   const XMC_VADC_BOUNDARY_NODE_t sr
 759:../Libraries/XMCLib/src/xmc_vadc.c **** {
 760:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t flag_pos;
 761:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetBoundaryEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GRO
 762:../Libraries/XMCLib/src/xmc_vadc.c **** 
 763:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the GxBFLNP */
 764:../Libraries/XMCLib/src/xmc_vadc.c ****   flag_pos = (uint32_t)boundary_flag_num << (uint32_t)2;
 765:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLNP &= ~((uint32_t)VADC_G_BFLNP_BFL0NP_Msk << flag_pos);
 766:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLNP |= (uint32_t)sr << flag_pos;
 767:../Libraries/XMCLib/src/xmc_vadc.c **** }
 768:../Libraries/XMCLib/src/xmc_vadc.c **** 
 769:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 770:../Libraries/XMCLib/src/xmc_vadc.c **** 
 771:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 772:../Libraries/XMCLib/src/xmc_vadc.c **** 
 773:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 774:../Libraries/XMCLib/src/xmc_vadc.c **** 
 775:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to Initialize the Sample and hold features*/
 776:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_Init(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, const XMC_VADC_GLOBAL_SHS_CONFI
 777:../Libraries/XMCLib/src/xmc_vadc.c **** {
 778:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_Init:Wrong SHS Pointer", (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(voi
 779:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_Init:Wrong Index number",(config == (XMC_VADC_GLOBAL_SHS_CONFIG_t
 780:../Libraries/XMCLib/src/xmc_vadc.c **** 
 781:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Initialize the SHS Configuration register*/
 782:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->SHSCFG = (uint32_t)((uint32_t)config->shscfg | (uint32_t)SHS_SHSCFG_SCWC_Msk);
 783:../Libraries/XMCLib/src/xmc_vadc.c **** 
 784:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 785:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Select the Calibration order*/
 786:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->CALCTR &= ~((uint32_t)SHS_CALCTR_CALORD_Msk);
 787:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->CALCTR |=  (uint32_t) ((uint32_t)config->calibration_order << SHS_CALCTR_CALORD_Pos);
 788:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 789:../Libraries/XMCLib/src/xmc_vadc.c **** }
 790:../Libraries/XMCLib/src/xmc_vadc.c **** 
 791:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 792:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the accelerated mode of conversion */
 793:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROUP
 794:../Libraries/XMCLib/src/xmc_vadc.c **** {
 795:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong SHS Pointer",
 796:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 797:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong Index number",(group_num <= XMC_VADC_
 798:../Libraries/XMCLib/src/xmc_vadc.c **** 
 799:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the converted to Accelerated mode from compatible mode*/
 800:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 801:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 802:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 |= (uint32_t)SHS_TIMCFG0_AT_Msk;
 803:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 804:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 805:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 806:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 |= (uint32_t)SHS_TIMCFG1_AT_Msk;
 807:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 808:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 809:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 810:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 811:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 812:../Libraries/XMCLib/src/xmc_vadc.c **** }
 813:../Libraries/XMCLib/src/xmc_vadc.c **** 
 814:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable the accelerated mode of conversion */
 815:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROU
 816:../Libraries/XMCLib/src/xmc_vadc.c **** {
 817:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:Wrong SHS Pointer",
 818:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 819:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:Wrong Index number",(group_num <= XMC_VADC
 820:../Libraries/XMCLib/src/xmc_vadc.c **** 
 821:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the converted to Accelerated mode from compatible mode*/
 822:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 823:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 824:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 &= ~(uint32_t)SHS_TIMCFG0_AT_Msk;
 825:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 826:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 827:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 828:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 &= ~(uint32_t)SHS_TIMCFG1_AT_Msk;
 829:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 830:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 831:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 832:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 833:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 834:../Libraries/XMCLib/src/xmc_vadc.c **** }
 835:../Libraries/XMCLib/src/xmc_vadc.c **** 
 836:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the Short sample time of the Sample and hold module*/
 837:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetShortSampleTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 838:../Libraries/XMCLib/src/xmc_vadc.c ****                                             XMC_VADC_GROUP_INDEX_t group_num,
 839:../Libraries/XMCLib/src/xmc_vadc.c ****                                             uint8_t sst_value)
 840:../Libraries/XMCLib/src/xmc_vadc.c **** {
 841:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong SHS Pointer",
 842:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 843:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong Index number",(group_num <= XMC_VADC_GRO
 844:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong SST value",(sst_value < 64U))
 845:../Libraries/XMCLib/src/xmc_vadc.c **** 
 846:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the short sample time for the Accelerated mode of operation*/
 847:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 848:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 849:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 &= ~((uint32_t)SHS_TIMCFG0_SST_Msk);
 850:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 |= (uint32_t)((uint32_t)sst_value << SHS_TIMCFG0_SST_Pos );
 851:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 852:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 853:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 854:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 &= ~((uint32_t)SHS_TIMCFG1_SST_Msk);
 855:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 |= (uint32_t)((uint32_t)sst_value << SHS_TIMCFG1_SST_Pos );
 856:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 857:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 858:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 859:../Libraries/XMCLib/src/xmc_vadc.c ****   /* for MISRA*/
 860:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 861:../Libraries/XMCLib/src/xmc_vadc.c **** }
 862:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 863:../Libraries/XMCLib/src/xmc_vadc.c **** 
 864:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the gain factor of the Sample and hold module*/
 865:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetGainFactor(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 866:../Libraries/XMCLib/src/xmc_vadc.c ****                                        uint8_t gain_value,
 867:../Libraries/XMCLib/src/xmc_vadc.c ****                                        XMC_VADC_GROUP_INDEX_t group_num,
 868:../Libraries/XMCLib/src/xmc_vadc.c ****                                        uint8_t ch_num)
 869:../Libraries/XMCLib/src/xmc_vadc.c **** {
 870:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ch_mask;
 871:../Libraries/XMCLib/src/xmc_vadc.c **** 
 872:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetGainFactor:Wrong SHS Pointer", (shs_ptr == (XMC_VADC_GLOBAL_SH
 873:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetGainFactor:Wrong Index number",(group_num <= XMC_VADC_GROUP_IN
 874:../Libraries/XMCLib/src/xmc_vadc.c **** 
 875:../Libraries/XMCLib/src/xmc_vadc.c ****   /*Calculate location of channel bit-field*/
 876:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_mask = ((uint32_t)ch_num << (uint32_t)2);
 877:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 878:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 879:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR00 &= ~((uint32_t)SHS_GNCTR00_GAIN0_Msk << ch_mask) ;
 880:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR00 |=  ((uint32_t)gain_value << ch_mask);
 881:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 882:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 883:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 884:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR10 &= ~((uint32_t)SHS_GNCTR10_GAIN0_Msk << ch_mask);
 885:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR10 |=  ((uint32_t)gain_value << ch_mask);
 886:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 887:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 888:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 889:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 890:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 891:../Libraries/XMCLib/src/xmc_vadc.c **** }
 892:../Libraries/XMCLib/src/xmc_vadc.c **** 
 893:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 894:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the gain and offset calibration of the Sample and hold module*/
 895:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 896:../Libraries/XMCLib/src/xmc_vadc.c ****                                                          XMC_VADC_GROUP_INDEX_t group_num)
 897:../Libraries/XMCLib/src/xmc_vadc.c **** {
 898:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:Wrong SHS Pointer",
 899:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 900:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:Wrong group selected",
 901:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num <= (uint32_t)XMC_VADC_GROUP_INDEX_1))
 902:../Libraries/XMCLib/src/xmc_vadc.c **** 
 903:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable gain and offset calibration*/
 904:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 905:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 906:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 &= ~((uint32_t)SHS_CALOC0_DISCAL_Msk);
 907:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 908:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 909:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 910:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 &= ~((uint32_t)SHS_CALOC1_DISCAL_Msk);
 911:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 912:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 913:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 914:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 915:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 916:../Libraries/XMCLib/src/xmc_vadc.c **** }
 917:../Libraries/XMCLib/src/xmc_vadc.c **** 
 918:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the gain and offset calibration of the Sample and hold module*/
 919:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 920:../Libraries/XMCLib/src/xmc_vadc.c ****                                                           XMC_VADC_GROUP_INDEX_t group_num)
 921:../Libraries/XMCLib/src/xmc_vadc.c **** {
 922:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:Wrong SHS Pointer",
 923:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 924:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:Wrong group selected",
 925:../Libraries/XMCLib/src/xmc_vadc.c ****             (group_num <= (uint32_t)XMC_VADC_GROUP_INDEX_1))
 926:../Libraries/XMCLib/src/xmc_vadc.c **** 
 927:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 928:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 929:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 |= (uint32_t)SHS_CALOC0_DISCAL_Msk;
 930:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 931:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 932:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 933:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 |= (uint32_t)SHS_CALOC1_DISCAL_Msk;
 934:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 935:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 936:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 937:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 938:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 939:../Libraries/XMCLib/src/xmc_vadc.c **** }
 940:../Libraries/XMCLib/src/xmc_vadc.c **** 
 941:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to get the offset calibration value of the Sample and hold module*/
 942:../Libraries/XMCLib/src/xmc_vadc.c **** uint8_t XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 943:../Libraries/XMCLib/src/xmc_vadc.c ****                                                       XMC_VADC_GROUP_INDEX_t group_num,
 944:../Libraries/XMCLib/src/xmc_vadc.c ****                                                       XMC_VADC_SHS_GAIN_LEVEL_t gain_level)
 945:../Libraries/XMCLib/src/xmc_vadc.c **** {
 946:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t calibration_value;
 947:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong SHS Pointer",
 948:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 949:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong Group number selected",
 950:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
 951:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong gain level selected",
 952:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_0)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_1)||
 953:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_2)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_3))
 954:../Libraries/XMCLib/src/xmc_vadc.c **** 
 955:../Libraries/XMCLib/src/xmc_vadc.c ****   calibration_value = 0U;
 956:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 957:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 958:../Libraries/XMCLib/src/xmc_vadc.c ****     calibration_value = (shs_ptr->CALOC0 >> (uint32_t)gain_level) & (uint32_t)SHS_CALOC0_CALOFFVAL0
 959:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 960:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 961:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 962:../Libraries/XMCLib/src/xmc_vadc.c ****     calibration_value = (shs_ptr->CALOC1 >> (uint32_t)gain_level) & (uint32_t)SHS_CALOC1_CALOFFVAL0
 963:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 964:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 965:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 966:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 967:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 968:../Libraries/XMCLib/src/xmc_vadc.c ****   return ((uint8_t)calibration_value);
 969:../Libraries/XMCLib/src/xmc_vadc.c **** }
 970:../Libraries/XMCLib/src/xmc_vadc.c **** 
 971:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the offset calibration value of the Sample and hold module*/
 972:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 973:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    XMC_VADC_GROUP_INDEX_t group_num,
 974:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    XMC_VADC_SHS_GAIN_LEVEL_t gain_level,
 975:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    uint8_t offset_calibration_value)
 976:../Libraries/XMCLib/src/xmc_vadc.c **** {
 977:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong SHS Pointer",
 978:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 979:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong Group number selected",
 980:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
 981:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong gain level selected",
 982:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_0)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_1)||
 983:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_2)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_3))
 984:../Libraries/XMCLib/src/xmc_vadc.c **** 
 985:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 986:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 987:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 = (shs_ptr->CALOC0  & ~((uint32_t)SHS_CALOC0_CALOFFVAL0_Msk << (uint32_t)gain_l
 988:../Libraries/XMCLib/src/xmc_vadc.c ****                       (uint32_t)SHS_CALOC0_OFFWC_Msk;
 989:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 |=  ((uint32_t)offset_calibration_value << (uint32_t)gain_level) | (uint32_t)SH
 990:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 991:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 992:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 993:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 = (shs_ptr->CALOC1 & ~((uint32_t)SHS_CALOC1_CALOFFVAL0_Msk << (uint32_t)gain_le
 994:../Libraries/XMCLib/src/xmc_vadc.c ****                       (uint32_t)SHS_CALOC1_OFFWC_Msk;
 995:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 |=  ((uint32_t)offset_calibration_value << (uint32_t)gain_level) | (uint32_t)SH
 996:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 997:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 998:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 999:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
1000:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1001:../Libraries/XMCLib/src/xmc_vadc.c **** }
1002:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1003:../Libraries/XMCLib/src/xmc_vadc.c **** 
1004:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the values of sigma delta loop of the Sample and hold module*/
1005:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1006:../Libraries/XMCLib/src/xmc_vadc.c ****                                            XMC_VADC_GROUP_INDEX_t group_num,
1007:../Libraries/XMCLib/src/xmc_vadc.c ****                                            XMC_VADC_SHS_LOOP_CH_t loop_select,
1008:../Libraries/XMCLib/src/xmc_vadc.c ****                                            uint8_t ch_num)
1009:../Libraries/XMCLib/src/xmc_vadc.c **** {
1010:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong SHS Pointer",
1011:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1012:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Group number selected",
1013:../Libraries/XMCLib/src/xmc_vadc.c ****                (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
1014:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Delta sigma loop selected",
1015:../Libraries/XMCLib/src/xmc_vadc.c ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
1016:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Channel Number",
1017:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1018:../Libraries/XMCLib/src/xmc_vadc.c **** 
1019:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->LOOP &= ~(((uint32_t)SHS_LOOP_LPCH0_Msk | (uint32_t)SHS_LOOP_LPSH0_Msk | (uint32_t)SHS_L
1020:../Libraries/XMCLib/src/xmc_vadc.c ****                      << (uint32_t)loop_select);
1021:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->LOOP |= ((uint32_t)ch_num | ((uint32_t)group_num << (uint32_t)SHS_LOOP_LPSH0_Pos)) << (u
1022:../Libraries/XMCLib/src/xmc_vadc.c **** 
1023:../Libraries/XMCLib/src/xmc_vadc.c **** }
1024:../Libraries/XMCLib/src/xmc_vadc.c **** 
1025:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1026:../Libraries/XMCLib/src/xmc_vadc.c **** 
1027:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GSCAN_AVAILABLE == 1U)   
1028:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize the group scan hardware of a kernel */
1029:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SCAN_CONFIG_t *confi
1030:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2262              	 .loc 2 1030 0
 2263              	 .cfi_startproc
 2264              	 
 2265              	 
 2266 0000 80B5     	 push {r7,lr}
 2267              	.LCFI194:
 2268              	 .cfi_def_cfa_offset 8
 2269              	 .cfi_offset 7,-8
 2270              	 .cfi_offset 14,-4
 2271 0002 84B0     	 sub sp,sp,#16
 2272              	.LCFI195:
 2273              	 .cfi_def_cfa_offset 24
 2274 0004 00AF     	 add r7,sp,#0
 2275              	.LCFI196:
 2276              	 .cfi_def_cfa_register 7
 2277 0006 7860     	 str r0,[r7,#4]
 2278 0008 3960     	 str r1,[r7]
1031:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t      reg;
1032:../Libraries/XMCLib/src/xmc_vadc.c **** 
1033:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1034:../Libraries/XMCLib/src/xmc_vadc.c **** 
1035:../Libraries/XMCLib/src/xmc_vadc.c ****   /* All configurations have to be performed with the arbitration slot disabled */
1036:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptr);
 2279              	 .loc 2 1036 0
 2280 000a 7868     	 ldr r0,[r7,#4]
 2281 000c FFF7FEFF 	 bl XMC_VADC_GROUP_ScanDisableArbitrationSlot
1037:../Libraries/XMCLib/src/xmc_vadc.c ****   
1038:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Read in the existing contents of arbitration priority register */
1039:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = group_ptr->ARBPR;
 2282              	 .loc 2 1039 0
 2283 0010 7B68     	 ldr r3,[r7,#4]
 2284 0012 D3F88430 	 ldr r3,[r3,#132]
 2285 0016 FB60     	 str r3,[r7,#12]
1040:../Libraries/XMCLib/src/xmc_vadc.c **** 
1041:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the priority of the request source */
1042:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~(uint32_t)VADC_G_ARBPR_PRIO1_Msk;
 2286              	 .loc 2 1042 0
 2287 0018 FB68     	 ldr r3,[r7,#12]
 2288 001a 23F03003 	 bic r3,r3,#48
 2289 001e FB60     	 str r3,[r7,#12]
1043:../Libraries/XMCLib/src/xmc_vadc.c ****   reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO1_Pos);
 2290              	 .loc 2 1043 0
 2291 0020 3B68     	 ldr r3,[r7]
 2292 0022 1B78     	 ldrb r3,[r3]
 2293 0024 C3F38103 	 ubfx r3,r3,#2,#2
 2294 0028 DBB2     	 uxtb r3,r3
 2295 002a 1B01     	 lsls r3,r3,#4
 2296 002c FA68     	 ldr r2,[r7,#12]
 2297 002e 1343     	 orrs r3,r3,r2
 2298 0030 FB60     	 str r3,[r7,#12]
1044:../Libraries/XMCLib/src/xmc_vadc.c ****   
1045:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the start mode */
1046:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 2299              	 .loc 2 1046 0
 2300 0032 3B68     	 ldr r3,[r7]
 2301 0034 1B78     	 ldrb r3,[r3]
 2302 0036 03F00303 	 and r3,r3,#3
 2303 003a DBB2     	 uxtb r3,r3
 2304 003c 002B     	 cmp r3,#0
 2305 003e 03D0     	 beq .L81
1047:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1048:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)(VADC_G_ARBPR_CSM1_Msk);
 2306              	 .loc 2 1048 0
 2307 0040 FB68     	 ldr r3,[r7,#12]
 2308 0042 43F08003 	 orr r3,r3,#128
 2309 0046 FB60     	 str r3,[r7,#12]
 2310              	.L81:
1049:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1050:../Libraries/XMCLib/src/xmc_vadc.c **** 
1051:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR = reg;
 2311              	 .loc 2 1051 0
 2312 0048 7B68     	 ldr r3,[r7,#4]
 2313 004a FA68     	 ldr r2,[r7,#12]
 2314 004c C3F88420 	 str r2,[r3,#132]
1052:../Libraries/XMCLib/src/xmc_vadc.c **** 
1053:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL = (uint32_t)(config->asctrl |(VADC_G_ASCTRL_XTWC_Msk) |(VADC_G_ASCTRL_GTWC_Msk)
 2315              	 .loc 2 1053 0
 2316 0050 3B68     	 ldr r3,[r7]
 2317 0052 5B68     	 ldr r3,[r3,#4]
 2318 0054 43F08023 	 orr r3,r3,#-2147450880
 2319 0058 43F40003 	 orr r3,r3,#8388608
 2320 005c 7A68     	 ldr r2,[r7,#4]
 2321 005e C2F82031 	 str r3,[r2,#288]
1054:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  (VADC_G_ASCTRL_TMWC_Msk));
1055:../Libraries/XMCLib/src/xmc_vadc.c **** 
1056:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR  = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VA
 2322              	 .loc 2 1056 0
 2323 0062 3B68     	 ldr r3,[r7]
 2324 0064 9B68     	 ldr r3,[r3,#8]
 2325 0066 43F00102 	 orr r2,r3,#1
 2326 006a 7B68     	 ldr r3,[r7,#4]
 2327 006c C3F82421 	 str r2,[r3,#292]
1057:../Libraries/XMCLib/src/xmc_vadc.c ****   
1058:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 2328              	 .loc 2 1058 0
 2329 0070 3B68     	 ldr r3,[r7]
 2330 0072 1B78     	 ldrb r3,[r3]
 2331 0074 03F00303 	 and r3,r3,#3
 2332 0078 DBB2     	 uxtb r3,r3
 2333 007a 022B     	 cmp r3,#2
 2334 007c 07D1     	 bne .L82
1059:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1060:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_RPTDIS_Msk;
 2335              	 .loc 2 1060 0
 2336 007e 7B68     	 ldr r3,[r7,#4]
 2337 0080 D3F82431 	 ldr r3,[r3,#292]
 2338 0084 43F48032 	 orr r2,r3,#65536
 2339 0088 7B68     	 ldr r3,[r7,#4]
 2340 008a C3F82421 	 str r2,[r3,#292]
 2341              	.L82:
1061:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1062:../Libraries/XMCLib/src/xmc_vadc.c ****   
1063:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable arbitration slot now */
1064:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanEnableArbitrationSlot(group_ptr);
 2342              	 .loc 2 1064 0
 2343 008e 7868     	 ldr r0,[r7,#4]
 2344 0090 FFF7FEFF 	 bl XMC_VADC_GROUP_ScanEnableArbitrationSlot
1065:../Libraries/XMCLib/src/xmc_vadc.c ****   
1066:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2345              	 .loc 2 1066 0
 2346 0094 1037     	 adds r7,r7,#16
 2347              	.LCFI197:
 2348              	 .cfi_def_cfa_offset 8
 2349 0096 BD46     	 mov sp,r7
 2350              	.LCFI198:
 2351              	 .cfi_def_cfa_register 13
 2352              	 
 2353 0098 80BD     	 pop {r7,pc}
 2354              	 .cfi_endproc
 2355              	.LFE265:
 2357 009a 00BF     	 .section .text.XMC_VADC_GROUP_ScanSelectTrigger,"ax",%progbits
 2358              	 .align 2
 2359              	 .global XMC_VADC_GROUP_ScanSelectTrigger
 2360              	 .thumb
 2361              	 .thumb_func
 2363              	XMC_VADC_GROUP_ScanSelectTrigger:
 2364              	.LFB266:
1067:../Libraries/XMCLib/src/xmc_vadc.c **** 
1068:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger input for Group Scan request source */
1069:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_TRIGGER_INPUT_SEL
1070:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2365              	 .loc 2 1070 0
 2366              	 .cfi_startproc
 2367              	 
 2368              	 
 2369              	 
 2370 0000 80B4     	 push {r7}
 2371              	.LCFI199:
 2372              	 .cfi_def_cfa_offset 4
 2373              	 .cfi_offset 7,-4
 2374 0002 85B0     	 sub sp,sp,#20
 2375              	.LCFI200:
 2376              	 .cfi_def_cfa_offset 24
 2377 0004 00AF     	 add r7,sp,#0
 2378              	.LCFI201:
 2379              	 .cfi_def_cfa_register 7
 2380 0006 7860     	 str r0,[r7,#4]
 2381 0008 0B46     	 mov r3,r1
 2382 000a FB70     	 strb r3,[r7,#3]
1071:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1072:../Libraries/XMCLib/src/xmc_vadc.c **** 
1073:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1074:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTrigger:Wrong Trigger Port", ((trigger_input)< XMC_VADC_NUM_
1075:../Libraries/XMCLib/src/xmc_vadc.c **** 
1076:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 2383              	 .loc 2 1076 0
 2384 000c 7B68     	 ldr r3,[r7,#4]
 2385 000e D3F82031 	 ldr r3,[r3,#288]
 2386 0012 FB60     	 str r3,[r7,#12]
1077:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_G_ASCTRL_XTWC_Msk;
 2387              	 .loc 2 1077 0
 2388 0014 FB68     	 ldr r3,[r7,#12]
 2389 0016 43F40043 	 orr r3,r3,#32768
 2390 001a FB60     	 str r3,[r7,#12]
1078:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_XTSEL_Msk);
 2391              	 .loc 2 1078 0
 2392 001c FB68     	 ldr r3,[r7,#12]
 2393 001e 23F47063 	 bic r3,r3,#3840
 2394 0022 FB60     	 str r3,[r7,#12]
1079:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_input << VADC_G_ASCTRL_XTSEL_Pos);
 2395              	 .loc 2 1079 0
 2396 0024 FB78     	 ldrb r3,[r7,#3]
 2397 0026 1B02     	 lsls r3,r3,#8
 2398 0028 FA68     	 ldr r2,[r7,#12]
 2399 002a 1343     	 orrs r3,r3,r2
 2400 002c FB60     	 str r3,[r7,#12]
1080:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 2401              	 .loc 2 1080 0
 2402 002e 7B68     	 ldr r3,[r7,#4]
 2403 0030 FA68     	 ldr r2,[r7,#12]
 2404 0032 C3F82021 	 str r2,[r3,#288]
1081:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2405              	 .loc 2 1081 0
 2406 0036 1437     	 adds r7,r7,#20
 2407              	.LCFI202:
 2408              	 .cfi_def_cfa_offset 4
 2409 0038 BD46     	 mov sp,r7
 2410              	.LCFI203:
 2411              	 .cfi_def_cfa_register 13
 2412              	 
 2413 003a 5DF8047B 	 ldr r7,[sp],#4
 2414              	.LCFI204:
 2415              	 .cfi_restore 7
 2416              	 .cfi_def_cfa_offset 0
 2417 003e 7047     	 bx lr
 2418              	 .cfi_endproc
 2419              	.LFE266:
 2421              	 .section .text.XMC_VADC_GROUP_ScanSelectTriggerEdge,"ax",%progbits
 2422              	 .align 2
 2423              	 .global XMC_VADC_GROUP_ScanSelectTriggerEdge
 2424              	 .thumb
 2425              	 .thumb_func
 2427              	XMC_VADC_GROUP_ScanSelectTriggerEdge:
 2428              	.LFB267:
1082:../Libraries/XMCLib/src/xmc_vadc.c **** 
1083:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1084:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER
1085:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2429              	 .loc 2 1085 0
 2430              	 .cfi_startproc
 2431              	 
 2432              	 
 2433              	 
 2434 0000 80B4     	 push {r7}
 2435              	.LCFI205:
 2436              	 .cfi_def_cfa_offset 4
 2437              	 .cfi_offset 7,-4
 2438 0002 85B0     	 sub sp,sp,#20
 2439              	.LCFI206:
 2440              	 .cfi_def_cfa_offset 24
 2441 0004 00AF     	 add r7,sp,#0
 2442              	.LCFI207:
 2443              	 .cfi_def_cfa_register 7
 2444 0006 7860     	 str r0,[r7,#4]
 2445 0008 0B46     	 mov r3,r1
 2446 000a FB70     	 strb r3,[r7,#3]
1086:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1087:../Libraries/XMCLib/src/xmc_vadc.c **** 
1088:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTriggerEdge:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
1089:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTriggerEdge:Wrong Trigger Port", ((trigger_edge)<= XMC_VADC_
1090:../Libraries/XMCLib/src/xmc_vadc.c **** 
1091:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 2447              	 .loc 2 1091 0
 2448 000c 7B68     	 ldr r3,[r7,#4]
 2449 000e D3F82031 	 ldr r3,[r3,#288]
 2450 0012 FB60     	 str r3,[r7,#12]
1092:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_G_ASCTRL_XTWC_Msk;
 2451              	 .loc 2 1092 0
 2452 0014 FB68     	 ldr r3,[r7,#12]
 2453 0016 43F40043 	 orr r3,r3,#32768
 2454 001a FB60     	 str r3,[r7,#12]
1093:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_XTMODE_Msk);
 2455              	 .loc 2 1093 0
 2456 001c FB68     	 ldr r3,[r7,#12]
 2457 001e 23F4C043 	 bic r3,r3,#24576
 2458 0022 FB60     	 str r3,[r7,#12]
1094:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_edge << VADC_G_ASCTRL_XTMODE_Pos);
 2459              	 .loc 2 1094 0
 2460 0024 FB78     	 ldrb r3,[r7,#3]
 2461 0026 5B03     	 lsls r3,r3,#13
 2462 0028 FA68     	 ldr r2,[r7,#12]
 2463 002a 1343     	 orrs r3,r3,r2
 2464 002c FB60     	 str r3,[r7,#12]
1095:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 2465              	 .loc 2 1095 0
 2466 002e 7B68     	 ldr r3,[r7,#4]
 2467 0030 FA68     	 ldr r2,[r7,#12]
 2468 0032 C3F82021 	 str r2,[r3,#288]
1096:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2469              	 .loc 2 1096 0
 2470 0036 1437     	 adds r7,r7,#20
 2471              	.LCFI208:
 2472              	 .cfi_def_cfa_offset 4
 2473 0038 BD46     	 mov sp,r7
 2474              	.LCFI209:
 2475              	 .cfi_def_cfa_register 13
 2476              	 
 2477 003a 5DF8047B 	 ldr r7,[sp],#4
 2478              	.LCFI210:
 2479              	 .cfi_restore 7
 2480              	 .cfi_def_cfa_offset 0
 2481 003e 7047     	 bx lr
 2482              	 .cfi_endproc
 2483              	.LFE267:
 2485              	 .section .text.XMC_VADC_GROUP_ScanSelectGating,"ax",%progbits
 2486              	 .align 2
 2487              	 .global XMC_VADC_GROUP_ScanSelectGating
 2488              	 .thumb
 2489              	 .thumb_func
 2491              	XMC_VADC_GROUP_ScanSelectGating:
 2492              	.LFB268:
1097:../Libraries/XMCLib/src/xmc_vadc.c **** 
1098:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger gating input for Group Scan request source */
1099:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectGating(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATE_INPUT_SELECT_
1100:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2493              	 .loc 2 1100 0
 2494              	 .cfi_startproc
 2495              	 
 2496              	 
 2497              	 
 2498 0000 80B4     	 push {r7}
 2499              	.LCFI211:
 2500              	 .cfi_def_cfa_offset 4
 2501              	 .cfi_offset 7,-4
 2502 0002 85B0     	 sub sp,sp,#20
 2503              	.LCFI212:
 2504              	 .cfi_def_cfa_offset 24
 2505 0004 00AF     	 add r7,sp,#0
 2506              	.LCFI213:
 2507              	 .cfi_def_cfa_register 7
 2508 0006 7860     	 str r0,[r7,#4]
 2509 0008 0B46     	 mov r3,r1
 2510 000a FB70     	 strb r3,[r7,#3]
1101:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1102:../Libraries/XMCLib/src/xmc_vadc.c **** 
1103:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectGating:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
1104:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectGating:Wrong Gating Port", ((gating_input)< XMC_VADC_NUM_POR
1105:../Libraries/XMCLib/src/xmc_vadc.c **** 
1106:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 2511              	 .loc 2 1106 0
 2512 000c 7B68     	 ldr r3,[r7,#4]
 2513 000e D3F82031 	 ldr r3,[r3,#288]
 2514 0012 FB60     	 str r3,[r7,#12]
1107:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)VADC_G_ASCTRL_GTWC_Msk;
 2515              	 .loc 2 1107 0
 2516 0014 FB68     	 ldr r3,[r7,#12]
 2517 0016 43F40003 	 orr r3,r3,#8388608
 2518 001a FB60     	 str r3,[r7,#12]
1108:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_GTSEL_Msk);
 2519              	 .loc 2 1108 0
 2520 001c FB68     	 ldr r3,[r7,#12]
 2521 001e 23F47023 	 bic r3,r3,#983040
 2522 0022 FB60     	 str r3,[r7,#12]
1109:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)gating_input << VADC_G_ASCTRL_GTSEL_Pos);
 2523              	 .loc 2 1109 0
 2524 0024 FB78     	 ldrb r3,[r7,#3]
 2525 0026 1B04     	 lsls r3,r3,#16
 2526 0028 FA68     	 ldr r2,[r7,#12]
 2527 002a 1343     	 orrs r3,r3,r2
 2528 002c FB60     	 str r3,[r7,#12]
1110:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 2529              	 .loc 2 1110 0
 2530 002e 7B68     	 ldr r3,[r7,#4]
 2531 0030 FA68     	 ldr r2,[r7,#12]
 2532 0032 C3F82021 	 str r2,[r3,#288]
1111:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2533              	 .loc 2 1111 0
 2534 0036 1437     	 adds r7,r7,#20
 2535              	.LCFI214:
 2536              	 .cfi_def_cfa_offset 4
 2537 0038 BD46     	 mov sp,r7
 2538              	.LCFI215:
 2539              	 .cfi_def_cfa_register 13
 2540              	 
 2541 003a 5DF8047B 	 ldr r7,[sp],#4
 2542              	.LCFI216:
 2543              	 .cfi_restore 7
 2544              	 .cfi_def_cfa_offset 0
 2545 003e 7047     	 bx lr
 2546              	 .cfi_endproc
 2547              	.LFE268:
 2549              	 .section .text.XMC_VADC_GROUP_ScanSequenceAbort,"ax",%progbits
 2550              	 .align 2
 2551              	 .global XMC_VADC_GROUP_ScanSequenceAbort
 2552              	 .thumb
 2553              	 .thumb_func
 2555              	XMC_VADC_GROUP_ScanSequenceAbort:
 2556              	.LFB269:
1112:../Libraries/XMCLib/src/xmc_vadc.c **** 
1113:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to stop an ongoing conversion of a sequence */
1114:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSequenceAbort(XMC_VADC_GROUP_t *const group_ptr)
1115:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2557              	 .loc 2 1115 0
 2558              	 .cfi_startproc
 2559              	 
 2560              	 
 2561 0000 80B5     	 push {r7,lr}
 2562              	.LCFI217:
 2563              	 .cfi_def_cfa_offset 8
 2564              	 .cfi_offset 7,-8
 2565              	 .cfi_offset 14,-4
 2566 0002 84B0     	 sub sp,sp,#16
 2567              	.LCFI218:
 2568              	 .cfi_def_cfa_offset 24
 2569 0004 00AF     	 add r7,sp,#0
 2570              	.LCFI219:
 2571              	 .cfi_def_cfa_register 7
 2572 0006 7860     	 str r0,[r7,#4]
1116:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t asctrl;
1117:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1118:../Libraries/XMCLib/src/xmc_vadc.c **** 
1119:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSequenceAbort:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1120:../Libraries/XMCLib/src/xmc_vadc.c **** 
1121:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable trigger and gating before abort*/
1122:../Libraries/XMCLib/src/xmc_vadc.c ****   asctrl = group_ptr->ASCTRL;
 2573              	 .loc 2 1122 0
 2574 0008 7B68     	 ldr r3,[r7,#4]
 2575 000a D3F82031 	 ldr r3,[r3,#288]
 2576 000e FB60     	 str r3,[r7,#12]
1123:../Libraries/XMCLib/src/xmc_vadc.c **** 
1124:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL =(0U | (uint32_t)VADC_G_ASCTRL_XTWC_Msk |
 2577              	 .loc 2 1124 0
 2578 0010 7B68     	 ldr r3,[r7,#4]
 2579 0012 1A4A     	 ldr r2,.L87
 2580 0014 C3F82021 	 str r2,[r3,#288]
1125:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
1126:../Libraries/XMCLib/src/xmc_vadc.c **** 
1127:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable Arbitration before abort*/
1128:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN1_Pos) & 1U);
 2581              	 .loc 2 1128 0
 2582 0018 7B68     	 ldr r3,[r7,#4]
 2583 001a D3F88430 	 ldr r3,[r3,#132]
 2584 001e 5B0E     	 lsrs r3,r3,#25
 2585 0020 03F00103 	 and r3,r3,#1
 2586 0024 002B     	 cmp r3,#0
 2587 0026 14BF     	 ite ne
 2588 0028 0123     	 movne r3,#1
 2589 002a 0023     	 moveq r3,#0
 2590 002c FB72     	 strb r3,[r7,#11]
1129:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptr);
 2591              	 .loc 2 1129 0
 2592 002e 7868     	 ldr r0,[r7,#4]
 2593 0030 FFF7FEFF 	 bl XMC_VADC_GROUP_ScanDisableArbitrationSlot
1130:../Libraries/XMCLib/src/xmc_vadc.c **** 
1131:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENGT_Msk);
 2594              	 .loc 2 1131 0
 2595 0034 7B68     	 ldr r3,[r7,#4]
 2596 0036 D3F82431 	 ldr r3,[r3,#292]
 2597 003a 23F00302 	 bic r2,r3,#3
 2598 003e 7B68     	 ldr r3,[r7,#4]
 2599 0040 C3F82421 	 str r2,[r3,#292]
1132:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_CLRPND_Msk;
 2600              	 .loc 2 1132 0
 2601 0044 7B68     	 ldr r3,[r7,#4]
 2602 0046 D3F82431 	 ldr r3,[r3,#292]
 2603 004a 43F48072 	 orr r2,r3,#256
 2604 004e 7B68     	 ldr r3,[r7,#4]
 2605 0050 C3F82421 	 str r2,[r3,#292]
1133:../Libraries/XMCLib/src/xmc_vadc.c **** 
1134:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Enable the arbitration slot 1*/
1135:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN1_Pos);
 2606              	 .loc 2 1135 0
 2607 0054 7B68     	 ldr r3,[r7,#4]
 2608 0056 D3F88420 	 ldr r2,[r3,#132]
 2609 005a FB7A     	 ldrb r3,[r7,#11]
 2610 005c 5B06     	 lsls r3,r3,#25
 2611 005e 1A43     	 orrs r2,r2,r3
 2612 0060 7B68     	 ldr r3,[r7,#4]
 2613 0062 C3F88420 	 str r2,[r3,#132]
1136:../Libraries/XMCLib/src/xmc_vadc.c **** 
1137:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1138:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL =(asctrl | (uint32_t)VADC_G_ASCTRL_XTWC_Msk |
1139:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
 2614              	 .loc 2 1139 0
 2615 0066 FB68     	 ldr r3,[r7,#12]
 2616 0068 43F08023 	 orr r3,r3,#-2147450880
 2617 006c 43F40003 	 orr r3,r3,#8388608
1138:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
 2618              	 .loc 2 1138 0
 2619 0070 7A68     	 ldr r2,[r7,#4]
 2620 0072 C2F82031 	 str r3,[r2,#288]
1140:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2621              	 .loc 2 1140 0
 2622 0076 1037     	 adds r7,r7,#16
 2623              	.LCFI220:
 2624              	 .cfi_def_cfa_offset 8
 2625 0078 BD46     	 mov sp,r7
 2626              	.LCFI221:
 2627              	 .cfi_def_cfa_register 13
 2628              	 
 2629 007a 80BD     	 pop {r7,pc}
 2630              	.L88:
 2631              	 .align 2
 2632              	.L87:
 2633 007c 00808080 	 .word -2139062272
 2634              	 .cfi_endproc
 2635              	.LFE269:
 2637              	 .section .text.XMC_VADC_GROUP_ScanGetNumChannelsPending,"ax",%progbits
 2638              	 .align 2
 2639              	 .global XMC_VADC_GROUP_ScanGetNumChannelsPending
 2640              	 .thumb
 2641              	 .thumb_func
 2643              	XMC_VADC_GROUP_ScanGetNumChannelsPending:
 2644              	.LFB270:
1141:../Libraries/XMCLib/src/xmc_vadc.c **** 
1142:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to find out number of channels awaiting conversion */
1143:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_ScanGetNumChannelsPending(XMC_VADC_GROUP_t *const group_ptr)
1144:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2645              	 .loc 2 1144 0
 2646              	 .cfi_startproc
 2647              	 
 2648              	 
 2649              	 
 2650 0000 80B4     	 push {r7}
 2651              	.LCFI222:
 2652              	 .cfi_def_cfa_offset 4
 2653              	 .cfi_offset 7,-4
 2654 0002 87B0     	 sub sp,sp,#28
 2655              	.LCFI223:
 2656              	 .cfi_def_cfa_offset 32
 2657 0004 00AF     	 add r7,sp,#0
 2658              	.LCFI224:
 2659              	 .cfi_def_cfa_register 7
 2660 0006 7860     	 str r0,[r7,#4]
1145:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1146:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1147:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t count;
1148:../Libraries/XMCLib/src/xmc_vadc.c **** 
1149:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanGetNumChannelsPending:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1150:../Libraries/XMCLib/src/xmc_vadc.c **** 
1151:../Libraries/XMCLib/src/xmc_vadc.c **** 
1152:../Libraries/XMCLib/src/xmc_vadc.c ****   count = 0U;
 2661              	 .loc 2 1152 0
 2662 0008 0023     	 movs r3,#0
 2663 000a FB60     	 str r3,[r7,#12]
1153:../Libraries/XMCLib/src/xmc_vadc.c **** 
1154:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_ptr->ASPND)
 2664              	 .loc 2 1154 0
 2665 000c 7B68     	 ldr r3,[r7,#4]
 2666 000e D3F82C31 	 ldr r3,[r3,#300]
 2667 0012 002B     	 cmp r3,#0
 2668 0014 17D0     	 beq .L90
1155:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1156:../Libraries/XMCLib/src/xmc_vadc.c ****     reg = group_ptr->ASPND;
 2669              	 .loc 2 1156 0
 2670 0016 7B68     	 ldr r3,[r7,#4]
 2671 0018 D3F82C31 	 ldr r3,[r3,#300]
 2672 001c 7B61     	 str r3,[r7,#20]
1157:../Libraries/XMCLib/src/xmc_vadc.c **** 
1158:../Libraries/XMCLib/src/xmc_vadc.c ****     for(i=0U;i<XMC_VADC_NUM_CHANNELS_PER_GROUP;i++)
 2673              	 .loc 2 1158 0
 2674 001e 0023     	 movs r3,#0
 2675 0020 3B61     	 str r3,[r7,#16]
 2676 0022 0DE0     	 b .L91
 2677              	.L93:
1159:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1160:../Libraries/XMCLib/src/xmc_vadc.c ****       if (reg & 1U)
 2678              	 .loc 2 1160 0
 2679 0024 7B69     	 ldr r3,[r7,#20]
 2680 0026 03F00103 	 and r3,r3,#1
 2681 002a 002B     	 cmp r3,#0
 2682 002c 02D0     	 beq .L92
1161:../Libraries/XMCLib/src/xmc_vadc.c ****       {
1162:../Libraries/XMCLib/src/xmc_vadc.c ****         count++;
 2683              	 .loc 2 1162 0
 2684 002e FB68     	 ldr r3,[r7,#12]
 2685 0030 0133     	 adds r3,r3,#1
 2686 0032 FB60     	 str r3,[r7,#12]
 2687              	.L92:
1163:../Libraries/XMCLib/src/xmc_vadc.c ****       }
1164:../Libraries/XMCLib/src/xmc_vadc.c ****       reg = (uint32_t)(reg >> (uint32_t)1);
 2688              	 .loc 2 1164 0 discriminator 2
 2689 0034 7B69     	 ldr r3,[r7,#20]
 2690 0036 5B08     	 lsrs r3,r3,#1
 2691 0038 7B61     	 str r3,[r7,#20]
1158:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 2692              	 .loc 2 1158 0 discriminator 2
 2693 003a 3B69     	 ldr r3,[r7,#16]
 2694 003c 0133     	 adds r3,r3,#1
 2695 003e 3B61     	 str r3,[r7,#16]
 2696              	.L91:
1158:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 2697              	 .loc 2 1158 0 is_stmt 0 discriminator 1
 2698 0040 3B69     	 ldr r3,[r7,#16]
 2699 0042 072B     	 cmp r3,#7
 2700 0044 EED9     	 bls .L93
 2701              	.L90:
1165:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1166:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1167:../Libraries/XMCLib/src/xmc_vadc.c **** 
1168:../Libraries/XMCLib/src/xmc_vadc.c ****   return count;
 2702              	 .loc 2 1168 0 is_stmt 1
 2703 0046 FB68     	 ldr r3,[r7,#12]
1169:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2704              	 .loc 2 1169 0
 2705 0048 1846     	 mov r0,r3
 2706 004a 1C37     	 adds r7,r7,#28
 2707              	.LCFI225:
 2708              	 .cfi_def_cfa_offset 4
 2709 004c BD46     	 mov sp,r7
 2710              	.LCFI226:
 2711              	 .cfi_def_cfa_register 13
 2712              	 
 2713 004e 5DF8047B 	 ldr r7,[sp],#4
 2714              	.LCFI227:
 2715              	 .cfi_restore 7
 2716              	 .cfi_def_cfa_offset 0
 2717 0052 7047     	 bx lr
 2718              	 .cfi_endproc
 2719              	.LFE270:
 2721              	 .section .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode,"ax",%progbits
 2722              	 .align 2
 2723              	 .global XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode
 2724              	 .thumb
 2725              	 .thumb_func
 2727              	XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:
 2728              	.LFB271:
1170:../Libraries/XMCLib/src/xmc_vadc.c **** 
1171:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select a service request line (NVIC Node) for request source event */
1172:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VA
1173:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2729              	 .loc 2 1173 0
 2730              	 .cfi_startproc
 2731              	 
 2732              	 
 2733              	 
 2734 0000 80B4     	 push {r7}
 2735              	.LCFI228:
 2736              	 .cfi_def_cfa_offset 4
 2737              	 .cfi_offset 7,-4
 2738 0002 85B0     	 sub sp,sp,#20
 2739              	.LCFI229:
 2740              	 .cfi_def_cfa_offset 24
 2741 0004 00AF     	 add r7,sp,#0
 2742              	.LCFI230:
 2743              	 .cfi_def_cfa_register 7
 2744 0006 7860     	 str r0,[r7,#4]
 2745 0008 0B46     	 mov r3,r1
 2746 000a FB70     	 strb r3,[r7,#3]
1174:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sevnp;
1175:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp = group_ptr->SEVNP;
 2747              	 .loc 2 1175 0
 2748 000c 7B68     	 ldr r3,[r7,#4]
 2749 000e D3F8C031 	 ldr r3,[r3,#448]
 2750 0012 FB60     	 str r3,[r7,#12]
1176:../Libraries/XMCLib/src/xmc_vadc.c **** 
1177:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_G
1178:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_
1179:../Libraries/XMCLib/src/xmc_vadc.c **** 
1180:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV1NP_Msk);
 2751              	 .loc 2 1180 0
 2752 0014 FB68     	 ldr r3,[r7,#12]
 2753 0016 23F0F003 	 bic r3,r3,#240
 2754 001a FB60     	 str r3,[r7,#12]
1181:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV1NP_Pos);
 2755              	 .loc 2 1181 0
 2756 001c FB78     	 ldrb r3,[r7,#3]
 2757 001e 1B01     	 lsls r3,r3,#4
 2758 0020 FA68     	 ldr r2,[r7,#12]
 2759 0022 1343     	 orrs r3,r3,r2
 2760 0024 FB60     	 str r3,[r7,#12]
1182:../Libraries/XMCLib/src/xmc_vadc.c **** 
1183:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SEVNP = sevnp;
 2761              	 .loc 2 1183 0
 2762 0026 7B68     	 ldr r3,[r7,#4]
 2763 0028 FA68     	 ldr r2,[r7,#12]
 2764 002a C3F8C021 	 str r2,[r3,#448]
1184:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2765              	 .loc 2 1184 0
 2766 002e 1437     	 adds r7,r7,#20
 2767              	.LCFI231:
 2768              	 .cfi_def_cfa_offset 4
 2769 0030 BD46     	 mov sp,r7
 2770              	.LCFI232:
 2771              	 .cfi_def_cfa_register 13
 2772              	 
 2773 0032 5DF8047B 	 ldr r7,[sp],#4
 2774              	.LCFI233:
 2775              	 .cfi_restore 7
 2776              	 .cfi_def_cfa_offset 0
 2777 0036 7047     	 bx lr
 2778              	 .cfi_endproc
 2779              	.LFE271:
 2781              	 .section .text.XMC_VADC_GROUP_ScanRemoveChannel,"ax",%progbits
 2782              	 .align 2
 2783              	 .global XMC_VADC_GROUP_ScanRemoveChannel
 2784              	 .thumb
 2785              	 .thumb_func
 2787              	XMC_VADC_GROUP_ScanRemoveChannel:
 2788              	.LFB272:
1185:../Libraries/XMCLib/src/xmc_vadc.c **** 
1186:../Libraries/XMCLib/src/xmc_vadc.c **** /* Removes the selected channel from conversion*/
1187:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanRemoveChannel(XMC_VADC_GROUP_t *const group_ptr, const uint32_t channel_num
1188:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2789              	 .loc 2 1188 0
 2790              	 .cfi_startproc
 2791              	 
 2792              	 
 2793              	 
 2794 0000 80B4     	 push {r7}
 2795              	.LCFI234:
 2796              	 .cfi_def_cfa_offset 4
 2797              	 .cfi_offset 7,-4
 2798 0002 85B0     	 sub sp,sp,#20
 2799              	.LCFI235:
 2800              	 .cfi_def_cfa_offset 24
 2801 0004 00AF     	 add r7,sp,#0
 2802              	.LCFI236:
 2803              	 .cfi_def_cfa_register 7
 2804 0006 7860     	 str r0,[r7,#4]
 2805 0008 3960     	 str r1,[r7]
1189:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t assel;
1190:../Libraries/XMCLib/src/xmc_vadc.c **** 
1191:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanRemoveChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1192:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanRemoveChannel:Wrong channel number", ((channel_num)< XMC_VADC_NUM_
1193:../Libraries/XMCLib/src/xmc_vadc.c **** 
1194:../Libraries/XMCLib/src/xmc_vadc.c ****   assel = group_ptr->ASSEL; 
 2806              	 .loc 2 1194 0
 2807 000a 7B68     	 ldr r3,[r7,#4]
 2808 000c D3F82831 	 ldr r3,[r3,#296]
 2809 0010 FB60     	 str r3,[r7,#12]
1195:../Libraries/XMCLib/src/xmc_vadc.c ****   assel &= (~( 1 << channel_num));
 2810              	 .loc 2 1195 0
 2811 0012 3B68     	 ldr r3,[r7]
 2812 0014 0122     	 movs r2,#1
 2813 0016 02FA03F3 	 lsl r3,r2,r3
 2814 001a DB43     	 mvns r3,r3
 2815 001c 1A46     	 mov r2,r3
 2816 001e FB68     	 ldr r3,[r7,#12]
 2817 0020 1340     	 ands r3,r3,r2
 2818 0022 FB60     	 str r3,[r7,#12]
1196:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASSEL  = assel;
 2819              	 .loc 2 1196 0
 2820 0024 7B68     	 ldr r3,[r7,#4]
 2821 0026 FA68     	 ldr r2,[r7,#12]
 2822 0028 C3F82821 	 str r2,[r3,#296]
1197:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2823              	 .loc 2 1197 0
 2824 002c 1437     	 adds r7,r7,#20
 2825              	.LCFI237:
 2826              	 .cfi_def_cfa_offset 4
 2827 002e BD46     	 mov sp,r7
 2828              	.LCFI238:
 2829              	 .cfi_def_cfa_register 13
 2830              	 
 2831 0030 5DF8047B 	 ldr r7,[sp],#4
 2832              	.LCFI239:
 2833              	 .cfi_restore 7
 2834              	 .cfi_def_cfa_offset 0
 2835 0034 7047     	 bx lr
 2836              	 .cfi_endproc
 2837              	.LFE272:
 2839 0036 00BF     	 .section .text.XMC_VADC_GLOBAL_BackgroundInit,"ax",%progbits
 2840              	 .align 2
 2841              	 .global XMC_VADC_GLOBAL_BackgroundInit
 2842              	 .thumb
 2843              	 .thumb_func
 2845              	XMC_VADC_GLOBAL_BackgroundInit:
 2846              	.LFB273:
1198:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1199:../Libraries/XMCLib/src/xmc_vadc.c **** 
1200:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize background scan request source hardware */
1201:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_
1202:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2847              	 .loc 2 1202 0
 2848              	 .cfi_startproc
 2849              	 
 2850              	 
 2851 0000 80B5     	 push {r7,lr}
 2852              	.LCFI240:
 2853              	 .cfi_def_cfa_offset 8
 2854              	 .cfi_offset 7,-8
 2855              	 .cfi_offset 14,-4
 2856 0002 86B0     	 sub sp,sp,#24
 2857              	.LCFI241:
 2858              	 .cfi_def_cfa_offset 32
 2859 0004 00AF     	 add r7,sp,#0
 2860              	.LCFI242:
 2861              	 .cfi_def_cfa_register 7
 2862 0006 7860     	 str r0,[r7,#4]
 2863 0008 3960     	 str r1,[r7]
1203:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1204:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t i;
1205:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1206:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t conv_start_mask;
1207:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
1208:../Libraries/XMCLib/src/xmc_vadc.c ****   
1209:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))
1210:../Libraries/XMCLib/src/xmc_vadc.c **** 
1211:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1212:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 2864              	 .loc 2 1212 0
 2865 000a 0023     	 movs r3,#0
 2866 000c FB75     	 strb r3,[r7,#23]
 2867 000e 09E0     	 b .L98
 2868              	.L99:
1213:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1214:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 2869              	 .loc 2 1214 0 discriminator 3
 2870 0010 FB7D     	 ldrb r3,[r7,#23]
 2871 0012 394A     	 ldr r2,.L106
 2872 0014 52F82330 	 ldr r3,[r2,r3,lsl#2]
 2873 0018 1846     	 mov r0,r3
 2874 001a FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
1212:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 2875              	 .loc 2 1212 0 discriminator 3
 2876 001e FB7D     	 ldrb r3,[r7,#23]
 2877 0020 0133     	 adds r3,r3,#1
 2878 0022 FB75     	 strb r3,[r7,#23]
 2879              	.L98:
1212:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 2880              	 .loc 2 1212 0 is_stmt 0 discriminator 1
 2881 0024 FB7D     	 ldrb r3,[r7,#23]
 2882 0026 032B     	 cmp r3,#3
 2883 0028 F2D9     	 bls .L99
1215:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1216:../Libraries/XMCLib/src/xmc_vadc.c ****   
1217:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_start_mask = (uint32_t) 0;
 2884              	 .loc 2 1217 0 is_stmt 1
 2885 002a 0023     	 movs r3,#0
 2886 002c 3B61     	 str r3,[r7,#16]
1218:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 2887              	 .loc 2 1218 0
 2888 002e 3B68     	 ldr r3,[r7]
 2889 0030 1B78     	 ldrb r3,[r3]
 2890 0032 03F00303 	 and r3,r3,#3
 2891 0036 DBB2     	 uxtb r3,r3
 2892 0038 002B     	 cmp r3,#0
 2893 003a 02D0     	 beq .L100
1219:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1220:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 2894              	 .loc 2 1220 0
 2895 003c 4FF40063 	 mov r3,#2048
 2896 0040 3B61     	 str r3,[r7,#16]
 2897              	.L100:
1221:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1222:../Libraries/XMCLib/src/xmc_vadc.c ****   
1223:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 2898              	 .loc 2 1223 0
 2899 0042 0023     	 movs r3,#0
 2900 0044 FB75     	 strb r3,[r7,#23]
 2901 0046 21E0     	 b .L101
 2902              	.L102:
1224:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1225:../Libraries/XMCLib/src/xmc_vadc.c ****     reg = g_xmc_vadc_group_array[i]->ARBPR;
 2903              	 .loc 2 1225 0 discriminator 3
 2904 0048 FB7D     	 ldrb r3,[r7,#23]
 2905 004a 2B4A     	 ldr r2,.L106
 2906 004c 52F82330 	 ldr r3,[r2,r3,lsl#2]
 2907 0050 D3F88430 	 ldr r3,[r3,#132]
 2908 0054 FB60     	 str r3,[r7,#12]
1226:../Libraries/XMCLib/src/xmc_vadc.c **** 
1227:../Libraries/XMCLib/src/xmc_vadc.c ****     reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 2909              	 .loc 2 1227 0 discriminator 3
 2910 0056 FB68     	 ldr r3,[r7,#12]
 2911 0058 23F44073 	 bic r3,r3,#768
 2912 005c FB60     	 str r3,[r7,#12]
1228:../Libraries/XMCLib/src/xmc_vadc.c **** 
1229:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Program the priority of the request source */
1230:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 2913              	 .loc 2 1230 0 discriminator 3
 2914 005e 3B68     	 ldr r3,[r7]
 2915 0060 1B78     	 ldrb r3,[r3]
 2916 0062 C3F38103 	 ubfx r3,r3,#2,#2
 2917 0066 DBB2     	 uxtb r3,r3
 2918 0068 1B02     	 lsls r3,r3,#8
 2919 006a FA68     	 ldr r2,[r7,#12]
 2920 006c 1343     	 orrs r3,r3,r2
 2921 006e FB60     	 str r3,[r7,#12]
1231:../Libraries/XMCLib/src/xmc_vadc.c ****   
1232:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Program the start mode */
1233:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= conv_start_mask;
 2922              	 .loc 2 1233 0 discriminator 3
 2923 0070 FA68     	 ldr r2,[r7,#12]
 2924 0072 3B69     	 ldr r3,[r7,#16]
 2925 0074 1343     	 orrs r3,r3,r2
 2926 0076 FB60     	 str r3,[r7,#12]
1234:../Libraries/XMCLib/src/xmc_vadc.c **** 
1235:../Libraries/XMCLib/src/xmc_vadc.c ****     g_xmc_vadc_group_array[i]->ARBPR = reg;
 2927              	 .loc 2 1235 0 discriminator 3
 2928 0078 FB7D     	 ldrb r3,[r7,#23]
 2929 007a 1F4A     	 ldr r2,.L106
 2930 007c 52F82330 	 ldr r3,[r2,r3,lsl#2]
 2931 0080 FA68     	 ldr r2,[r7,#12]
 2932 0082 C3F88420 	 str r2,[r3,#132]
1223:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 2933              	 .loc 2 1223 0 discriminator 3
 2934 0086 FB7D     	 ldrb r3,[r7,#23]
 2935 0088 0133     	 adds r3,r3,#1
 2936 008a FB75     	 strb r3,[r7,#23]
 2937              	.L101:
1223:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 2938              	 .loc 2 1223 0 is_stmt 0 discriminator 1
 2939 008c FB7D     	 ldrb r3,[r7,#23]
 2940 008e 032B     	 cmp r3,#3
 2941 0090 DAD9     	 bls .L102
1236:../Libraries/XMCLib/src/xmc_vadc.c ****   
1237:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1238:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
1239:../Libraries/XMCLib/src/xmc_vadc.c **** 
1240:../Libraries/XMCLib/src/xmc_vadc.c ****   /* program BRSCTRL register */
1241:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VAD
 2942              	 .loc 2 1241 0 is_stmt 1
 2943 0092 3B68     	 ldr r3,[r7]
 2944 0094 5B68     	 ldr r3,[r3,#4]
 2945 0096 43F40003 	 orr r3,r3,#8388608
 2946 009a 43F40043 	 orr r3,r3,#32768
 2947 009e 7A68     	 ldr r2,[r7,#4]
 2948 00a0 C2F80032 	 str r3,[r2,#512]
1242:../Libraries/XMCLib/src/xmc_vadc.c **** 
1243:../Libraries/XMCLib/src/xmc_vadc.c ****   /* program BRSMR register */
1244:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << V
 2949              	 .loc 2 1244 0
 2950 00a4 3B68     	 ldr r3,[r7]
 2951 00a6 9B68     	 ldr r3,[r3,#8]
 2952 00a8 43F00102 	 orr r2,r3,#1
 2953 00ac 7B68     	 ldr r3,[r7,#4]
 2954 00ae C3F80422 	 str r2,[r3,#516]
1245:../Libraries/XMCLib/src/xmc_vadc.c ****   
1246:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1247:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 2955              	 .loc 2 1247 0
 2956 00b2 3B68     	 ldr r3,[r7]
 2957 00b4 1B78     	 ldrb r3,[r3]
 2958 00b6 03F00303 	 and r3,r3,#3
 2959 00ba DBB2     	 uxtb r3,r3
 2960 00bc 022B     	 cmp r3,#2
 2961 00be 07D1     	 bne .L103
1248:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1249:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 2962              	 .loc 2 1249 0
 2963 00c0 7B68     	 ldr r3,[r7,#4]
 2964 00c2 D3F80432 	 ldr r3,[r3,#516]
 2965 00c6 43F48032 	 orr r2,r3,#65536
 2966 00ca 7B68     	 ldr r3,[r7,#4]
 2967 00cc C3F80422 	 str r2,[r3,#516]
 2968              	.L103:
1250:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1251:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1252:../Libraries/XMCLib/src/xmc_vadc.c ****   
1253:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1254:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 2969              	 .loc 2 1254 0
 2970 00d0 0023     	 movs r3,#0
 2971 00d2 FB75     	 strb r3,[r7,#23]
 2972 00d4 09E0     	 b .L104
 2973              	.L105:
1255:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1256:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 2974              	 .loc 2 1256 0 discriminator 3
 2975 00d6 FB7D     	 ldrb r3,[r7,#23]
 2976 00d8 074A     	 ldr r2,.L106
 2977 00da 52F82330 	 ldr r3,[r2,r3,lsl#2]
 2978 00de 1846     	 mov r0,r3
 2979 00e0 FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
1254:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 2980              	 .loc 2 1254 0 discriminator 3
 2981 00e4 FB7D     	 ldrb r3,[r7,#23]
 2982 00e6 0133     	 adds r3,r3,#1
 2983 00e8 FB75     	 strb r3,[r7,#23]
 2984              	.L104:
1254:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 2985              	 .loc 2 1254 0 is_stmt 0 discriminator 1
 2986 00ea FB7D     	 ldrb r3,[r7,#23]
 2987 00ec 032B     	 cmp r3,#3
 2988 00ee F2D9     	 bls .L105
1257:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1258:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
1259:../Libraries/XMCLib/src/xmc_vadc.c ****   
1260:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2989              	 .loc 2 1260 0 is_stmt 1
 2990 00f0 1837     	 adds r7,r7,#24
 2991              	.LCFI243:
 2992              	 .cfi_def_cfa_offset 8
 2993 00f2 BD46     	 mov sp,r7
 2994              	.LCFI244:
 2995              	 .cfi_def_cfa_register 13
 2996              	 
 2997 00f4 80BD     	 pop {r7,pc}
 2998              	.L107:
 2999 00f6 00BF     	 .align 2
 3000              	.L106:
 3001 00f8 00000000 	 .word g_xmc_vadc_group_array
 3002              	 .cfi_endproc
 3003              	.LFE273:
 3005              	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger,"ax",%progbits
 3006              	 .align 2
 3007              	 .global XMC_VADC_GLOBAL_BackgroundSelectTrigger
 3008              	 .thumb
 3009              	 .thumb_func
 3011              	XMC_VADC_GLOBAL_BackgroundSelectTrigger:
 3012              	.LFB274:
1261:../Libraries/XMCLib/src/xmc_vadc.c **** 
1262:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger for background scan request source */
1263:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectTrigger(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t in
1264:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3013              	 .loc 2 1264 0
 3014              	 .cfi_startproc
 3015              	 
 3016              	 
 3017              	 
 3018 0000 80B4     	 push {r7}
 3019              	.LCFI245:
 3020              	 .cfi_def_cfa_offset 4
 3021              	 .cfi_offset 7,-4
 3022 0002 85B0     	 sub sp,sp,#20
 3023              	.LCFI246:
 3024              	 .cfi_def_cfa_offset 24
 3025 0004 00AF     	 add r7,sp,#0
 3026              	.LCFI247:
 3027              	 .cfi_def_cfa_register 7
 3028 0006 7860     	 str r0,[r7,#4]
 3029 0008 3960     	 str r1,[r7]
1265:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1266:../Libraries/XMCLib/src/xmc_vadc.c **** 
1267:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("VADC_BCKGND_SelectTriggerInput:Wrong Module Pointer", (global_ptr == VADC))
1268:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTrigger:Wrong Trigger Port", ((input_num)< XMC_VADC_N
1269:../Libraries/XMCLib/src/xmc_vadc.c **** 
1270:../Libraries/XMCLib/src/xmc_vadc.c ****   
1271:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl       = global_ptr->BRSCTRL;
 3030              	 .loc 2 1271 0
 3031 000a 7B68     	 ldr r3,[r7,#4]
 3032 000c D3F80032 	 ldr r3,[r3,#512]
 3033 0010 FB60     	 str r3,[r7,#12]
1272:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)VADC_BRSCTRL_XTWC_Msk;
 3034              	 .loc 2 1272 0
 3035 0012 FB68     	 ldr r3,[r7,#12]
 3036 0014 43F40043 	 orr r3,r3,#32768
 3037 0018 FB60     	 str r3,[r7,#12]
1273:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      &= ~((uint32_t)VADC_BRSCTRL_XTSEL_Msk);
 3038              	 .loc 2 1273 0
 3039 001a FB68     	 ldr r3,[r7,#12]
 3040 001c 23F47063 	 bic r3,r3,#3840
 3041 0020 FB60     	 str r3,[r7,#12]
1274:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)(input_num << VADC_BRSCTRL_XTSEL_Pos);
 3042              	 .loc 2 1274 0
 3043 0022 3B68     	 ldr r3,[r7]
 3044 0024 1B02     	 lsls r3,r3,#8
 3045 0026 FA68     	 ldr r2,[r7,#12]
 3046 0028 1343     	 orrs r3,r3,r2
 3047 002a FB60     	 str r3,[r7,#12]
1275:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 3048              	 .loc 2 1275 0
 3049 002c 7B68     	 ldr r3,[r7,#4]
 3050 002e FA68     	 ldr r2,[r7,#12]
 3051 0030 C3F80022 	 str r2,[r3,#512]
1276:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3052              	 .loc 2 1276 0
 3053 0034 1437     	 adds r7,r7,#20
 3054              	.LCFI248:
 3055              	 .cfi_def_cfa_offset 4
 3056 0036 BD46     	 mov sp,r7
 3057              	.LCFI249:
 3058              	 .cfi_def_cfa_register 13
 3059              	 
 3060 0038 5DF8047B 	 ldr r7,[sp],#4
 3061              	.LCFI250:
 3062              	 .cfi_restore 7
 3063              	 .cfi_def_cfa_offset 0
 3064 003c 7047     	 bx lr
 3065              	 .cfi_endproc
 3066              	.LFE274:
 3068 003e 00BF     	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge,"ax",%progbits
 3069              	 .align 2
 3070              	 .global XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge
 3071              	 .thumb
 3072              	 .thumb_func
 3074              	XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:
 3075              	.LFB275:
1277:../Libraries/XMCLib/src/xmc_vadc.c **** 
1278:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1279:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge(XMC_VADC_GLOBAL_t *const global_ptr,
1280:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const XMC_VADC_TRIGGER_EDGE_t trigger_edge)
1281:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3076              	 .loc 2 1281 0
 3077              	 .cfi_startproc
 3078              	 
 3079              	 
 3080              	 
 3081 0000 80B4     	 push {r7}
 3082              	.LCFI251:
 3083              	 .cfi_def_cfa_offset 4
 3084              	 .cfi_offset 7,-4
 3085 0002 85B0     	 sub sp,sp,#20
 3086              	.LCFI252:
 3087              	 .cfi_def_cfa_offset 24
 3088 0004 00AF     	 add r7,sp,#0
 3089              	.LCFI253:
 3090              	 .cfi_def_cfa_register 7
 3091 0006 7860     	 str r0,[r7,#4]
 3092 0008 0B46     	 mov r3,r1
 3093 000a FB70     	 strb r3,[r7,#3]
1282:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1283:../Libraries/XMCLib/src/xmc_vadc.c **** 
1284:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:Wrong Global Pointer", (global_ptr == VAD
1285:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:Wrong Trigger Port",
1286:../Libraries/XMCLib/src/xmc_vadc.c ****             ((trigger_edge)<= XMC_VADC_TRIGGER_EDGE_ANY))
1287:../Libraries/XMCLib/src/xmc_vadc.c **** 
1288:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = global_ptr->BRSCTRL;
 3094              	 .loc 2 1288 0
 3095 000c 7B68     	 ldr r3,[r7,#4]
 3096 000e D3F80032 	 ldr r3,[r3,#512]
 3097 0012 FB60     	 str r3,[r7,#12]
1289:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_BRSCTRL_XTWC_Msk;
 3098              	 .loc 2 1289 0
 3099 0014 FB68     	 ldr r3,[r7,#12]
 3100 0016 43F40043 	 orr r3,r3,#32768
 3101 001a FB60     	 str r3,[r7,#12]
1290:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_BRSCTRL_XTMODE_Msk);
 3102              	 .loc 2 1290 0
 3103 001c FB68     	 ldr r3,[r7,#12]
 3104 001e 23F4C043 	 bic r3,r3,#24576
 3105 0022 FB60     	 str r3,[r7,#12]
1291:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_edge << VADC_BRSCTRL_XTMODE_Pos);
 3106              	 .loc 2 1291 0
 3107 0024 FB78     	 ldrb r3,[r7,#3]
 3108 0026 5B03     	 lsls r3,r3,#13
 3109 0028 FA68     	 ldr r2,[r7,#12]
 3110 002a 1343     	 orrs r3,r3,r2
 3111 002c FB60     	 str r3,[r7,#12]
1292:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 3112              	 .loc 2 1292 0
 3113 002e 7B68     	 ldr r3,[r7,#4]
 3114 0030 FA68     	 ldr r2,[r7,#12]
 3115 0032 C3F80022 	 str r2,[r3,#512]
1293:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3116              	 .loc 2 1293 0
 3117 0036 1437     	 adds r7,r7,#20
 3118              	.LCFI254:
 3119              	 .cfi_def_cfa_offset 4
 3120 0038 BD46     	 mov sp,r7
 3121              	.LCFI255:
 3122              	 .cfi_def_cfa_register 13
 3123              	 
 3124 003a 5DF8047B 	 ldr r7,[sp],#4
 3125              	.LCFI256:
 3126              	 .cfi_restore 7
 3127              	 .cfi_def_cfa_offset 0
 3128 003e 7047     	 bx lr
 3129              	 .cfi_endproc
 3130              	.LFE275:
 3132              	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectGating,"ax",%progbits
 3133              	 .align 2
 3134              	 .global XMC_VADC_GLOBAL_BackgroundSelectGating
 3135              	 .thumb
 3136              	 .thumb_func
 3138              	XMC_VADC_GLOBAL_BackgroundSelectGating:
 3139              	.LFB276:
1294:../Libraries/XMCLib/src/xmc_vadc.c **** 
1295:../Libraries/XMCLib/src/xmc_vadc.c **** 
1296:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger gate for background scan request source */
1297:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectGating(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t inp
1298:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3140              	 .loc 2 1298 0
 3141              	 .cfi_startproc
 3142              	 
 3143              	 
 3144              	 
 3145 0000 80B4     	 push {r7}
 3146              	.LCFI257:
 3147              	 .cfi_def_cfa_offset 4
 3148              	 .cfi_offset 7,-4
 3149 0002 85B0     	 sub sp,sp,#20
 3150              	.LCFI258:
 3151              	 .cfi_def_cfa_offset 24
 3152 0004 00AF     	 add r7,sp,#0
 3153              	.LCFI259:
 3154              	 .cfi_def_cfa_register 7
 3155 0006 7860     	 str r0,[r7,#4]
 3156 0008 3960     	 str r1,[r7]
1299:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1300:../Libraries/XMCLib/src/xmc_vadc.c **** 
1301:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectGating:Wrong Module Pointer", (global_ptr == VADC))
1302:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectGating:Wrong Gating Port", ((input_num)< XMC_VADC_NUM
1303:../Libraries/XMCLib/src/xmc_vadc.c **** 
1304:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl       = global_ptr->BRSCTRL;
 3157              	 .loc 2 1304 0
 3158 000a 7B68     	 ldr r3,[r7,#4]
 3159 000c D3F80032 	 ldr r3,[r3,#512]
 3160 0010 FB60     	 str r3,[r7,#12]
1305:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)VADC_BRSCTRL_GTWC_Msk;
 3161              	 .loc 2 1305 0
 3162 0012 FB68     	 ldr r3,[r7,#12]
 3163 0014 43F40003 	 orr r3,r3,#8388608
 3164 0018 FB60     	 str r3,[r7,#12]
1306:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      &= ~((uint32_t)VADC_BRSCTRL_GTSEL_Msk);
 3165              	 .loc 2 1306 0
 3166 001a FB68     	 ldr r3,[r7,#12]
 3167 001c 23F47023 	 bic r3,r3,#983040
 3168 0020 FB60     	 str r3,[r7,#12]
1307:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)(input_num << VADC_BRSCTRL_GTSEL_Pos);
 3169              	 .loc 2 1307 0
 3170 0022 3B68     	 ldr r3,[r7]
 3171 0024 1B04     	 lsls r3,r3,#16
 3172 0026 FA68     	 ldr r2,[r7,#12]
 3173 0028 1343     	 orrs r3,r3,r2
 3174 002a FB60     	 str r3,[r7,#12]
1308:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 3175              	 .loc 2 1308 0
 3176 002c 7B68     	 ldr r3,[r7,#4]
 3177 002e FA68     	 ldr r2,[r7,#12]
 3178 0030 C3F80022 	 str r2,[r3,#512]
1309:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3179              	 .loc 2 1309 0
 3180 0034 1437     	 adds r7,r7,#20
 3181              	.LCFI260:
 3182              	 .cfi_def_cfa_offset 4
 3183 0036 BD46     	 mov sp,r7
 3184              	.LCFI261:
 3185              	 .cfi_def_cfa_register 13
 3186              	 
 3187 0038 5DF8047B 	 ldr r7,[sp],#4
 3188              	.LCFI262:
 3189              	 .cfi_restore 7
 3190              	 .cfi_def_cfa_offset 0
 3191 003c 7047     	 bx lr
 3192              	 .cfi_endproc
 3193              	.LFE276:
 3195 003e 00BF     	 .section .text.XMC_VADC_GLOBAL_BackgroundAbortSequence,"ax",%progbits
 3196              	 .align 2
 3197              	 .global XMC_VADC_GLOBAL_BackgroundAbortSequence
 3198              	 .thumb
 3199              	 .thumb_func
 3201              	XMC_VADC_GLOBAL_BackgroundAbortSequence:
 3202              	.LFB277:
1310:../Libraries/XMCLib/src/xmc_vadc.c **** 
1311:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort ongoing conversion of a sequence */
1312:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundAbortSequence(XMC_VADC_GLOBAL_t *const global_ptr)
1313:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3203              	 .loc 2 1313 0
 3204              	 .cfi_startproc
 3205              	 
 3206              	 
 3207 0000 80B5     	 push {r7,lr}
 3208              	.LCFI263:
 3209              	 .cfi_def_cfa_offset 8
 3210              	 .cfi_offset 7,-8
 3211              	 .cfi_offset 14,-4
 3212 0002 86B0     	 sub sp,sp,#24
 3213              	.LCFI264:
 3214              	 .cfi_def_cfa_offset 32
 3215 0004 00AF     	 add r7,sp,#0
 3216              	.LCFI265:
 3217              	 .cfi_def_cfa_register 7
 3218 0006 7860     	 str r0,[r7,#4]
1314:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t brsctrl;
1315:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1316:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1317:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t grp_asen2_flag[XMC_VADC_MAXIMUM_NUM_GROUPS];
1318:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1319:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAbortSequence:Wrong Module Pointer", (global_ptr == VADC))
1320:../Libraries/XMCLib/src/xmc_vadc.c **** 
1321:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable trigger and gating before abort*/
1322:../Libraries/XMCLib/src/xmc_vadc.c ****   brsctrl = global_ptr->BRSCTRL;
 3219              	 .loc 2 1322 0
 3220 0008 7B68     	 ldr r3,[r7,#4]
 3221 000a D3F80032 	 ldr r3,[r3,#512]
 3222 000e 3B61     	 str r3,[r7,#16]
1323:../Libraries/XMCLib/src/xmc_vadc.c **** 
1324:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL =(0U | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 3223              	 .loc 2 1324 0
 3224 0010 7B68     	 ldr r3,[r7,#4]
 3225 0012 254A     	 ldr r2,.L117
 3226 0014 C3F80022 	 str r2,[r3,#512]
1325:../Libraries/XMCLib/src/xmc_vadc.c **** 
1326:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable Background Request source */
1327:../Libraries/XMCLib/src/xmc_vadc.c **** 
1328:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1329:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 3227              	 .loc 2 1329 0
 3228 0018 0023     	 movs r3,#0
 3229 001a 7B61     	 str r3,[r7,#20]
 3230 001c 17E0     	 b .L112
 3231              	.L113:
1330:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1331:../Libraries/XMCLib/src/xmc_vadc.c ****     grp_asen2_flag[i] = (uint8_t)(g_xmc_vadc_group_array[i]->ARBPR >> VADC_G_ARBPR_ASEN2_Pos);
 3232              	 .loc 2 1331 0 discriminator 3
 3233 001e 234A     	 ldr r2,.L117+4
 3234 0020 7B69     	 ldr r3,[r7,#20]
 3235 0022 52F82330 	 ldr r3,[r2,r3,lsl#2]
 3236 0026 D3F88430 	 ldr r3,[r3,#132]
 3237 002a 9B0E     	 lsrs r3,r3,#26
 3238 002c D9B2     	 uxtb r1,r3
 3239 002e 07F10C02 	 add r2,r7,#12
 3240 0032 7B69     	 ldr r3,[r7,#20]
 3241 0034 1344     	 add r3,r3,r2
 3242 0036 0A46     	 mov r2,r1
 3243 0038 1A70     	 strb r2,[r3]
1332:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 3244              	 .loc 2 1332 0 discriminator 3
 3245 003a 1C4A     	 ldr r2,.L117+4
 3246 003c 7B69     	 ldr r3,[r7,#20]
 3247 003e 52F82330 	 ldr r3,[r2,r3,lsl#2]
 3248 0042 1846     	 mov r0,r3
 3249 0044 FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
1329:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3250              	 .loc 2 1329 0 discriminator 3
 3251 0048 7B69     	 ldr r3,[r7,#20]
 3252 004a 0133     	 adds r3,r3,#1
 3253 004c 7B61     	 str r3,[r7,#20]
 3254              	.L112:
1329:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3255              	 .loc 2 1329 0 is_stmt 0 discriminator 1
 3256 004e 7B69     	 ldr r3,[r7,#20]
 3257 0050 032B     	 cmp r3,#3
 3258 0052 E4D9     	 bls .L113
1333:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1334:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1335:../Libraries/XMCLib/src/xmc_vadc.c **** 
1336:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Abort the ongoing sequence */
1337:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_CLRPND_Msk;
 3259              	 .loc 2 1337 0 is_stmt 1
 3260 0054 7B68     	 ldr r3,[r7,#4]
 3261 0056 D3F80432 	 ldr r3,[r3,#516]
 3262 005a 43F48072 	 orr r2,r3,#256
 3263 005e 7B68     	 ldr r3,[r7,#4]
 3264 0060 C3F80422 	 str r2,[r3,#516]
1338:../Libraries/XMCLib/src/xmc_vadc.c **** 
1339:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1340:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable Background Request source */
1341:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 3265              	 .loc 2 1341 0
 3266 0064 0023     	 movs r3,#0
 3267 0066 7B61     	 str r3,[r7,#20]
 3268 0068 10E0     	 b .L114
 3269              	.L116:
1342:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1343:../Libraries/XMCLib/src/xmc_vadc.c ****     if ((uint8_t)1 == grp_asen2_flag[i])
 3270              	 .loc 2 1343 0
 3271 006a 07F10C02 	 add r2,r7,#12
 3272 006e 7B69     	 ldr r3,[r7,#20]
 3273 0070 1344     	 add r3,r3,r2
 3274 0072 1B78     	 ldrb r3,[r3]
 3275 0074 012B     	 cmp r3,#1
 3276 0076 06D1     	 bne .L115
1344:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1345:../Libraries/XMCLib/src/xmc_vadc.c ****       XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t*)g_xmc_vadc_group_array[i]);
 3277              	 .loc 2 1345 0
 3278 0078 0C4A     	 ldr r2,.L117+4
 3279 007a 7B69     	 ldr r3,[r7,#20]
 3280 007c 52F82330 	 ldr r3,[r2,r3,lsl#2]
 3281 0080 1846     	 mov r0,r3
 3282 0082 FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
 3283              	.L115:
1341:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3284              	 .loc 2 1341 0 discriminator 2
 3285 0086 7B69     	 ldr r3,[r7,#20]
 3286 0088 0133     	 adds r3,r3,#1
 3287 008a 7B61     	 str r3,[r7,#20]
 3288              	.L114:
1341:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3289              	 .loc 2 1341 0 is_stmt 0 discriminator 1
 3290 008c 7B69     	 ldr r3,[r7,#20]
 3291 008e 032B     	 cmp r3,#3
 3292 0090 EBD9     	 bls .L116
1346:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1347:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1348:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1349:../Libraries/XMCLib/src/xmc_vadc.c **** 
1350:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Re-enable any disabled trigger and gating*/
1351:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL =(brsctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk
 3293              	 .loc 2 1351 0 is_stmt 1
 3294 0092 3B69     	 ldr r3,[r7,#16]
 3295 0094 43F40003 	 orr r3,r3,#8388608
 3296 0098 43F40043 	 orr r3,r3,#32768
 3297 009c 7A68     	 ldr r2,[r7,#4]
 3298 009e C2F80032 	 str r3,[r2,#512]
1352:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3299              	 .loc 2 1352 0
 3300 00a2 1837     	 adds r7,r7,#24
 3301              	.LCFI266:
 3302              	 .cfi_def_cfa_offset 8
 3303 00a4 BD46     	 mov sp,r7
 3304              	.LCFI267:
 3305              	 .cfi_def_cfa_register 13
 3306              	 
 3307 00a6 80BD     	 pop {r7,pc}
 3308              	.L118:
 3309              	 .align 2
 3310              	.L117:
 3311 00a8 00808000 	 .word 8421376
 3312 00ac 00000000 	 .word g_xmc_vadc_group_array
 3313              	 .cfi_endproc
 3314              	.LFE277:
 3316              	 .section .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending,"ax",%progbits
 3317              	 .align 2
 3318              	 .global XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending
 3319              	 .thumb
 3320              	 .thumb_func
 3322              	XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:
 3323              	.LFB278:
1353:../Libraries/XMCLib/src/xmc_vadc.c **** 
1354:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine how many channels are awaiting conversion */
1355:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending(XMC_VADC_GLOBAL_t *const global_ptr)
1356:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3324              	 .loc 2 1356 0
 3325              	 .cfi_startproc
 3326              	 
 3327              	 
 3328              	 
 3329 0000 80B4     	 push {r7}
 3330              	.LCFI268:
 3331              	 .cfi_def_cfa_offset 4
 3332              	 .cfi_offset 7,-4
 3333 0002 87B0     	 sub sp,sp,#28
 3334              	.LCFI269:
 3335              	 .cfi_def_cfa_offset 32
 3336 0004 00AF     	 add r7,sp,#0
 3337              	.LCFI270:
 3338              	 .cfi_def_cfa_register 7
 3339 0006 7860     	 str r0,[r7,#4]
1357:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1358:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1359:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t j;
1360:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t count;
1361:../Libraries/XMCLib/src/xmc_vadc.c **** 
1362:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:Wrong Module Pointer", (global_ptr ==
1363:../Libraries/XMCLib/src/xmc_vadc.c **** 
1364:../Libraries/XMCLib/src/xmc_vadc.c ****   count = 0U;
 3340              	 .loc 2 1364 0
 3341 0008 0023     	 movs r3,#0
 3342 000a BB60     	 str r3,[r7,#8]
1365:../Libraries/XMCLib/src/xmc_vadc.c ****   
1366:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop through all groups and find out who is awaiting conversion */
1367:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 3343              	 .loc 2 1367 0
 3344 000c 0023     	 movs r3,#0
 3345 000e 3B61     	 str r3,[r7,#16]
 3346 0010 23E0     	 b .L120
 3347              	.L125:
1368:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1369:../Libraries/XMCLib/src/xmc_vadc.c ****     if (global_ptr->BRSSEL[i])
 3348              	 .loc 2 1369 0
 3349 0012 7B68     	 ldr r3,[r7,#4]
 3350 0014 3A69     	 ldr r2,[r7,#16]
 3351 0016 6032     	 adds r2,r2,#96
 3352 0018 53F82230 	 ldr r3,[r3,r2,lsl#2]
 3353 001c 002B     	 cmp r3,#0
 3354 001e 19D0     	 beq .L121
1370:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1371:../Libraries/XMCLib/src/xmc_vadc.c ****       reg = global_ptr->BRSPND[i];
 3355              	 .loc 2 1371 0
 3356 0020 7B68     	 ldr r3,[r7,#4]
 3357 0022 3A69     	 ldr r2,[r7,#16]
 3358 0024 7032     	 adds r2,r2,#112
 3359 0026 53F82230 	 ldr r3,[r3,r2,lsl#2]
 3360 002a 7B61     	 str r3,[r7,#20]
1372:../Libraries/XMCLib/src/xmc_vadc.c **** 
1373:../Libraries/XMCLib/src/xmc_vadc.c ****       for(j=0U;j<XMC_VADC_NUM_CHANNELS_PER_GROUP;j++)
 3361              	 .loc 2 1373 0
 3362 002c 0023     	 movs r3,#0
 3363 002e FB60     	 str r3,[r7,#12]
 3364 0030 0DE0     	 b .L122
 3365              	.L124:
1374:../Libraries/XMCLib/src/xmc_vadc.c ****       {
1375:../Libraries/XMCLib/src/xmc_vadc.c ****         if (reg & 1U)
 3366              	 .loc 2 1375 0
 3367 0032 7B69     	 ldr r3,[r7,#20]
 3368 0034 03F00103 	 and r3,r3,#1
 3369 0038 002B     	 cmp r3,#0
 3370 003a 02D0     	 beq .L123
1376:../Libraries/XMCLib/src/xmc_vadc.c ****         {
1377:../Libraries/XMCLib/src/xmc_vadc.c ****           count++;
 3371              	 .loc 2 1377 0
 3372 003c BB68     	 ldr r3,[r7,#8]
 3373 003e 0133     	 adds r3,r3,#1
 3374 0040 BB60     	 str r3,[r7,#8]
 3375              	.L123:
1378:../Libraries/XMCLib/src/xmc_vadc.c ****         }
1379:../Libraries/XMCLib/src/xmc_vadc.c **** 
1380:../Libraries/XMCLib/src/xmc_vadc.c ****         reg = reg >> 1U;
 3376              	 .loc 2 1380 0 discriminator 2
 3377 0042 7B69     	 ldr r3,[r7,#20]
 3378 0044 5B08     	 lsrs r3,r3,#1
 3379 0046 7B61     	 str r3,[r7,#20]
1373:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 3380              	 .loc 2 1373 0 discriminator 2
 3381 0048 FB68     	 ldr r3,[r7,#12]
 3382 004a 0133     	 adds r3,r3,#1
 3383 004c FB60     	 str r3,[r7,#12]
 3384              	.L122:
1373:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 3385              	 .loc 2 1373 0 is_stmt 0 discriminator 1
 3386 004e FB68     	 ldr r3,[r7,#12]
 3387 0050 072B     	 cmp r3,#7
 3388 0052 EED9     	 bls .L124
 3389              	.L121:
1367:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3390              	 .loc 2 1367 0 is_stmt 1 discriminator 2
 3391 0054 3B69     	 ldr r3,[r7,#16]
 3392 0056 0133     	 adds r3,r3,#1
 3393 0058 3B61     	 str r3,[r7,#16]
 3394              	.L120:
1367:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3395              	 .loc 2 1367 0 is_stmt 0 discriminator 1
 3396 005a 3B69     	 ldr r3,[r7,#16]
 3397 005c 032B     	 cmp r3,#3
 3398 005e D8D9     	 bls .L125
1381:../Libraries/XMCLib/src/xmc_vadc.c ****       }
1382:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1383:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1384:../Libraries/XMCLib/src/xmc_vadc.c **** 
1385:../Libraries/XMCLib/src/xmc_vadc.c ****   return count;
 3399              	 .loc 2 1385 0 is_stmt 1
 3400 0060 BB68     	 ldr r3,[r7,#8]
1386:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3401              	 .loc 2 1386 0
 3402 0062 1846     	 mov r0,r3
 3403 0064 1C37     	 adds r7,r7,#28
 3404              	.LCFI271:
 3405              	 .cfi_def_cfa_offset 4
 3406 0066 BD46     	 mov sp,r7
 3407              	.LCFI272:
 3408              	 .cfi_def_cfa_register 13
 3409              	 
 3410 0068 5DF8047B 	 ldr r7,[sp],#4
 3411              	.LCFI273:
 3412              	 .cfi_restore 7
 3413              	 .cfi_def_cfa_offset 0
 3414 006c 7047     	 bx lr
 3415              	 .cfi_endproc
 3416              	.LFE278:
 3418 006e 00BF     	 .section .text.XMC_VADC_GROUP_QueueInit,"ax",%progbits
 3419              	 .align 2
 3420              	 .global XMC_VADC_GROUP_QueueInit
 3421              	 .thumb
 3422              	 .thumb_func
 3424              	XMC_VADC_GROUP_QueueInit:
 3425              	.LFB279:
1387:../Libraries/XMCLib/src/xmc_vadc.c **** 
1388:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_QUEUE_AVAILABLE == 1U)  
1389:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize queue request source */
1390:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *con
1391:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3426              	 .loc 2 1391 0
 3427              	 .cfi_startproc
 3428              	 
 3429              	 
 3430 0000 80B5     	 push {r7,lr}
 3431              	.LCFI274:
 3432              	 .cfi_def_cfa_offset 8
 3433              	 .cfi_offset 7,-8
 3434              	 .cfi_offset 14,-4
 3435 0002 84B0     	 sub sp,sp,#16
 3436              	.LCFI275:
 3437              	 .cfi_def_cfa_offset 24
 3438 0004 00AF     	 add r7,sp,#0
 3439              	.LCFI276:
 3440              	 .cfi_def_cfa_register 7
 3441 0006 7860     	 str r0,[r7,#4]
 3442 0008 3960     	 str r1,[r7]
1392:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t          reg;
1393:../Libraries/XMCLib/src/xmc_vadc.c **** 
1394:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1395:../Libraries/XMCLib/src/xmc_vadc.c **** 
1396:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable arbitration slot of the queue request source */
1397:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 3443              	 .loc 2 1397 0
 3444 000a 7868     	 ldr r0,[r7,#4]
 3445 000c FFF7FEFF 	 bl XMC_VADC_GROUP_QueueDisableArbitrationSlot
1398:../Libraries/XMCLib/src/xmc_vadc.c ****   
1399:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = group_ptr->ARBPR;
 3446              	 .loc 2 1399 0
 3447 0010 7B68     	 ldr r3,[r7,#4]
 3448 0012 D3F88430 	 ldr r3,[r3,#132]
 3449 0016 FB60     	 str r3,[r7,#12]
1400:../Libraries/XMCLib/src/xmc_vadc.c **** 
1401:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Request Source priority */
1402:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~((uint32_t)VADC_G_ARBPR_PRIO0_Msk);
 3450              	 .loc 2 1402 0
 3451 0018 FB68     	 ldr r3,[r7,#12]
 3452 001a 23F00303 	 bic r3,r3,#3
 3453 001e FB60     	 str r3,[r7,#12]
1403:../Libraries/XMCLib/src/xmc_vadc.c ****   reg |= (uint32_t) ((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO0_Pos);
 3454              	 .loc 2 1403 0
 3455 0020 3B68     	 ldr r3,[r7]
 3456 0022 1B78     	 ldrb r3,[r3]
 3457 0024 C3F38103 	 ubfx r3,r3,#2,#2
 3458 0028 DBB2     	 uxtb r3,r3
 3459 002a 1A46     	 mov r2,r3
 3460 002c FB68     	 ldr r3,[r7,#12]
 3461 002e 1343     	 orrs r3,r3,r2
 3462 0030 FB60     	 str r3,[r7,#12]
1404:../Libraries/XMCLib/src/xmc_vadc.c **** 
1405:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Conversion Start mode */
1406:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 3463              	 .loc 2 1406 0
 3464 0032 3B68     	 ldr r3,[r7]
 3465 0034 1B78     	 ldrb r3,[r3]
 3466 0036 03F00303 	 and r3,r3,#3
 3467 003a DBB2     	 uxtb r3,r3
 3468 003c 002B     	 cmp r3,#0
 3469 003e 03D0     	 beq .L128
1407:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1408:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)(VADC_G_ARBPR_CSM0_Msk);
 3470              	 .loc 2 1408 0
 3471 0040 FB68     	 ldr r3,[r7,#12]
 3472 0042 43F00803 	 orr r3,r3,#8
 3473 0046 FB60     	 str r3,[r7,#12]
 3474              	.L128:
1409:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1410:../Libraries/XMCLib/src/xmc_vadc.c **** 
1411:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR = reg;
 3475              	 .loc 2 1411 0
 3476 0048 7B68     	 ldr r3,[r7,#4]
 3477 004a FA68     	 ldr r2,[r7,#12]
 3478 004c C3F88420 	 str r2,[r3,#132]
1412:../Libraries/XMCLib/src/xmc_vadc.c **** 
1413:../Libraries/XMCLib/src/xmc_vadc.c **** 
1414:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (uint32_t)((config->qctrl0)|(uint32_t)(VADC_G_QCTRL0_XTWC_Msk)|
 3479              	 .loc 2 1414 0
 3480 0050 3B68     	 ldr r3,[r7]
 3481 0052 5B68     	 ldr r3,[r3,#4]
 3482 0054 43F08023 	 orr r3,r3,#-2147450880
 3483 0058 43F40003 	 orr r3,r3,#8388608
 3484 005c 7A68     	 ldr r2,[r7,#4]
 3485 005e C2F80031 	 str r3,[r2,#256]
1415:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     (uint32_t)(VADC_G_QCTRL0_TMWC_Msk)|
1416:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     (uint32_t)(VADC_G_QCTRL0_GTWC_Msk));
1417:../Libraries/XMCLib/src/xmc_vadc.c **** 
1418:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Gating mode */
1419:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QMR0 = ((uint32_t)(config->qmr0) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VA
 3486              	 .loc 2 1419 0
 3487 0062 3B68     	 ldr r3,[r7]
 3488 0064 9B68     	 ldr r3,[r3,#8]
 3489 0066 43F00102 	 orr r2,r3,#1
 3490 006a 7B68     	 ldr r3,[r7,#4]
 3491 006c C3F80421 	 str r2,[r3,#260]
1420:../Libraries/XMCLib/src/xmc_vadc.c **** 
1421:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode) )
 3492              	 .loc 2 1421 0
 3493 0070 3B68     	 ldr r3,[r7]
 3494 0072 1B78     	 ldrb r3,[r3]
 3495 0074 03F00303 	 and r3,r3,#3
 3496 0078 DBB2     	 uxtb r3,r3
 3497 007a 022B     	 cmp r3,#2
 3498 007c 07D1     	 bne .L129
1422:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1423:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_RPTDIS_Pos);
 3499              	 .loc 2 1423 0
 3500 007e 7B68     	 ldr r3,[r7,#4]
 3501 0080 D3F80431 	 ldr r3,[r3,#260]
 3502 0084 43F48032 	 orr r2,r3,#65536
 3503 0088 7B68     	 ldr r3,[r7,#4]
 3504 008a C3F80421 	 str r2,[r3,#260]
 3505              	.L129:
1424:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1425:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable arbitration slot for the queue request source */
1426:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptr);
 3506              	 .loc 2 1426 0
 3507 008e 7868     	 ldr r0,[r7,#4]
 3508 0090 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueEnableArbitrationSlot
1427:../Libraries/XMCLib/src/xmc_vadc.c **** 
1428:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3509              	 .loc 2 1428 0
 3510 0094 1037     	 adds r7,r7,#16
 3511              	.LCFI277:
 3512              	 .cfi_def_cfa_offset 8
 3513 0096 BD46     	 mov sp,r7
 3514              	.LCFI278:
 3515              	 .cfi_def_cfa_register 13
 3516              	 
 3517 0098 80BD     	 pop {r7,pc}
 3518              	 .cfi_endproc
 3519              	.LFE279:
 3521 009a 00BF     	 .section .text.XMC_VADC_GROUP_QueueSelectTrigger,"ax",%progbits
 3522              	 .align 2
 3523              	 .global XMC_VADC_GROUP_QueueSelectTrigger
 3524              	 .thumb
 3525              	 .thumb_func
 3527              	XMC_VADC_GROUP_QueueSelectTrigger:
 3528              	.LFB280:
1429:../Libraries/XMCLib/src/xmc_vadc.c **** 
1430:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 possible triggers as a conversion trigger for queue request source *
1431:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectTrigger(XMC_VADC_GROUP_t *const group_ptr,
1432:../Libraries/XMCLib/src/xmc_vadc.c ****                                        const XMC_VADC_TRIGGER_INPUT_SELECT_t input_num)
1433:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3529              	 .loc 2 1433 0
 3530              	 .cfi_startproc
 3531              	 
 3532              	 
 3533              	 
 3534 0000 80B4     	 push {r7}
 3535              	.LCFI279:
 3536              	 .cfi_def_cfa_offset 4
 3537              	 .cfi_offset 7,-4
 3538 0002 85B0     	 sub sp,sp,#20
 3539              	.LCFI280:
 3540              	 .cfi_def_cfa_offset 24
 3541 0004 00AF     	 add r7,sp,#0
 3542              	.LCFI281:
 3543              	 .cfi_def_cfa_register 7
 3544 0006 7860     	 str r0,[r7,#4]
 3545 0008 0B46     	 mov r3,r1
 3546 000a FB70     	 strb r3,[r7,#3]
1434:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    qctrl;
1435:../Libraries/XMCLib/src/xmc_vadc.c ****   
1436:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1437:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTrigger:Wrong Trigger Port", ((input_num)< XMC_VADC_NUM_POR
1438:../Libraries/XMCLib/src/xmc_vadc.c **** 
1439:../Libraries/XMCLib/src/xmc_vadc.c ****   
1440:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the conversion trigger */
1441:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 3547              	 .loc 2 1441 0
 3548 000c 7B68     	 ldr r3,[r7,#4]
 3549 000e D3F80031 	 ldr r3,[r3,#256]
 3550 0012 FB60     	 str r3,[r7,#12]
1442:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  |= (uint32_t)VADC_G_QCTRL0_XTWC_Msk;
 3551              	 .loc 2 1442 0
 3552 0014 FB68     	 ldr r3,[r7,#12]
 3553 0016 43F40043 	 orr r3,r3,#32768
 3554 001a FB60     	 str r3,[r7,#12]
1443:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_XTSEL_Msk);
 3555              	 .loc 2 1443 0
 3556 001c FB68     	 ldr r3,[r7,#12]
 3557 001e 23F47063 	 bic r3,r3,#3840
 3558 0022 FB60     	 str r3,[r7,#12]
1444:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)input_num << VADC_G_QCTRL0_XTSEL_Pos);
 3559              	 .loc 2 1444 0
 3560 0024 FB78     	 ldrb r3,[r7,#3]
 3561 0026 1B02     	 lsls r3,r3,#8
 3562 0028 FA68     	 ldr r2,[r7,#12]
 3563 002a 1343     	 orrs r3,r3,r2
 3564 002c FB60     	 str r3,[r7,#12]
1445:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 3565              	 .loc 2 1445 0
 3566 002e 7B68     	 ldr r3,[r7,#4]
 3567 0030 FA68     	 ldr r2,[r7,#12]
 3568 0032 C3F80021 	 str r2,[r3,#256]
1446:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3569              	 .loc 2 1446 0
 3570 0036 1437     	 adds r7,r7,#20
 3571              	.LCFI282:
 3572              	 .cfi_def_cfa_offset 4
 3573 0038 BD46     	 mov sp,r7
 3574              	.LCFI283:
 3575              	 .cfi_def_cfa_register 13
 3576              	 
 3577 003a 5DF8047B 	 ldr r7,[sp],#4
 3578              	.LCFI284:
 3579              	 .cfi_restore 7
 3580              	 .cfi_def_cfa_offset 0
 3581 003e 7047     	 bx lr
 3582              	 .cfi_endproc
 3583              	.LFE280:
 3585              	 .section .text.XMC_VADC_GROUP_QueueSelectTriggerEdge,"ax",%progbits
 3586              	 .align 2
 3587              	 .global XMC_VADC_GROUP_QueueSelectTriggerEdge
 3588              	 .thumb
 3589              	 .thumb_func
 3591              	XMC_VADC_GROUP_QueueSelectTriggerEdge:
 3592              	.LFB281:
1447:../Libraries/XMCLib/src/xmc_vadc.c **** 
1448:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1449:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGE
1450:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3593              	 .loc 2 1450 0
 3594              	 .cfi_startproc
 3595              	 
 3596              	 
 3597              	 
 3598 0000 80B4     	 push {r7}
 3599              	.LCFI285:
 3600              	 .cfi_def_cfa_offset 4
 3601              	 .cfi_offset 7,-4
 3602 0002 85B0     	 sub sp,sp,#20
 3603              	.LCFI286:
 3604              	 .cfi_def_cfa_offset 24
 3605 0004 00AF     	 add r7,sp,#0
 3606              	.LCFI287:
 3607              	 .cfi_def_cfa_register 7
 3608 0006 7860     	 str r0,[r7,#4]
 3609 0008 0B46     	 mov r3,r1
 3610 000a FB70     	 strb r3,[r7,#3]
1451:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl;
1452:../Libraries/XMCLib/src/xmc_vadc.c **** 
1453:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTriggerEdge:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
1454:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTriggerEdge:Wrong Gating Port", ((trigger_edge)<= XMC_VADC_
1455:../Libraries/XMCLib/src/xmc_vadc.c **** 
1456:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the gating input */
1457:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 3611              	 .loc 2 1457 0
 3612 000c 7B68     	 ldr r3,[r7,#4]
 3613 000e D3F80031 	 ldr r3,[r3,#256]
 3614 0012 FB60     	 str r3,[r7,#12]
1458:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)VADC_G_QCTRL0_XTWC_Msk;
 3615              	 .loc 2 1458 0
 3616 0014 FB68     	 ldr r3,[r7,#12]
 3617 0016 43F40043 	 orr r3,r3,#32768
 3618 001a FB60     	 str r3,[r7,#12]
1459:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_XTMODE_Msk);
 3619              	 .loc 2 1459 0
 3620 001c FB68     	 ldr r3,[r7,#12]
 3621 001e 23F4C043 	 bic r3,r3,#24576
 3622 0022 FB60     	 str r3,[r7,#12]
1460:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)trigger_edge << VADC_G_QCTRL0_XTMODE_Pos);
 3623              	 .loc 2 1460 0
 3624 0024 FB78     	 ldrb r3,[r7,#3]
 3625 0026 5B03     	 lsls r3,r3,#13
 3626 0028 FA68     	 ldr r2,[r7,#12]
 3627 002a 1343     	 orrs r3,r3,r2
 3628 002c FB60     	 str r3,[r7,#12]
1461:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 3629              	 .loc 2 1461 0
 3630 002e 7B68     	 ldr r3,[r7,#4]
 3631 0030 FA68     	 ldr r2,[r7,#12]
 3632 0032 C3F80021 	 str r2,[r3,#256]
1462:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3633              	 .loc 2 1462 0
 3634 0036 1437     	 adds r7,r7,#20
 3635              	.LCFI288:
 3636              	 .cfi_def_cfa_offset 4
 3637 0038 BD46     	 mov sp,r7
 3638              	.LCFI289:
 3639              	 .cfi_def_cfa_register 13
 3640              	 
 3641 003a 5DF8047B 	 ldr r7,[sp],#4
 3642              	.LCFI290:
 3643              	 .cfi_restore 7
 3644              	 .cfi_def_cfa_offset 0
 3645 003e 7047     	 bx lr
 3646              	 .cfi_endproc
 3647              	.LFE281:
 3649              	 .section .text.XMC_VADC_GROUP_QueueSelectGating,"ax",%progbits
 3650              	 .align 2
 3651              	 .global XMC_VADC_GROUP_QueueSelectGating
 3652              	 .thumb
 3653              	 .thumb_func
 3655              	XMC_VADC_GROUP_QueueSelectGating:
 3656              	.LFB282:
1463:../Libraries/XMCLib/src/xmc_vadc.c **** 
1464:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 possible trigger gates as a trigger gating signal for queue request 
1465:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectGating(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GATE_INPUT_
1466:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3657              	 .loc 2 1466 0
 3658              	 .cfi_startproc
 3659              	 
 3660              	 
 3661              	 
 3662 0000 80B4     	 push {r7}
 3663              	.LCFI291:
 3664              	 .cfi_def_cfa_offset 4
 3665              	 .cfi_offset 7,-4
 3666 0002 85B0     	 sub sp,sp,#20
 3667              	.LCFI292:
 3668              	 .cfi_def_cfa_offset 24
 3669 0004 00AF     	 add r7,sp,#0
 3670              	.LCFI293:
 3671              	 .cfi_def_cfa_register 7
 3672 0006 7860     	 str r0,[r7,#4]
 3673 0008 0B46     	 mov r3,r1
 3674 000a FB70     	 strb r3,[r7,#3]
1467:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl;
1468:../Libraries/XMCLib/src/xmc_vadc.c **** 
1469:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectGating:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1470:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectGating:Wrong Gating Port", ((input_num)< XMC_VADC_NUM_PORTS
1471:../Libraries/XMCLib/src/xmc_vadc.c ****   
1472:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the gating input */
1473:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 3675              	 .loc 2 1473 0
 3676 000c 7B68     	 ldr r3,[r7,#4]
 3677 000e D3F80031 	 ldr r3,[r3,#256]
 3678 0012 FB60     	 str r3,[r7,#12]
1474:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)VADC_G_QCTRL0_GTWC_Msk;
 3679              	 .loc 2 1474 0
 3680 0014 FB68     	 ldr r3,[r7,#12]
 3681 0016 43F40003 	 orr r3,r3,#8388608
 3682 001a FB60     	 str r3,[r7,#12]
1475:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_GTSEL_Msk);
 3683              	 .loc 2 1475 0
 3684 001c FB68     	 ldr r3,[r7,#12]
 3685 001e 23F47023 	 bic r3,r3,#983040
 3686 0022 FB60     	 str r3,[r7,#12]
1476:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)input_num << VADC_G_QCTRL0_GTSEL_Pos);
 3687              	 .loc 2 1476 0
 3688 0024 FB78     	 ldrb r3,[r7,#3]
 3689 0026 1B04     	 lsls r3,r3,#16
 3690 0028 FA68     	 ldr r2,[r7,#12]
 3691 002a 1343     	 orrs r3,r3,r2
 3692 002c FB60     	 str r3,[r7,#12]
1477:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 3693              	 .loc 2 1477 0
 3694 002e 7B68     	 ldr r3,[r7,#4]
 3695 0030 FA68     	 ldr r2,[r7,#12]
 3696 0032 C3F80021 	 str r2,[r3,#256]
1478:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3697              	 .loc 2 1478 0
 3698 0036 1437     	 adds r7,r7,#20
 3699              	.LCFI294:
 3700              	 .cfi_def_cfa_offset 4
 3701 0038 BD46     	 mov sp,r7
 3702              	.LCFI295:
 3703              	 .cfi_def_cfa_register 13
 3704              	 
 3705 003a 5DF8047B 	 ldr r7,[sp],#4
 3706              	.LCFI296:
 3707              	 .cfi_restore 7
 3708              	 .cfi_def_cfa_offset 0
 3709 003e 7047     	 bx lr
 3710              	 .cfi_endproc
 3711              	.LFE282:
 3713              	 .section .text.XMC_VADC_GROUP_QueueGetLength,"ax",%progbits
 3714              	 .align 2
 3715              	 .global XMC_VADC_GROUP_QueueGetLength
 3716              	 .thumb
 3717              	 .thumb_func
 3719              	XMC_VADC_GROUP_QueueGetLength:
 3720              	.LFB283:
1479:../Libraries/XMCLib/src/xmc_vadc.c **** 
1480:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine the number of channels in the queue (length includes the valid channel in the B
1481:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_QueueGetLength(XMC_VADC_GROUP_t *const group_ptr)
1482:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3721              	 .loc 2 1482 0
 3722              	 .cfi_startproc
 3723              	 
 3724              	 
 3725              	 
 3726 0000 80B4     	 push {r7}
 3727              	.LCFI297:
 3728              	 .cfi_def_cfa_offset 4
 3729              	 .cfi_offset 7,-4
 3730 0002 87B0     	 sub sp,sp,#28
 3731              	.LCFI298:
 3732              	 .cfi_def_cfa_offset 32
 3733 0004 00AF     	 add r7,sp,#0
 3734              	.LCFI299:
 3735              	 .cfi_def_cfa_register 7
 3736 0006 7860     	 str r0,[r7,#4]
1483:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        qsr;
1484:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        qbur0;
1485:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        length;
1486:../Libraries/XMCLib/src/xmc_vadc.c **** 
1487:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetLength:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_pt
1488:../Libraries/XMCLib/src/xmc_vadc.c **** 
1489:../Libraries/XMCLib/src/xmc_vadc.c ****   qsr = group_ptr->QSR0;
 3737              	 .loc 2 1489 0
 3738 0008 7B68     	 ldr r3,[r7,#4]
 3739 000a D3F80831 	 ldr r3,[r3,#264]
 3740 000e 3B61     	 str r3,[r7,#16]
1490:../Libraries/XMCLib/src/xmc_vadc.c ****   qbur0 = group_ptr->QBUR0;
 3741              	 .loc 2 1490 0
 3742 0010 7B68     	 ldr r3,[r7,#4]
 3743 0012 D3F81031 	 ldr r3,[r3,#272]
 3744 0016 FB60     	 str r3,[r7,#12]
1491:../Libraries/XMCLib/src/xmc_vadc.c **** 
1492:../Libraries/XMCLib/src/xmc_vadc.c ****   if (qsr & (uint32_t)VADC_G_QSR0_EMPTY_Msk)
 3745              	 .loc 2 1492 0
 3746 0018 3B69     	 ldr r3,[r7,#16]
 3747 001a 03F02003 	 and r3,r3,#32
 3748 001e 002B     	 cmp r3,#0
 3749 0020 02D0     	 beq .L134
1493:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1494:../Libraries/XMCLib/src/xmc_vadc.c ****     length = 0U;
 3750              	 .loc 2 1494 0
 3751 0022 0023     	 movs r3,#0
 3752 0024 7B61     	 str r3,[r7,#20]
 3753 0026 04E0     	 b .L135
 3754              	.L134:
1495:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1496:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1497:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1498:../Libraries/XMCLib/src/xmc_vadc.c ****     length = (qsr & (uint32_t)VADC_G_QSR0_FILL_Msk) + 1U;
 3755              	 .loc 2 1498 0
 3756 0028 3B69     	 ldr r3,[r7,#16]
 3757 002a 03F00F03 	 and r3,r3,#15
 3758 002e 0133     	 adds r3,r3,#1
 3759 0030 7B61     	 str r3,[r7,#20]
 3760              	.L135:
1499:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1500:../Libraries/XMCLib/src/xmc_vadc.c ****   
1501:../Libraries/XMCLib/src/xmc_vadc.c ****   if (qbur0 & (uint32_t)VADC_G_QBUR0_V_Msk )
 3761              	 .loc 2 1501 0
 3762 0032 FB68     	 ldr r3,[r7,#12]
 3763 0034 03F48073 	 and r3,r3,#256
 3764 0038 002B     	 cmp r3,#0
 3765 003a 02D0     	 beq .L136
1502:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1503:../Libraries/XMCLib/src/xmc_vadc.c ****     length++;
 3766              	 .loc 2 1503 0
 3767 003c 7B69     	 ldr r3,[r7,#20]
 3768 003e 0133     	 adds r3,r3,#1
 3769 0040 7B61     	 str r3,[r7,#20]
 3770              	.L136:
1504:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1505:../Libraries/XMCLib/src/xmc_vadc.c **** 
1506:../Libraries/XMCLib/src/xmc_vadc.c ****   return length;
 3771              	 .loc 2 1506 0
 3772 0042 7B69     	 ldr r3,[r7,#20]
1507:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3773              	 .loc 2 1507 0
 3774 0044 1846     	 mov r0,r3
 3775 0046 1C37     	 adds r7,r7,#28
 3776              	.LCFI300:
 3777              	 .cfi_def_cfa_offset 4
 3778 0048 BD46     	 mov sp,r7
 3779              	.LCFI301:
 3780              	 .cfi_def_cfa_register 13
 3781              	 
 3782 004a 5DF8047B 	 ldr r7,[sp],#4
 3783              	.LCFI302:
 3784              	 .cfi_restore 7
 3785              	 .cfi_def_cfa_offset 0
 3786 004e 7047     	 bx lr
 3787              	 .cfi_endproc
 3788              	.LFE283:
 3790              	 .section .text.XMC_VADC_GROUP_QueueAbortSequence,"ax",%progbits
 3791              	 .align 2
 3792              	 .global XMC_VADC_GROUP_QueueAbortSequence
 3793              	 .thumb
 3794              	 .thumb_func
 3796              	XMC_VADC_GROUP_QueueAbortSequence:
 3797              	.LFB284:
1508:../Libraries/XMCLib/src/xmc_vadc.c **** 
1509:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort ongoing conversion of a channel sequence */
1510:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueAbortSequence(XMC_VADC_GROUP_t *const group_ptr)
1511:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3798              	 .loc 2 1511 0
 3799              	 .cfi_startproc
 3800              	 
 3801              	 
 3802 0000 80B5     	 push {r7,lr}
 3803              	.LCFI303:
 3804              	 .cfi_def_cfa_offset 8
 3805              	 .cfi_offset 7,-8
 3806              	 .cfi_offset 14,-4
 3807 0002 84B0     	 sub sp,sp,#16
 3808              	.LCFI304:
 3809              	 .cfi_def_cfa_offset 24
 3810 0004 00AF     	 add r7,sp,#0
 3811              	.LCFI305:
 3812              	 .cfi_def_cfa_register 7
 3813 0006 7860     	 str r0,[r7,#4]
1512:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl0;
1513:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1514:../Libraries/XMCLib/src/xmc_vadc.c **** 
1515:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueAbortSequence:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1516:../Libraries/XMCLib/src/xmc_vadc.c **** 
1517:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable any gating if present*/
1518:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl0 = group_ptr->QCTRL0;
 3814              	 .loc 2 1518 0
 3815 0008 7B68     	 ldr r3,[r7,#4]
 3816 000a D3F80031 	 ldr r3,[r3,#256]
 3817 000e FB60     	 str r3,[r7,#12]
1519:../Libraries/XMCLib/src/xmc_vadc.c **** 
1520:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 =(0U | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
 3818              	 .loc 2 1520 0
 3819 0010 7B68     	 ldr r3,[r7,#4]
 3820 0012 144A     	 ldr r2,.L139
 3821 0014 C3F80021 	 str r2,[r3,#256]
1521:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_M
1522:../Libraries/XMCLib/src/xmc_vadc.c ****   
1523:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable the Arbitration 0 in the group before abort*/
1524:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN0_Pos) & 1U);
 3822              	 .loc 2 1524 0
 3823 0018 7B68     	 ldr r3,[r7,#4]
 3824 001a D3F88430 	 ldr r3,[r3,#132]
 3825 001e 1B0E     	 lsrs r3,r3,#24
 3826 0020 03F00103 	 and r3,r3,#1
 3827 0024 002B     	 cmp r3,#0
 3828 0026 14BF     	 ite ne
 3829 0028 0123     	 movne r3,#1
 3830 002a 0023     	 moveq r3,#0
 3831 002c FB72     	 strb r3,[r7,#11]
1525:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 3832              	 .loc 2 1525 0
 3833 002e 7868     	 ldr r0,[r7,#4]
 3834 0030 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueDisableArbitrationSlot
1526:../Libraries/XMCLib/src/xmc_vadc.c ****    
1527:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Flush the Entries from queue*/
1528:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueFlushEntries(group_ptr);
 3835              	 .loc 2 1528 0
 3836 0034 7868     	 ldr r0,[r7,#4]
 3837 0036 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueFlushEntries
1529:../Libraries/XMCLib/src/xmc_vadc.c ****   
1530:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the arbitration slot 0*/
1531:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN0_Pos);
 3838              	 .loc 2 1531 0
 3839 003a 7B68     	 ldr r3,[r7,#4]
 3840 003c D3F88420 	 ldr r2,[r3,#132]
 3841 0040 FB7A     	 ldrb r3,[r7,#11]
 3842 0042 1B06     	 lsls r3,r3,#24
 3843 0044 1A43     	 orrs r2,r2,r3
 3844 0046 7B68     	 ldr r3,[r7,#4]
 3845 0048 C3F88420 	 str r2,[r3,#132]
1532:../Libraries/XMCLib/src/xmc_vadc.c ****   
1533:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1534:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (qctrl0 | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
1535:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 3846              	 .loc 2 1535 0
 3847 004c FB68     	 ldr r3,[r7,#12]
 3848 004e 43F08023 	 orr r3,r3,#-2147450880
 3849 0052 43F40003 	 orr r3,r3,#8388608
1534:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 3850              	 .loc 2 1534 0
 3851 0056 7A68     	 ldr r2,[r7,#4]
 3852 0058 C2F80031 	 str r3,[r2,#256]
1536:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3853              	 .loc 2 1536 0
 3854 005c 1037     	 adds r7,r7,#16
 3855              	.LCFI306:
 3856              	 .cfi_def_cfa_offset 8
 3857 005e BD46     	 mov sp,r7
 3858              	.LCFI307:
 3859              	 .cfi_def_cfa_register 13
 3860              	 
 3861 0060 80BD     	 pop {r7,pc}
 3862              	.L140:
 3863 0062 00BF     	 .align 2
 3864              	.L139:
 3865 0064 00808080 	 .word -2139062272
 3866              	 .cfi_endproc
 3867              	.LFE284:
 3869              	 .section .text.XMC_VADC_GROUP_QueueRemoveChannel,"ax",%progbits
 3870              	 .align 2
 3871              	 .global XMC_VADC_GROUP_QueueRemoveChannel
 3872              	 .thumb
 3873              	 .thumb_func
 3875              	XMC_VADC_GROUP_QueueRemoveChannel:
 3876              	.LFB285:
1537:../Libraries/XMCLib/src/xmc_vadc.c **** 
1538:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort conversion of the channel queued up next */
1539:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueRemoveChannel(XMC_VADC_GROUP_t *const group_ptr)
1540:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3877              	 .loc 2 1540 0
 3878              	 .cfi_startproc
 3879              	 
 3880              	 
 3881 0000 80B5     	 push {r7,lr}
 3882              	.LCFI308:
 3883              	 .cfi_def_cfa_offset 8
 3884              	 .cfi_offset 7,-8
 3885              	 .cfi_offset 14,-4
 3886 0002 86B0     	 sub sp,sp,#24
 3887              	.LCFI309:
 3888              	 .cfi_def_cfa_offset 32
 3889 0004 00AF     	 add r7,sp,#0
 3890              	.LCFI310:
 3891              	 .cfi_def_cfa_register 7
 3892 0006 7860     	 str r0,[r7,#4]
1541:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t length_before_abort;
1542:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t length_after_abort;
1543:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl0;
1544:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1545:../Libraries/XMCLib/src/xmc_vadc.c **** 
1546:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueRemoveChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1547:../Libraries/XMCLib/src/xmc_vadc.c ****   
1548:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable any gating if present*/
1549:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl0= group_ptr->QCTRL0;
 3893              	 .loc 2 1549 0
 3894 0008 7B68     	 ldr r3,[r7,#4]
 3895 000a D3F80031 	 ldr r3,[r3,#256]
 3896 000e 3B61     	 str r3,[r7,#16]
1550:../Libraries/XMCLib/src/xmc_vadc.c **** 
1551:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 =(0U | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
 3897              	 .loc 2 1551 0
 3898 0010 7B68     	 ldr r3,[r7,#4]
 3899 0012 204A     	 ldr r2,.L145
 3900 0014 C3F80021 	 str r2,[r3,#256]
1552:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_M
1553:../Libraries/XMCLib/src/xmc_vadc.c ****   
1554:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable the Arbitration 0 in the group before abort*/
1555:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN0_Pos) & 1U);
 3901              	 .loc 2 1555 0
 3902 0018 7B68     	 ldr r3,[r7,#4]
 3903 001a D3F88430 	 ldr r3,[r3,#132]
 3904 001e 1B0E     	 lsrs r3,r3,#24
 3905 0020 03F00103 	 and r3,r3,#1
 3906 0024 002B     	 cmp r3,#0
 3907 0026 14BF     	 ite ne
 3908 0028 0123     	 movne r3,#1
 3909 002a 0023     	 moveq r3,#0
 3910 002c FB73     	 strb r3,[r7,#15]
1556:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 3911              	 .loc 2 1556 0
 3912 002e 7868     	 ldr r0,[r7,#4]
 3913 0030 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueDisableArbitrationSlot
1557:../Libraries/XMCLib/src/xmc_vadc.c **** 
1558:../Libraries/XMCLib/src/xmc_vadc.c ****   length_before_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 3914              	 .loc 2 1558 0
 3915 0034 7868     	 ldr r0,[r7,#4]
 3916 0036 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 3917 003a B860     	 str r0,[r7,#8]
1559:../Libraries/XMCLib/src/xmc_vadc.c **** 
1560:../Libraries/XMCLib/src/xmc_vadc.c ****   if (length_before_abort)
 3918              	 .loc 2 1560 0
 3919 003c BB68     	 ldr r3,[r7,#8]
 3920 003e 002B     	 cmp r3,#0
 3921 0040 14D0     	 beq .L142
1561:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1562:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Remove the first entry of the queue */
1563:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_CLRV_Msk;
 3922              	 .loc 2 1563 0
 3923 0042 7B68     	 ldr r3,[r7,#4]
 3924 0044 D3F80431 	 ldr r3,[r3,#260]
 3925 0048 43F48072 	 orr r2,r3,#256
 3926 004c 7B68     	 ldr r3,[r7,#4]
 3927 004e C3F80421 	 str r2,[r3,#260]
1564:../Libraries/XMCLib/src/xmc_vadc.c **** 
1565:../Libraries/XMCLib/src/xmc_vadc.c ****     length_after_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 3928              	 .loc 2 1565 0
 3929 0052 7868     	 ldr r0,[r7,#4]
 3930 0054 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 3931 0058 7861     	 str r0,[r7,#20]
1566:../Libraries/XMCLib/src/xmc_vadc.c **** 
1567:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Loop until a reduction in queue length is assessed */
1568:../Libraries/XMCLib/src/xmc_vadc.c ****     while(length_after_abort == length_before_abort)
 3932              	 .loc 2 1568 0
 3933 005a 03E0     	 b .L143
 3934              	.L144:
1569:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1570:../Libraries/XMCLib/src/xmc_vadc.c ****       length_after_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 3935              	 .loc 2 1570 0
 3936 005c 7868     	 ldr r0,[r7,#4]
 3937 005e FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 3938 0062 7861     	 str r0,[r7,#20]
 3939              	.L143:
1568:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 3940              	 .loc 2 1568 0
 3941 0064 7A69     	 ldr r2,[r7,#20]
 3942 0066 BB68     	 ldr r3,[r7,#8]
 3943 0068 9A42     	 cmp r2,r3
 3944 006a F7D0     	 beq .L144
 3945              	.L142:
1571:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1572:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1573:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the arbitration slot 0*/
1574:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN0_Pos);
 3946              	 .loc 2 1574 0
 3947 006c 7B68     	 ldr r3,[r7,#4]
 3948 006e D3F88420 	 ldr r2,[r3,#132]
 3949 0072 FB7B     	 ldrb r3,[r7,#15]
 3950 0074 1B06     	 lsls r3,r3,#24
 3951 0076 1A43     	 orrs r2,r2,r3
 3952 0078 7B68     	 ldr r3,[r7,#4]
 3953 007a C3F88420 	 str r2,[r3,#132]
1575:../Libraries/XMCLib/src/xmc_vadc.c ****   
1576:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1577:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (qctrl0 | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
1578:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 3954              	 .loc 2 1578 0
 3955 007e 3B69     	 ldr r3,[r7,#16]
 3956 0080 43F08023 	 orr r3,r3,#-2147450880
 3957 0084 43F40003 	 orr r3,r3,#8388608
1577:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 3958              	 .loc 2 1577 0
 3959 0088 7A68     	 ldr r2,[r7,#4]
 3960 008a C2F80031 	 str r3,[r2,#256]
1579:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3961              	 .loc 2 1579 0
 3962 008e 1837     	 adds r7,r7,#24
 3963              	.LCFI311:
 3964              	 .cfi_def_cfa_offset 8
 3965 0090 BD46     	 mov sp,r7
 3966              	.LCFI312:
 3967              	 .cfi_def_cfa_register 13
 3968              	 
 3969 0092 80BD     	 pop {r7,pc}
 3970              	.L146:
 3971              	 .align 2
 3972              	.L145:
 3973 0094 00808080 	 .word -2139062272
 3974              	 .cfi_endproc
 3975              	.LFE285:
 3977              	 .section .text.XMC_VADC_GROUP_QueueGetNextChannel,"ax",%progbits
 3978              	 .align 2
 3979              	 .global XMC_VADC_GROUP_QueueGetNextChannel
 3980              	 .thumb
 3981              	 .thumb_func
 3983              	XMC_VADC_GROUP_QueueGetNextChannel:
 3984              	.LFB286:
1580:../Libraries/XMCLib/src/xmc_vadc.c **** 
1581:../Libraries/XMCLib/src/xmc_vadc.c **** /* Get details of channel meant to be converted right after the ongoing conversion */
1582:../Libraries/XMCLib/src/xmc_vadc.c **** int32_t XMC_VADC_GROUP_QueueGetNextChannel(XMC_VADC_GROUP_t *const group_ptr)
1583:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3985              	 .loc 2 1583 0
 3986              	 .cfi_startproc
 3987              	 
 3988              	 
 3989              	 
 3990 0000 80B4     	 push {r7}
 3991              	.LCFI313:
 3992              	 .cfi_def_cfa_offset 4
 3993              	 .cfi_offset 7,-4
 3994 0002 85B0     	 sub sp,sp,#20
 3995              	.LCFI314:
 3996              	 .cfi_def_cfa_offset 24
 3997 0004 00AF     	 add r7,sp,#0
 3998              	.LCFI315:
 3999              	 .cfi_def_cfa_register 7
 4000 0006 7860     	 str r0,[r7,#4]
1584:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t ch_num;
1585:../Libraries/XMCLib/src/xmc_vadc.c **** 
1586:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetNextChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
1587:../Libraries/XMCLib/src/xmc_vadc.c ****   
1588:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
1589:../Libraries/XMCLib/src/xmc_vadc.c ****    * Check if there is something in the backup stage. If not, read queue-0
1590:../Libraries/XMCLib/src/xmc_vadc.c ****    * entry.
1591:../Libraries/XMCLib/src/xmc_vadc.c ****    */
1592:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( (group_ptr->QBUR0) & (uint32_t)VADC_G_QBUR0_V_Msk)
 4001              	 .loc 2 1592 0
 4002 0008 7B68     	 ldr r3,[r7,#4]
 4003 000a D3F81031 	 ldr r3,[r3,#272]
 4004 000e 03F48073 	 and r3,r3,#256
 4005 0012 002B     	 cmp r3,#0
 4006 0014 06D0     	 beq .L148
1593:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1594:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->QBUR0 & (uint32_t)VADC_G_QBUR0_REQCHNR_Msk);
 4007              	 .loc 2 1594 0
 4008 0016 7B68     	 ldr r3,[r7,#4]
 4009 0018 D3F81031 	 ldr r3,[r3,#272]
 4010 001c 03F01F03 	 and r3,r3,#31
 4011 0020 FB60     	 str r3,[r7,#12]
 4012 0022 10E0     	 b .L149
 4013              	.L148:
1595:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1596:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( (group_ptr->Q0R0) & (uint32_t)VADC_G_Q0R0_V_Msk)
 4014              	 .loc 2 1596 0
 4015 0024 7B68     	 ldr r3,[r7,#4]
 4016 0026 D3F80C31 	 ldr r3,[r3,#268]
 4017 002a 03F48073 	 and r3,r3,#256
 4018 002e 002B     	 cmp r3,#0
 4019 0030 06D0     	 beq .L150
1597:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1598:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->Q0R0 & (uint32_t)VADC_G_Q0R0_REQCHNR_Msk);
 4020              	 .loc 2 1598 0
 4021 0032 7B68     	 ldr r3,[r7,#4]
 4022 0034 D3F80C31 	 ldr r3,[r3,#268]
 4023 0038 03F01F03 	 and r3,r3,#31
 4024 003c FB60     	 str r3,[r7,#12]
 4025 003e 02E0     	 b .L149
 4026              	.L150:
1599:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1600:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1601:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1602:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Nothing is pending */
1603:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = -1;
 4027              	 .loc 2 1603 0
 4028 0040 4FF0FF33 	 mov r3,#-1
 4029 0044 FB60     	 str r3,[r7,#12]
 4030              	.L149:
1604:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1605:../Libraries/XMCLib/src/xmc_vadc.c **** 
1606:../Libraries/XMCLib/src/xmc_vadc.c ****   return ch_num;
 4031              	 .loc 2 1606 0
 4032 0046 FB68     	 ldr r3,[r7,#12]
1607:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4033              	 .loc 2 1607 0
 4034 0048 1846     	 mov r0,r3
 4035 004a 1437     	 adds r7,r7,#20
 4036              	.LCFI316:
 4037              	 .cfi_def_cfa_offset 4
 4038 004c BD46     	 mov sp,r7
 4039              	.LCFI317:
 4040              	 .cfi_def_cfa_register 13
 4041              	 
 4042 004e 5DF8047B 	 ldr r7,[sp],#4
 4043              	.LCFI318:
 4044              	 .cfi_restore 7
 4045              	 .cfi_def_cfa_offset 0
 4046 0052 7047     	 bx lr
 4047              	 .cfi_endproc
 4048              	.LFE286:
 4050              	 .section .text.XMC_VADC_GROUP_QueueGetInterruptedChannel,"ax",%progbits
 4051              	 .align 2
 4052              	 .global XMC_VADC_GROUP_QueueGetInterruptedChannel
 4053              	 .thumb
 4054              	 .thumb_func
 4056              	XMC_VADC_GROUP_QueueGetInterruptedChannel:
 4057              	.LFB287:
1608:../Libraries/XMCLib/src/xmc_vadc.c **** 
1609:../Libraries/XMCLib/src/xmc_vadc.c **** /* Get the channel number of the channel whose conversion had been interrupted */
1610:../Libraries/XMCLib/src/xmc_vadc.c **** int32_t XMC_VADC_GROUP_QueueGetInterruptedChannel(XMC_VADC_GROUP_t *const group_ptr)
1611:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4058              	 .loc 2 1611 0
 4059              	 .cfi_startproc
 4060              	 
 4061              	 
 4062              	 
 4063 0000 80B4     	 push {r7}
 4064              	.LCFI319:
 4065              	 .cfi_def_cfa_offset 4
 4066              	 .cfi_offset 7,-4
 4067 0002 85B0     	 sub sp,sp,#20
 4068              	.LCFI320:
 4069              	 .cfi_def_cfa_offset 24
 4070 0004 00AF     	 add r7,sp,#0
 4071              	.LCFI321:
 4072              	 .cfi_def_cfa_register 7
 4073 0006 7860     	 str r0,[r7,#4]
1612:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t ch_num;
1613:../Libraries/XMCLib/src/xmc_vadc.c **** 
1614:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetInterruptedChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
1615:../Libraries/XMCLib/src/xmc_vadc.c ****   
1616:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((group_ptr->QBUR0) & (uint32_t)VADC_G_QBUR0_V_Msk)
 4074              	 .loc 2 1616 0
 4075 0008 7B68     	 ldr r3,[r7,#4]
 4076 000a D3F81031 	 ldr r3,[r3,#272]
 4077 000e 03F48073 	 and r3,r3,#256
 4078 0012 002B     	 cmp r3,#0
 4079 0014 06D0     	 beq .L153
1617:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1618:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->QBUR0 & (uint32_t)VADC_G_QBUR0_REQCHNR_Msk);
 4080              	 .loc 2 1618 0
 4081 0016 7B68     	 ldr r3,[r7,#4]
 4082 0018 D3F81031 	 ldr r3,[r3,#272]
 4083 001c 03F01F03 	 and r3,r3,#31
 4084 0020 FB60     	 str r3,[r7,#12]
 4085 0022 02E0     	 b .L154
 4086              	.L153:
1619:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1620:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1621:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1622:../Libraries/XMCLib/src/xmc_vadc.c ****     /* No such channel */
1623:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = -1;
 4087              	 .loc 2 1623 0
 4088 0024 4FF0FF33 	 mov r3,#-1
 4089 0028 FB60     	 str r3,[r7,#12]
 4090              	.L154:
1624:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1625:../Libraries/XMCLib/src/xmc_vadc.c **** 
1626:../Libraries/XMCLib/src/xmc_vadc.c ****   return ch_num;
 4091              	 .loc 2 1626 0
 4092 002a FB68     	 ldr r3,[r7,#12]
1627:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4093              	 .loc 2 1627 0
 4094 002c 1846     	 mov r0,r3
 4095 002e 1437     	 adds r7,r7,#20
 4096              	.LCFI322:
 4097              	 .cfi_def_cfa_offset 4
 4098 0030 BD46     	 mov sp,r7
 4099              	.LCFI323:
 4100              	 .cfi_def_cfa_register 13
 4101              	 
 4102 0032 5DF8047B 	 ldr r7,[sp],#4
 4103              	.LCFI324:
 4104              	 .cfi_restore 7
 4105              	 .cfi_def_cfa_offset 0
 4106 0036 7047     	 bx lr
 4107              	 .cfi_endproc
 4108              	.LFE287:
 4110              	 .section .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode,"ax",%progbits
 4111              	 .align 2
 4112              	 .global XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode
 4113              	 .thumb
 4114              	 .thumb_func
 4116              	XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:
 4117              	.LFB288:
1628:../Libraries/XMCLib/src/xmc_vadc.c **** 
1629:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a Service Request line for the request source event */
1630:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_V
1631:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4118              	 .loc 2 1631 0
 4119              	 .cfi_startproc
 4120              	 
 4121              	 
 4122              	 
 4123 0000 80B4     	 push {r7}
 4124              	.LCFI325:
 4125              	 .cfi_def_cfa_offset 4
 4126              	 .cfi_offset 7,-4
 4127 0002 85B0     	 sub sp,sp,#20
 4128              	.LCFI326:
 4129              	 .cfi_def_cfa_offset 24
 4130 0004 00AF     	 add r7,sp,#0
 4131              	.LCFI327:
 4132              	 .cfi_def_cfa_register 7
 4133 0006 7860     	 str r0,[r7,#4]
 4134 0008 0B46     	 mov r3,r1
 4135 000a FB70     	 strb r3,[r7,#3]
1632:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sevnp;
1633:../Libraries/XMCLib/src/xmc_vadc.c **** 
1634:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_
1635:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC
1636:../Libraries/XMCLib/src/xmc_vadc.c **** 
1637:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp = group_ptr->SEVNP;
 4136              	 .loc 2 1637 0
 4137 000c 7B68     	 ldr r3,[r7,#4]
 4138 000e D3F8C031 	 ldr r3,[r3,#448]
 4139 0012 FB60     	 str r3,[r7,#12]
1638:../Libraries/XMCLib/src/xmc_vadc.c **** 
1639:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV0NP_Msk);
 4140              	 .loc 2 1639 0
 4141 0014 FB68     	 ldr r3,[r7,#12]
 4142 0016 23F00F03 	 bic r3,r3,#15
 4143 001a FB60     	 str r3,[r7,#12]
1640:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV0NP_Pos);
 4144              	 .loc 2 1640 0
 4145 001c FB78     	 ldrb r3,[r7,#3]
 4146 001e FA68     	 ldr r2,[r7,#12]
 4147 0020 1343     	 orrs r3,r3,r2
 4148 0022 FB60     	 str r3,[r7,#12]
1641:../Libraries/XMCLib/src/xmc_vadc.c **** 
1642:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SEVNP = sevnp;
 4149              	 .loc 2 1642 0
 4150 0024 7B68     	 ldr r3,[r7,#4]
 4151 0026 FA68     	 ldr r2,[r7,#12]
 4152 0028 C3F8C021 	 str r2,[r3,#448]
1643:../Libraries/XMCLib/src/xmc_vadc.c **** 
1644:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4153              	 .loc 2 1644 0
 4154 002c 1437     	 adds r7,r7,#20
 4155              	.LCFI328:
 4156              	 .cfi_def_cfa_offset 4
 4157 002e BD46     	 mov sp,r7
 4158              	.LCFI329:
 4159              	 .cfi_def_cfa_register 13
 4160              	 
 4161 0030 5DF8047B 	 ldr r7,[sp],#4
 4162              	.LCFI330:
 4163              	 .cfi_restore 7
 4164              	 .cfi_def_cfa_offset 0
 4165 0034 7047     	 bx lr
 4166              	 .cfi_endproc
 4167              	.LFE288:
 4169 0036 00BF     	 .section .text.XMC_VADC_GROUP_ChannelInit,"ax",%progbits
 4170              	 .align 2
 4171              	 .global XMC_VADC_GROUP_ChannelInit
 4172              	 .thumb
 4173              	 .thumb_func
 4175              	XMC_VADC_GROUP_ChannelInit:
 4176              	.LFB289:
1645:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1646:../Libraries/XMCLib/src/xmc_vadc.c **** 
1647:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1648:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize a channel unit */
1649:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
1650:../Libraries/XMCLib/src/xmc_vadc.c ****                                         const XMC_VADC_CHANNEL_CONFIG_t *config)
1651:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4177              	 .loc 2 1651 0
 4178              	 .cfi_startproc
 4179              	 
 4180              	 
 4181              	 
 4182 0000 80B4     	 push {r7}
 4183              	.LCFI331:
 4184              	 .cfi_def_cfa_offset 4
 4185              	 .cfi_offset 7,-4
 4186 0002 89B0     	 sub sp,sp,#36
 4187              	.LCFI332:
 4188              	 .cfi_def_cfa_offset 40
 4189 0004 00AF     	 add r7,sp,#0
 4190              	.LCFI333:
 4191              	 .cfi_def_cfa_register 7
 4192 0006 F860     	 str r0,[r7,#12]
 4193 0008 B960     	 str r1,[r7,#8]
 4194 000a 7A60     	 str r2,[r7,#4]
1652:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t prio;
1653:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ch_assign;
1654:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t mask;
1655:../Libraries/XMCLib/src/xmc_vadc.c **** 
1656:../Libraries/XMCLib/src/xmc_vadc.c **** 
1657:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1658:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_P
1659:../Libraries/XMCLib/src/xmc_vadc.c ****   
1660:../Libraries/XMCLib/src/xmc_vadc.c ****   prio  = (uint32_t)config->channel_priority;
 4195              	 .loc 2 1660 0
 4196 000c 7B68     	 ldr r3,[r7,#4]
 4197 000e 1B7A     	 ldrb r3,[r3,#8]
 4198 0010 BB61     	 str r3,[r7,#24]
1661:../Libraries/XMCLib/src/xmc_vadc.c **** 
1662:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Priority channel */
1663:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign  = group_ptr->CHASS;
 4199              	 .loc 2 1663 0
 4200 0012 FB68     	 ldr r3,[r7,#12]
 4201 0014 D3F88830 	 ldr r3,[r3,#136]
 4202 0018 7B61     	 str r3,[r7,#20]
1664:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 4203              	 .loc 2 1664 0
 4204 001a BB68     	 ldr r3,[r7,#8]
 4205 001c 0122     	 movs r2,#1
 4206 001e 02FA03F3 	 lsl r3,r2,r3
 4207 0022 DB43     	 mvns r3,r3
 4208 0024 7A69     	 ldr r2,[r7,#20]
 4209 0026 1340     	 ands r3,r3,r2
 4210 0028 7B61     	 str r3,[r7,#20]
1665:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign |= (uint32_t)(prio << ch_num);
 4211              	 .loc 2 1665 0
 4212 002a BB68     	 ldr r3,[r7,#8]
 4213 002c BA69     	 ldr r2,[r7,#24]
 4214 002e 02FA03F3 	 lsl r3,r2,r3
 4215 0032 7A69     	 ldr r2,[r7,#20]
 4216 0034 1343     	 orrs r3,r3,r2
 4217 0036 7B61     	 str r3,[r7,#20]
1666:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHASS = ch_assign;
 4218              	 .loc 2 1666 0
 4219 0038 FB68     	 ldr r3,[r7,#12]
 4220 003a 7A69     	 ldr r2,[r7,#20]
 4221 003c C3F88820 	 str r2,[r3,#136]
1667:../Libraries/XMCLib/src/xmc_vadc.c **** 
1668:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Alias channel */
1669:../Libraries/XMCLib/src/xmc_vadc.c ****   if (config->alias_channel >= (int32_t)0)
 4222              	 .loc 2 1669 0
 4223 0040 7B68     	 ldr r3,[r7,#4]
 4224 0042 5B7A     	 ldrb r3,[r3,#9]
 4225 0044 5BB2     	 sxtb r3,r3
 4226 0046 002B     	 cmp r3,#0
 4227 0048 29DB     	 blt .L158
1670:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1671:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)0;
 4228              	 .loc 2 1671 0
 4229 004a 0023     	 movs r3,#0
 4230 004c FB61     	 str r3,[r7,#28]
1672:../Libraries/XMCLib/src/xmc_vadc.c ****     if ((uint32_t)1 == ch_num)
 4231              	 .loc 2 1672 0
 4232 004e BB68     	 ldr r3,[r7,#8]
 4233 0050 012B     	 cmp r3,#1
 4234 0052 0AD1     	 bne .L159
1673:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1674:../Libraries/XMCLib/src/xmc_vadc.c ****       mask = VADC_G_ALIAS_ALIAS1_Pos;
 4235              	 .loc 2 1674 0
 4236 0054 0823     	 movs r3,#8
 4237 0056 FB61     	 str r3,[r7,#28]
1675:../Libraries/XMCLib/src/xmc_vadc.c ****       group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 4238              	 .loc 2 1675 0
 4239 0058 FB68     	 ldr r3,[r7,#12]
 4240 005a D3F8B030 	 ldr r3,[r3,#176]
 4241 005e 23F4F852 	 bic r2,r3,#7936
 4242 0062 FB68     	 ldr r3,[r7,#12]
 4243 0064 C3F8B020 	 str r2,[r3,#176]
 4244 0068 0CE0     	 b .L160
 4245              	.L159:
1676:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1677:../Libraries/XMCLib/src/xmc_vadc.c ****     else if ((uint32_t)0 == ch_num)
 4246              	 .loc 2 1677 0
 4247 006a BB68     	 ldr r3,[r7,#8]
 4248 006c 002B     	 cmp r3,#0
 4249 006e 09D1     	 bne .L160
1678:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1679:../Libraries/XMCLib/src/xmc_vadc.c ****       mask = VADC_G_ALIAS_ALIAS0_Pos;
 4250              	 .loc 2 1679 0
 4251 0070 0023     	 movs r3,#0
 4252 0072 FB61     	 str r3,[r7,#28]
1680:../Libraries/XMCLib/src/xmc_vadc.c ****       group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 4253              	 .loc 2 1680 0
 4254 0074 FB68     	 ldr r3,[r7,#12]
 4255 0076 D3F8B030 	 ldr r3,[r3,#176]
 4256 007a 23F01F02 	 bic r2,r3,#31
 4257 007e FB68     	 ldr r3,[r7,#12]
 4258 0080 C3F8B020 	 str r2,[r3,#176]
 4259              	.L160:
1681:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1682:../Libraries/XMCLib/src/xmc_vadc.c **** 
1683:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 4260              	 .loc 2 1683 0
 4261 0084 FB68     	 ldr r3,[r7,#12]
 4262 0086 D3F8B030 	 ldr r3,[r3,#176]
 4263 008a 7A68     	 ldr r2,[r7,#4]
 4264 008c 527A     	 ldrb r2,[r2,#9]
 4265 008e 51B2     	 sxtb r1,r2
 4266 0090 FA69     	 ldr r2,[r7,#28]
 4267 0092 01FA02F2 	 lsl r2,r1,r2
 4268 0096 1A43     	 orrs r2,r2,r3
 4269 0098 FB68     	 ldr r3,[r7,#12]
 4270 009a C3F8B020 	 str r2,[r3,#176]
 4271              	.L158:
1684:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1685:../Libraries/XMCLib/src/xmc_vadc.c **** 
1686:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFL |= config->bfl;
 4272              	 .loc 2 1686 0
 4273 009e FB68     	 ldr r3,[r7,#12]
 4274 00a0 D3F8C820 	 ldr r2,[r3,#200]
 4275 00a4 7B68     	 ldr r3,[r7,#4]
 4276 00a6 5B68     	 ldr r3,[r3,#4]
 4277 00a8 1A43     	 orrs r2,r2,r3
 4278 00aa FB68     	 ldr r3,[r7,#12]
 4279 00ac C3F8C820 	 str r2,[r3,#200]
1687:../Libraries/XMCLib/src/xmc_vadc.c **** 
1688:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
1689:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLC |= config->bflc;
1690:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1691:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the CHCTR register */
1692:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = config->chctr;
 4280              	 .loc 2 1692 0
 4281 00b0 7B68     	 ldr r3,[r7,#4]
 4282 00b2 1968     	 ldr r1,[r3]
 4283 00b4 FB68     	 ldr r3,[r7,#12]
 4284 00b6 BA68     	 ldr r2,[r7,#8]
 4285 00b8 8032     	 adds r2,r2,#128
 4286 00ba 43F82210 	 str r1,[r3,r2,lsl#2]
1693:../Libraries/XMCLib/src/xmc_vadc.c **** 
1694:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4287              	 .loc 2 1694 0
 4288 00be 2437     	 adds r7,r7,#36
 4289              	.LCFI334:
 4290              	 .cfi_def_cfa_offset 4
 4291 00c0 BD46     	 mov sp,r7
 4292              	.LCFI335:
 4293              	 .cfi_def_cfa_register 13
 4294              	 
 4295 00c2 5DF8047B 	 ldr r7,[sp],#4
 4296              	.LCFI336:
 4297              	 .cfi_restore 7
 4298              	 .cfi_def_cfa_offset 0
 4299 00c6 7047     	 bx lr
 4300              	 .cfi_endproc
 4301              	.LFE289:
 4303              	 .section .text.XMC_VADC_GROUP_SetChannelAlias,"ax",%progbits
 4304              	 .align 2
 4305              	 .global XMC_VADC_GROUP_SetChannelAlias
 4306              	 .thumb
 4307              	 .thumb_func
 4309              	XMC_VADC_GROUP_SetChannelAlias:
 4310              	.LFB290:
1695:../Libraries/XMCLib/src/xmc_vadc.c **** 
1696:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set an alias channel for channels numbered 2 through 7 */
1697:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetChannelAlias(XMC_VADC_GROUP_t *const group_ptr,
1698:../Libraries/XMCLib/src/xmc_vadc.c ****                                     const uint32_t src_ch_num,
1699:../Libraries/XMCLib/src/xmc_vadc.c ****                                     const uint32_t alias_ch_num)
1700:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4311              	 .loc 2 1700 0
 4312              	 .cfi_startproc
 4313              	 
 4314              	 
 4315              	 
 4316 0000 80B4     	 push {r7}
 4317              	.LCFI337:
 4318              	 .cfi_def_cfa_offset 4
 4319              	 .cfi_offset 7,-4
 4320 0002 89B0     	 sub sp,sp,#36
 4321              	.LCFI338:
 4322              	 .cfi_def_cfa_offset 40
 4323 0004 00AF     	 add r7,sp,#0
 4324              	.LCFI339:
 4325              	 .cfi_def_cfa_register 7
 4326 0006 F860     	 str r0,[r7,#12]
 4327 0008 B960     	 str r1,[r7,#8]
 4328 000a 7A60     	 str r2,[r7,#4]
1701:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t alias;
1702:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t mask;
1703:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t pos;
1704:../Libraries/XMCLib/src/xmc_vadc.c **** 
1705:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
1706:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Alias Channel", ((alias_ch_num == 0)|| (alias_ch
1707:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Aliased Channel", ((src_ch_num < 8U)))
1708:../Libraries/XMCLib/src/xmc_vadc.c **** 
1709:../Libraries/XMCLib/src/xmc_vadc.c ****   alias = group_ptr->ALIAS;
 4329              	 .loc 2 1709 0
 4330 000c FB68     	 ldr r3,[r7,#12]
 4331 000e D3F8B030 	 ldr r3,[r3,#176]
 4332 0012 7B61     	 str r3,[r7,#20]
1710:../Libraries/XMCLib/src/xmc_vadc.c **** 
1711:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == alias_ch_num)
 4333              	 .loc 2 1711 0
 4334 0014 7B68     	 ldr r3,[r7,#4]
 4335 0016 002B     	 cmp r3,#0
 4336 0018 04D1     	 bne .L162
1712:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1713:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t) VADC_G_ALIAS_ALIAS0_Msk;
 4337              	 .loc 2 1713 0
 4338 001a 1F23     	 movs r3,#31
 4339 001c FB61     	 str r3,[r7,#28]
1714:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t) VADC_G_ALIAS_ALIAS0_Pos;
 4340              	 .loc 2 1714 0
 4341 001e 0023     	 movs r3,#0
 4342 0020 BB61     	 str r3,[r7,#24]
 4343 0022 04E0     	 b .L163
 4344              	.L162:
1715:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1716:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1717:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1718:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t) VADC_G_ALIAS_ALIAS1_Msk;
 4345              	 .loc 2 1718 0
 4346 0024 4FF4F853 	 mov r3,#7936
 4347 0028 FB61     	 str r3,[r7,#28]
1719:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t) VADC_G_ALIAS_ALIAS1_Pos;
 4348              	 .loc 2 1719 0
 4349 002a 0823     	 movs r3,#8
 4350 002c BB61     	 str r3,[r7,#24]
 4351              	.L163:
1720:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1721:../Libraries/XMCLib/src/xmc_vadc.c ****   alias &= ~mask;
 4352              	 .loc 2 1721 0
 4353 002e FB69     	 ldr r3,[r7,#28]
 4354 0030 DB43     	 mvns r3,r3
 4355 0032 7A69     	 ldr r2,[r7,#20]
 4356 0034 1340     	 ands r3,r3,r2
 4357 0036 7B61     	 str r3,[r7,#20]
1722:../Libraries/XMCLib/src/xmc_vadc.c ****   alias |= (uint32_t)(src_ch_num << pos);
 4358              	 .loc 2 1722 0
 4359 0038 BB69     	 ldr r3,[r7,#24]
 4360 003a BA68     	 ldr r2,[r7,#8]
 4361 003c 02FA03F3 	 lsl r3,r2,r3
 4362 0040 7A69     	 ldr r2,[r7,#20]
 4363 0042 1343     	 orrs r3,r3,r2
 4364 0044 7B61     	 str r3,[r7,#20]
1723:../Libraries/XMCLib/src/xmc_vadc.c **** 
1724:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ALIAS = alias;
 4365              	 .loc 2 1724 0
 4366 0046 FB68     	 ldr r3,[r7,#12]
 4367 0048 7A69     	 ldr r2,[r7,#20]
 4368 004a C3F8B020 	 str r2,[r3,#176]
1725:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4369              	 .loc 2 1725 0
 4370 004e 2437     	 adds r7,r7,#36
 4371              	.LCFI340:
 4372              	 .cfi_def_cfa_offset 4
 4373 0050 BD46     	 mov sp,r7
 4374              	.LCFI341:
 4375              	 .cfi_def_cfa_register 13
 4376              	 
 4377 0052 5DF8047B 	 ldr r7,[sp],#4
 4378              	.LCFI342:
 4379              	 .cfi_restore 7
 4380              	 .cfi_def_cfa_offset 0
 4381 0056 7047     	 bx lr
 4382              	 .cfi_endproc
 4383              	.LFE290:
 4385              	 .section .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds,"ax",%progbits
 4386              	 .align 2
 4387              	 .global XMC_VADC_GROUP_ChannelIsResultOutOfBounds
 4388              	 .thumb
 4389              	 .thumb_func
 4391              	XMC_VADC_GROUP_ChannelIsResultOutOfBounds:
 4392              	.LFB291:
1726:../Libraries/XMCLib/src/xmc_vadc.c **** 
1727:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine whether input to a channel has violated boundary conditions */
1728:../Libraries/XMCLib/src/xmc_vadc.c **** bool XMC_VADC_GROUP_ChannelIsResultOutOfBounds(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch
1729:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4393              	 .loc 2 1729 0
 4394              	 .cfi_startproc
 4395              	 
 4396              	 
 4397              	 
 4398 0000 80B4     	 push {r7}
 4399              	.LCFI343:
 4400              	 .cfi_def_cfa_offset 4
 4401              	 .cfi_offset 7,-4
 4402 0002 87B0     	 sub sp,sp,#28
 4403              	.LCFI344:
 4404              	 .cfi_def_cfa_offset 32
 4405 0004 00AF     	 add r7,sp,#0
 4406              	.LCFI345:
 4407              	 .cfi_def_cfa_register 7
 4408 0006 7860     	 str r0,[r7,#4]
 4409 0008 3960     	 str r1,[r7]
1730:../Libraries/XMCLib/src/xmc_vadc.c ****   bool retval;
1731:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    chctr;
1732:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    ceflag;
1733:../Libraries/XMCLib/src/xmc_vadc.c **** 
1734:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelIsResultOutOfBounds:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
1735:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelIsResultOutOfBounds:Wrong Channel Number",
1736:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1737:../Libraries/XMCLib/src/xmc_vadc.c **** 
1738:../Libraries/XMCLib/src/xmc_vadc.c ****   retval = (bool)false;
 4410              	 .loc 2 1738 0
 4411 000a 0023     	 movs r3,#0
 4412 000c FB75     	 strb r3,[r7,#23]
1739:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
1740:../Libraries/XMCLib/src/xmc_vadc.c ****     Check if the Channel event is configured to be generated in the event of
1741:../Libraries/XMCLib/src/xmc_vadc.c ****     boundary violation and if affirmative, check if the channel event is set.
1742:../Libraries/XMCLib/src/xmc_vadc.c ****   */
1743:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract CHEVMODE for requested channel */
1744:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = group_ptr->CHCTR[ch_num];
 4413              	 .loc 2 1744 0
 4414 000e 7B68     	 ldr r3,[r7,#4]
 4415 0010 3A68     	 ldr r2,[r7]
 4416 0012 8032     	 adds r2,r2,#128
 4417 0014 53F82230 	 ldr r3,[r3,r2,lsl#2]
 4418 0018 3B61     	 str r3,[r7,#16]
1745:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = (uint32_t)(chctr >> (uint32_t)VADC_G_CHCTR_CHEVMODE_Pos)& (uint32_t)0x3;
 4419              	 .loc 2 1745 0
 4420 001a 3B69     	 ldr r3,[r7,#16]
 4421 001c 1B0A     	 lsrs r3,r3,#8
 4422 001e 03F00303 	 and r3,r3,#3
 4423 0022 3B61     	 str r3,[r7,#16]
1746:../Libraries/XMCLib/src/xmc_vadc.c **** 
1747:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract CEFLAG for the requested channel */
1748:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag = group_ptr->CEFLAG;
 4424              	 .loc 2 1748 0
 4425 0024 7B68     	 ldr r3,[r7,#4]
 4426 0026 D3F88031 	 ldr r3,[r3,#384]
 4427 002a FB60     	 str r3,[r7,#12]
1749:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag = ceflag & ((uint32_t)((uint32_t)1 << ch_num) );
 4428              	 .loc 2 1749 0
 4429 002c 3B68     	 ldr r3,[r7]
 4430 002e 0122     	 movs r2,#1
 4431 0030 02FA03F3 	 lsl r3,r2,r3
 4432 0034 FA68     	 ldr r2,[r7,#12]
 4433 0036 1340     	 ands r3,r3,r2
 4434 0038 FB60     	 str r3,[r7,#12]
1750:../Libraries/XMCLib/src/xmc_vadc.c **** 
1751:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Check what was the channel event generation criteria */
1752:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( (( (uint32_t)XMC_VADC_CHANNEL_EVGEN_INBOUND == chctr) \
 4435              	 .loc 2 1752 0
 4436 003a 3B69     	 ldr r3,[r7,#16]
 4437 003c 012B     	 cmp r3,#1
 4438 003e 02D0     	 beq .L165
1753:../Libraries/XMCLib/src/xmc_vadc.c ****       || ((uint32_t) XMC_VADC_CHANNEL_EVGEN_OUTBOUND == chctr)) && (ceflag) )
 4439              	 .loc 2 1753 0
 4440 0040 3B69     	 ldr r3,[r7,#16]
 4441 0042 022B     	 cmp r3,#2
 4442 0044 04D1     	 bne .L166
 4443              	.L165:
 4444              	 .loc 2 1753 0 is_stmt 0 discriminator 1
 4445 0046 FB68     	 ldr r3,[r7,#12]
 4446 0048 002B     	 cmp r3,#0
 4447 004a 01D0     	 beq .L166
1754:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1755:../Libraries/XMCLib/src/xmc_vadc.c ****     retval = (bool)true;
 4448              	 .loc 2 1755 0 is_stmt 1
 4449 004c 0123     	 movs r3,#1
 4450 004e FB75     	 strb r3,[r7,#23]
 4451              	.L166:
1756:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1757:../Libraries/XMCLib/src/xmc_vadc.c **** 
1758:../Libraries/XMCLib/src/xmc_vadc.c ****   return retval;
 4452              	 .loc 2 1758 0
 4453 0050 FB7D     	 ldrb r3,[r7,#23]
1759:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4454              	 .loc 2 1759 0
 4455 0052 1846     	 mov r0,r3
 4456 0054 1C37     	 adds r7,r7,#28
 4457              	.LCFI346:
 4458              	 .cfi_def_cfa_offset 4
 4459 0056 BD46     	 mov sp,r7
 4460              	.LCFI347:
 4461              	 .cfi_def_cfa_register 13
 4462              	 
 4463 0058 5DF8047B 	 ldr r7,[sp],#4
 4464              	.LCFI348:
 4465              	 .cfi_restore 7
 4466              	 .cfi_def_cfa_offset 0
 4467 005c 7047     	 bx lr
 4468              	 .cfi_endproc
 4469              	.LFE291:
 4471 005e 00BF     	 .section .text.XMC_VADC_GROUP_ChannelSetInputReference,"ax",%progbits
 4472              	 .align 2
 4473              	 .global XMC_VADC_GROUP_ChannelSetInputReference
 4474              	 .thumb
 4475              	 .thumb_func
 4477              	XMC_VADC_GROUP_ChannelSetInputReference:
 4478              	.LFB292:
1760:../Libraries/XMCLib/src/xmc_vadc.c **** 
1761:../Libraries/XMCLib/src/xmc_vadc.c **** /* Set a reference voltage for conversion */
1762:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetInputReference(XMC_VADC_GROUP_t *const group_ptr,
1763:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const uint32_t ch_num,
1764:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const XMC_VADC_CHANNEL_REF_t ref)
1765:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4479              	 .loc 2 1765 0
 4480              	 .cfi_startproc
 4481              	 
 4482              	 
 4483              	 
 4484 0000 80B4     	 push {r7}
 4485              	.LCFI349:
 4486              	 .cfi_def_cfa_offset 4
 4487              	 .cfi_offset 7,-4
 4488 0002 87B0     	 sub sp,sp,#28
 4489              	.LCFI350:
 4490              	 .cfi_def_cfa_offset 32
 4491 0004 00AF     	 add r7,sp,#0
 4492              	.LCFI351:
 4493              	 .cfi_def_cfa_register 7
 4494 0006 F860     	 str r0,[r7,#12]
 4495 0008 B960     	 str r1,[r7,#8]
 4496 000a 1346     	 mov r3,r2
 4497 000c FB71     	 strb r3,[r7,#7]
1766:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1767:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1768:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Channel Number", ((ch_num) < XMC_VADC_N
1769:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Voltage Reference", ((ref)<= XMC_VADC_C
1770:../Libraries/XMCLib/src/xmc_vadc.c **** 
1771:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 4498              	 .loc 2 1771 0
 4499 000e FB68     	 ldr r3,[r7,#12]
 4500 0010 BA68     	 ldr r2,[r7,#8]
 4501 0012 8032     	 adds r2,r2,#128
 4502 0014 53F82230 	 ldr r3,[r3,r2,lsl#2]
 4503 0018 7B61     	 str r3,[r7,#20]
1772:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_REFSEL_Msk);
 4504              	 .loc 2 1772 0
 4505 001a 7B69     	 ldr r3,[r7,#20]
 4506 001c 23F40063 	 bic r3,r3,#2048
 4507 0020 7B61     	 str r3,[r7,#20]
1773:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)ref <<  VADC_G_CHCTR_REFSEL_Pos);
 4508              	 .loc 2 1773 0
 4509 0022 FB79     	 ldrb r3,[r7,#7]
 4510 0024 DB02     	 lsls r3,r3,#11
 4511 0026 7A69     	 ldr r2,[r7,#20]
 4512 0028 1343     	 orrs r3,r3,r2
 4513 002a 7B61     	 str r3,[r7,#20]
1774:../Libraries/XMCLib/src/xmc_vadc.c **** 
1775:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 4514              	 .loc 2 1775 0
 4515 002c FB68     	 ldr r3,[r7,#12]
 4516 002e BA68     	 ldr r2,[r7,#8]
 4517 0030 8032     	 adds r2,r2,#128
 4518 0032 7969     	 ldr r1,[r7,#20]
 4519 0034 43F82210 	 str r1,[r3,r2,lsl#2]
1776:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4520              	 .loc 2 1776 0
 4521 0038 1C37     	 adds r7,r7,#28
 4522              	.LCFI352:
 4523              	 .cfi_def_cfa_offset 4
 4524 003a BD46     	 mov sp,r7
 4525              	.LCFI353:
 4526              	 .cfi_def_cfa_register 13
 4527              	 
 4528 003c 5DF8047B 	 ldr r7,[sp],#4
 4529              	.LCFI354:
 4530              	 .cfi_restore 7
 4531              	 .cfi_def_cfa_offset 0
 4532 0040 7047     	 bx lr
 4533              	 .cfi_endproc
 4534              	.LFE292:
 4536 0042 00BF     	 .section .text.XMC_VADC_GROUP_ChannelSetResultRegister,"ax",%progbits
 4537              	 .align 2
 4538              	 .global XMC_VADC_GROUP_ChannelSetResultRegister
 4539              	 .thumb
 4540              	 .thumb_func
 4542              	XMC_VADC_GROUP_ChannelSetResultRegister:
 4543              	.LFB293:
1777:../Libraries/XMCLib/src/xmc_vadc.c **** 
1778:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the available 16 registers for storing the channel result */
1779:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetResultRegister(XMC_VADC_GROUP_t *const group_ptr,
1780:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const uint32_t ch_num,
1781:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const uint32_t result_reg_num)
1782:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4544              	 .loc 2 1782 0
 4545              	 .cfi_startproc
 4546              	 
 4547              	 
 4548              	 
 4549 0000 80B4     	 push {r7}
 4550              	.LCFI355:
 4551              	 .cfi_def_cfa_offset 4
 4552              	 .cfi_offset 7,-4
 4553 0002 87B0     	 sub sp,sp,#28
 4554              	.LCFI356:
 4555              	 .cfi_def_cfa_offset 32
 4556 0004 00AF     	 add r7,sp,#0
 4557              	.LCFI357:
 4558              	 .cfi_def_cfa_register 7
 4559 0006 F860     	 str r0,[r7,#12]
 4560 0008 B960     	 str r1,[r7,#8]
 4561 000a 7A60     	 str r2,[r7,#4]
1783:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1784:../Libraries/XMCLib/src/xmc_vadc.c **** 
1785:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1786:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Channel Number",
1787:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1788:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Result Register",
1789:../Libraries/XMCLib/src/xmc_vadc.c ****              ((result_reg_num) < XMC_VADC_NUM_RESULT_REGISTERS))
1790:../Libraries/XMCLib/src/xmc_vadc.c **** 
1791:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 4562              	 .loc 2 1791 0
 4563 000c FB68     	 ldr r3,[r7,#12]
 4564 000e BA68     	 ldr r2,[r7,#8]
 4565 0010 8032     	 adds r2,r2,#128
 4566 0012 53F82230 	 ldr r3,[r3,r2,lsl#2]
 4567 0016 7B61     	 str r3,[r7,#20]
1792:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_RESREG_Msk);
 4568              	 .loc 2 1792 0
 4569 0018 7B69     	 ldr r3,[r7,#20]
 4570 001a 23F47023 	 bic r3,r3,#983040
 4571 001e 7B61     	 str r3,[r7,#20]
1793:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)(result_reg_num <<  VADC_G_CHCTR_RESREG_Pos);
 4572              	 .loc 2 1793 0
 4573 0020 7B68     	 ldr r3,[r7,#4]
 4574 0022 1B04     	 lsls r3,r3,#16
 4575 0024 7A69     	 ldr r2,[r7,#20]
 4576 0026 1343     	 orrs r3,r3,r2
 4577 0028 7B61     	 str r3,[r7,#20]
1794:../Libraries/XMCLib/src/xmc_vadc.c **** 
1795:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 4578              	 .loc 2 1795 0
 4579 002a FB68     	 ldr r3,[r7,#12]
 4580 002c BA68     	 ldr r2,[r7,#8]
 4581 002e 8032     	 adds r2,r2,#128
 4582 0030 7969     	 ldr r1,[r7,#20]
 4583 0032 43F82210 	 str r1,[r3,r2,lsl#2]
1796:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4584              	 .loc 2 1796 0
 4585 0036 1C37     	 adds r7,r7,#28
 4586              	.LCFI358:
 4587              	 .cfi_def_cfa_offset 4
 4588 0038 BD46     	 mov sp,r7
 4589              	.LCFI359:
 4590              	 .cfi_def_cfa_register 13
 4591              	 
 4592 003a 5DF8047B 	 ldr r7,[sp],#4
 4593              	.LCFI360:
 4594              	 .cfi_restore 7
 4595              	 .cfi_def_cfa_offset 0
 4596 003e 7047     	 bx lr
 4597              	 .cfi_endproc
 4598              	.LFE293:
 4600              	 .section .text.XMC_VADC_GROUP_ChannelSetIclass,"ax",%progbits
 4601              	 .align 2
 4602              	 .global XMC_VADC_GROUP_ChannelSetIclass
 4603              	 .thumb
 4604              	 .thumb_func
 4606              	XMC_VADC_GROUP_ChannelSetIclass:
 4607              	.LFB294:
1797:../Libraries/XMCLib/src/xmc_vadc.c **** 
1798:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the available 4 class conversion */
1799:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetIclass(XMC_VADC_GROUP_t *const group_ptr,
1800:../Libraries/XMCLib/src/xmc_vadc.c ****                                      const uint32_t ch_num,
1801:../Libraries/XMCLib/src/xmc_vadc.c ****                                      const XMC_VADC_CHANNEL_CONV_t conversion_class)
1802:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4608              	 .loc 2 1802 0
 4609              	 .cfi_startproc
 4610              	 
 4611              	 
 4612              	 
 4613 0000 80B4     	 push {r7}
 4614              	.LCFI361:
 4615              	 .cfi_def_cfa_offset 4
 4616              	 .cfi_offset 7,-4
 4617 0002 87B0     	 sub sp,sp,#28
 4618              	.LCFI362:
 4619              	 .cfi_def_cfa_offset 32
 4620 0004 00AF     	 add r7,sp,#0
 4621              	.LCFI363:
 4622              	 .cfi_def_cfa_register 7
 4623 0006 F860     	 str r0,[r7,#12]
 4624 0008 B960     	 str r1,[r7,#8]
 4625 000a 1346     	 mov r3,r2
 4626 000c FB71     	 strb r3,[r7,#7]
1803:../Libraries/XMCLib/src/xmc_vadc.c **** 
1804:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1805:../Libraries/XMCLib/src/xmc_vadc.c **** 
1806:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
1807:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong Channel Number",
1808:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1809:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong input class ",
1810:../Libraries/XMCLib/src/xmc_vadc.c ****              (XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1 >= conversion_class))
1811:../Libraries/XMCLib/src/xmc_vadc.c **** 
1812:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 4627              	 .loc 2 1812 0
 4628 000e FB68     	 ldr r3,[r7,#12]
 4629 0010 BA68     	 ldr r2,[r7,#8]
 4630 0012 8032     	 adds r2,r2,#128
 4631 0014 53F82230 	 ldr r3,[r3,r2,lsl#2]
 4632 0018 7B61     	 str r3,[r7,#20]
1813:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_ICLSEL_Msk);
 4633              	 .loc 2 1813 0
 4634 001a 7B69     	 ldr r3,[r7,#20]
 4635 001c 23F00303 	 bic r3,r3,#3
 4636 0020 7B61     	 str r3,[r7,#20]
1814:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)conversion_class <<  (uint32_t)VADC_G_CHCTR_ICLSEL_Pos);
 4637              	 .loc 2 1814 0
 4638 0022 FB79     	 ldrb r3,[r7,#7]
 4639 0024 7A69     	 ldr r2,[r7,#20]
 4640 0026 1343     	 orrs r3,r3,r2
 4641 0028 7B61     	 str r3,[r7,#20]
1815:../Libraries/XMCLib/src/xmc_vadc.c **** 
1816:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 4642              	 .loc 2 1816 0
 4643 002a FB68     	 ldr r3,[r7,#12]
 4644 002c BA68     	 ldr r2,[r7,#8]
 4645 002e 8032     	 adds r2,r2,#128
 4646 0030 7969     	 ldr r1,[r7,#20]
 4647 0032 43F82210 	 str r1,[r3,r2,lsl#2]
1817:../Libraries/XMCLib/src/xmc_vadc.c **** 
1818:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4648              	 .loc 2 1818 0
 4649 0036 1C37     	 adds r7,r7,#28
 4650              	.LCFI364:
 4651              	 .cfi_def_cfa_offset 4
 4652 0038 BD46     	 mov sp,r7
 4653              	.LCFI365:
 4654              	 .cfi_def_cfa_register 13
 4655              	 
 4656 003a 5DF8047B 	 ldr r7,[sp],#4
 4657              	.LCFI366:
 4658              	 .cfi_restore 7
 4659              	 .cfi_def_cfa_offset 0
 4660 003e 7047     	 bx lr
 4661              	 .cfi_endproc
 4662              	.LFE294:
 4664              	 .section .text.XMC_VADC_GROUP_ChannelGetResultRegister,"ax",%progbits
 4665              	 .align 2
 4666              	 .global XMC_VADC_GROUP_ChannelGetResultRegister
 4667              	 .thumb
 4668              	 .thumb_func
 4670              	XMC_VADC_GROUP_ChannelGetResultRegister:
 4671              	.LFB295:
1819:../Libraries/XMCLib/src/xmc_vadc.c **** 
1820:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result register bound with specified channel */
1821:../Libraries/XMCLib/src/xmc_vadc.c **** uint8_t XMC_VADC_GROUP_ChannelGetResultRegister(XMC_VADC_GROUP_t *const group_ptr, const uint32_t c
1822:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4672              	 .loc 2 1822 0
 4673              	 .cfi_startproc
 4674              	 
 4675              	 
 4676              	 
 4677 0000 80B4     	 push {r7}
 4678              	.LCFI367:
 4679              	 .cfi_def_cfa_offset 4
 4680              	 .cfi_offset 7,-4
 4681 0002 85B0     	 sub sp,sp,#20
 4682              	.LCFI368:
 4683              	 .cfi_def_cfa_offset 24
 4684 0004 00AF     	 add r7,sp,#0
 4685              	.LCFI369:
 4686              	 .cfi_def_cfa_register 7
 4687 0006 7860     	 str r0,[r7,#4]
 4688 0008 3960     	 str r1,[r7]
1823:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t resreg;
1824:../Libraries/XMCLib/src/xmc_vadc.c **** 
1825:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultRegister:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1826:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultRegister:Wrong Channel Number",
1827:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1828:../Libraries/XMCLib/src/xmc_vadc.c **** 
1829:../Libraries/XMCLib/src/xmc_vadc.c ****   resreg = (uint8_t)((group_ptr->CHCTR[ch_num] & (uint32_t)VADC_G_CHCTR_RESREG_Msk) >> VADC_G_CHCTR
 4689              	 .loc 2 1829 0
 4690 000a 7B68     	 ldr r3,[r7,#4]
 4691 000c 3A68     	 ldr r2,[r7]
 4692 000e 8032     	 adds r2,r2,#128
 4693 0010 53F82230 	 ldr r3,[r3,r2,lsl#2]
 4694 0014 03F47023 	 and r3,r3,#983040
 4695 0018 1B0C     	 lsrs r3,r3,#16
 4696 001a FB73     	 strb r3,[r7,#15]
1830:../Libraries/XMCLib/src/xmc_vadc.c **** 
1831:../Libraries/XMCLib/src/xmc_vadc.c ****   return resreg;
 4697              	 .loc 2 1831 0
 4698 001c FB7B     	 ldrb r3,[r7,#15]
1832:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4699              	 .loc 2 1832 0
 4700 001e 1846     	 mov r0,r3
 4701 0020 1437     	 adds r7,r7,#20
 4702              	.LCFI370:
 4703              	 .cfi_def_cfa_offset 4
 4704 0022 BD46     	 mov sp,r7
 4705              	.LCFI371:
 4706              	 .cfi_def_cfa_register 13
 4707              	 
 4708 0024 5DF8047B 	 ldr r7,[sp],#4
 4709              	.LCFI372:
 4710              	 .cfi_restore 7
 4711              	 .cfi_def_cfa_offset 0
 4712 0028 7047     	 bx lr
 4713              	 .cfi_endproc
 4714              	.LFE295:
 4716 002a 00BF     	 .section .text.XMC_VADC_GROUP_ChannelTriggerEvent,"ax",%progbits
 4717              	 .align 2
 4718              	 .global XMC_VADC_GROUP_ChannelTriggerEvent
 4719              	 .thumb
 4720              	 .thumb_func
 4722              	XMC_VADC_GROUP_ChannelTriggerEvent:
 4723              	.LFB296:
1833:../Libraries/XMCLib/src/xmc_vadc.c **** 
1834:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to manually assert channel event */
1835:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelTriggerEvent(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num)
1836:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4724              	 .loc 2 1836 0
 4725              	 .cfi_startproc
 4726              	 
 4727              	 
 4728              	 
 4729 0000 80B4     	 push {r7}
 4730              	.LCFI373:
 4731              	 .cfi_def_cfa_offset 4
 4732              	 .cfi_offset 7,-4
 4733 0002 85B0     	 sub sp,sp,#20
 4734              	.LCFI374:
 4735              	 .cfi_def_cfa_offset 24
 4736 0004 00AF     	 add r7,sp,#0
 4737              	.LCFI375:
 4738              	 .cfi_def_cfa_register 7
 4739 0006 7860     	 str r0,[r7,#4]
 4740 0008 3960     	 str r1,[r7]
1837:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ceflag;
1838:../Libraries/XMCLib/src/xmc_vadc.c **** 
1839:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
1840:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEvent:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CH
1841:../Libraries/XMCLib/src/xmc_vadc.c **** 
1842:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag  = group_ptr->CEFLAG;
 4741              	 .loc 2 1842 0
 4742 000a 7B68     	 ldr r3,[r7,#4]
 4743 000c D3F88031 	 ldr r3,[r3,#384]
 4744 0010 FB60     	 str r3,[r7,#12]
1843:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag |= (uint32_t)((uint32_t)1 << ch_num);
 4745              	 .loc 2 1843 0
 4746 0012 3B68     	 ldr r3,[r7]
 4747 0014 0122     	 movs r2,#1
 4748 0016 02FA03F3 	 lsl r3,r2,r3
 4749 001a FA68     	 ldr r2,[r7,#12]
 4750 001c 1343     	 orrs r3,r3,r2
 4751 001e FB60     	 str r3,[r7,#12]
1844:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CEFLAG = ceflag;
 4752              	 .loc 2 1844 0
 4753 0020 7B68     	 ldr r3,[r7,#4]
 4754 0022 FA68     	 ldr r2,[r7,#12]
 4755 0024 C3F88021 	 str r2,[r3,#384]
1845:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4756              	 .loc 2 1845 0
 4757 0028 1437     	 adds r7,r7,#20
 4758              	.LCFI376:
 4759              	 .cfi_def_cfa_offset 4
 4760 002a BD46     	 mov sp,r7
 4761              	.LCFI377:
 4762              	 .cfi_def_cfa_register 13
 4763              	 
 4764 002c 5DF8047B 	 ldr r7,[sp],#4
 4765              	.LCFI378:
 4766              	 .cfi_restore 7
 4767              	 .cfi_def_cfa_offset 0
 4768 0030 7047     	 bx lr
 4769              	 .cfi_endproc
 4770              	.LFE296:
 4772 0032 00BF     	 .section .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode,"ax",%progbits
 4773              	 .align 2
 4774              	 .global XMC_VADC_GROUP_ChannelSetEventInterruptNode
 4775              	 .thumb
 4776              	 .thumb_func
 4778              	XMC_VADC_GROUP_ChannelSetEventInterruptNode:
 4779              	.LFB297:
1846:../Libraries/XMCLib/src/xmc_vadc.c **** 
1847:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind channel event with a service request (NVIC Node) */
1848:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
1849:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const uint32_t ch_num,
1850:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const XMC_VADC_SR_t sr)
1851:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4780              	 .loc 2 1851 0
 4781              	 .cfi_startproc
 4782              	 
 4783              	 
 4784              	 
 4785 0000 80B4     	 push {r7}
 4786              	.LCFI379:
 4787              	 .cfi_def_cfa_offset 4
 4788              	 .cfi_offset 7,-4
 4789 0002 87B0     	 sub sp,sp,#28
 4790              	.LCFI380:
 4791              	 .cfi_def_cfa_offset 32
 4792 0004 00AF     	 add r7,sp,#0
 4793              	.LCFI381:
 4794              	 .cfi_def_cfa_register 7
 4795 0006 F860     	 str r0,[r7,#12]
 4796 0008 B960     	 str r1,[r7,#8]
 4797 000a 1346     	 mov r3,r2
 4798 000c FB71     	 strb r3,[r7,#7]
1852:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t route_mask;
1853:../Libraries/XMCLib/src/xmc_vadc.c **** 
1854:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROU
1855:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Channel Number",
1856:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1857:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_VAD
1858:../Libraries/XMCLib/src/xmc_vadc.c **** 
1859:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask  = group_ptr->CEVNP0;
 4799              	 .loc 2 1859 0
 4800 000e FB68     	 ldr r3,[r7,#12]
 4801 0010 D3F8A031 	 ldr r3,[r3,#416]
 4802 0014 7B61     	 str r3,[r7,#20]
1860:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask &= ~((uint32_t)15 << (ch_num * (uint32_t)4));
 4803              	 .loc 2 1860 0
 4804 0016 BB68     	 ldr r3,[r7,#8]
 4805 0018 9B00     	 lsls r3,r3,#2
 4806 001a 1A46     	 mov r2,r3
 4807 001c 0F23     	 movs r3,#15
 4808 001e 9340     	 lsls r3,r3,r2
 4809 0020 DB43     	 mvns r3,r3
 4810 0022 7A69     	 ldr r2,[r7,#20]
 4811 0024 1340     	 ands r3,r3,r2
 4812 0026 7B61     	 str r3,[r7,#20]
1861:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask |= (uint32_t)( (uint32_t)sr << (ch_num * (uint32_t)4));
 4813              	 .loc 2 1861 0
 4814 0028 FB79     	 ldrb r3,[r7,#7]
 4815 002a BA68     	 ldr r2,[r7,#8]
 4816 002c 9200     	 lsls r2,r2,#2
 4817 002e 9340     	 lsls r3,r3,r2
 4818 0030 7A69     	 ldr r2,[r7,#20]
 4819 0032 1343     	 orrs r3,r3,r2
 4820 0034 7B61     	 str r3,[r7,#20]
1862:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CEVNP0 = route_mask;
 4821              	 .loc 2 1862 0
 4822 0036 FB68     	 ldr r3,[r7,#12]
 4823 0038 7A69     	 ldr r2,[r7,#20]
 4824 003a C3F8A021 	 str r2,[r3,#416]
1863:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4825              	 .loc 2 1863 0
 4826 003e 1C37     	 adds r7,r7,#28
 4827              	.LCFI382:
 4828              	 .cfi_def_cfa_offset 4
 4829 0040 BD46     	 mov sp,r7
 4830              	.LCFI383:
 4831              	 .cfi_def_cfa_register 13
 4832              	 
 4833 0042 5DF8047B 	 ldr r7,[sp],#4
 4834              	.LCFI384:
 4835              	 .cfi_restore 7
 4836              	 .cfi_def_cfa_offset 0
 4837 0046 7047     	 bx lr
 4838              	 .cfi_endproc
 4839              	.LFE297:
 4841              	 .section .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria,"ax",%progbits
 4842              	 .align 2
 4843              	 .global XMC_VADC_GROUP_ChannelTriggerEventGenCriteria
 4844              	 .thumb
 4845              	 .thumb_func
 4847              	XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:
 4848              	.LFB298:
1864:../Libraries/XMCLib/src/xmc_vadc.c **** 
1865:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to configure conditions for generation of channel event */
1866:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelTriggerEventGenCriteria( XMC_VADC_GROUP_t *const group_ptr,
1867:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    const uint32_t ch_num,
1868:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    const XMC_VADC_CHANNEL_EVGEN_t criteria)
1869:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4849              	 .loc 2 1869 0
 4850              	 .cfi_startproc
 4851              	 
 4852              	 
 4853              	 
 4854 0000 80B4     	 push {r7}
 4855              	.LCFI385:
 4856              	 .cfi_def_cfa_offset 4
 4857              	 .cfi_offset 7,-4
 4858 0002 87B0     	 sub sp,sp,#28
 4859              	.LCFI386:
 4860              	 .cfi_def_cfa_offset 32
 4861 0004 00AF     	 add r7,sp,#0
 4862              	.LCFI387:
 4863              	 .cfi_def_cfa_register 7
 4864 0006 F860     	 str r0,[r7,#12]
 4865 0008 B960     	 str r1,[r7,#8]
 4866 000a 1346     	 mov r3,r2
 4867 000c FB71     	 strb r3,[r7,#7]
1870:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1871:../Libraries/XMCLib/src/xmc_vadc.c **** 
1872:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Group Pointer", XMC_VADC_CHECK_GR
1873:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Channel Number",
1874:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1875:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Event Generation Criteria",
1876:../Libraries/XMCLib/src/xmc_vadc.c ****              ((criteria) <= XMC_VADC_CHANNEL_EVGEN_ALWAYS))
1877:../Libraries/XMCLib/src/xmc_vadc.c **** 
1878:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = group_ptr->CHCTR[ch_num];
 4868              	 .loc 2 1878 0
 4869 000e FB68     	 ldr r3,[r7,#12]
 4870 0010 BA68     	 ldr r2,[r7,#8]
 4871 0012 8032     	 adds r2,r2,#128
 4872 0014 53F82230 	 ldr r3,[r3,r2,lsl#2]
 4873 0018 7B61     	 str r3,[r7,#20]
1879:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_CHEVMODE_Msk);
 4874              	 .loc 2 1879 0
 4875 001a 7B69     	 ldr r3,[r7,#20]
 4876 001c 23F44073 	 bic r3,r3,#768
 4877 0020 7B61     	 str r3,[r7,#20]
1880:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)criteria << VADC_G_CHCTR_CHEVMODE_Pos);
 4878              	 .loc 2 1880 0
 4879 0022 FB79     	 ldrb r3,[r7,#7]
 4880 0024 1B02     	 lsls r3,r3,#8
 4881 0026 7A69     	 ldr r2,[r7,#20]
 4882 0028 1343     	 orrs r3,r3,r2
 4883 002a 7B61     	 str r3,[r7,#20]
1881:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 4884              	 .loc 2 1881 0
 4885 002c FB68     	 ldr r3,[r7,#12]
 4886 002e BA68     	 ldr r2,[r7,#8]
 4887 0030 8032     	 adds r2,r2,#128
 4888 0032 7969     	 ldr r1,[r7,#20]
 4889 0034 43F82210 	 str r1,[r3,r2,lsl#2]
1882:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4890              	 .loc 2 1882 0
 4891 0038 1C37     	 adds r7,r7,#28
 4892              	.LCFI388:
 4893              	 .cfi_def_cfa_offset 4
 4894 003a BD46     	 mov sp,r7
 4895              	.LCFI389:
 4896              	 .cfi_def_cfa_register 13
 4897              	 
 4898 003c 5DF8047B 	 ldr r7,[sp],#4
 4899              	.LCFI390:
 4900              	 .cfi_restore 7
 4901              	 .cfi_def_cfa_offset 0
 4902 0040 7047     	 bx lr
 4903              	 .cfi_endproc
 4904              	.LFE298:
 4906 0042 00BF     	 .section .text.XMC_VADC_GROUP_ChannelSetBoundarySelection,"ax",%progbits
 4907              	 .align 2
 4908              	 .global XMC_VADC_GROUP_ChannelSetBoundarySelection
 4909              	 .thumb
 4910              	 .thumb_func
 4912              	XMC_VADC_GROUP_ChannelSetBoundarySelection:
 4913              	.LFB299:
1883:../Libraries/XMCLib/src/xmc_vadc.c **** 
1884:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to configure the boundary selection */
1885:../Libraries/XMCLib/src/xmc_vadc.c **** void  XMC_VADC_GROUP_ChannelSetBoundarySelection(XMC_VADC_GROUP_t *const group_ptr,
1886:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const uint32_t ch_num,
1887:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  XMC_VADC_BOUNDARY_SELECT_t boundary_sel,
1888:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  XMC_VADC_CHANNEL_BOUNDARY_t selection)
1889:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4914              	 .loc 2 1889 0
 4915              	 .cfi_startproc
 4916              	 
 4917              	 
 4918              	 
 4919 0000 80B4     	 push {r7}
 4920              	.LCFI391:
 4921              	 .cfi_def_cfa_offset 4
 4922              	 .cfi_offset 7,-4
 4923 0002 85B0     	 sub sp,sp,#20
 4924              	.LCFI392:
 4925              	 .cfi_def_cfa_offset 24
 4926 0004 00AF     	 add r7,sp,#0
 4927              	.LCFI393:
 4928              	 .cfi_def_cfa_register 7
 4929 0006 F860     	 str r0,[r7,#12]
 4930 0008 B960     	 str r1,[r7,#8]
 4931 000a 1146     	 mov r1,r2
 4932 000c 1A46     	 mov r2,r3
 4933 000e 0B46     	 mov r3,r1
 4934 0010 FB71     	 strb r3,[r7,#7]
 4935 0012 1346     	 mov r3,r2
 4936 0014 BB71     	 strb r3,[r7,#6]
1890:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetBoundarySelection:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
1891:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetBoundarySelection:Wrong Channel Number",
1892:../Libraries/XMCLib/src/xmc_vadc.c ****               ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1893:../Libraries/XMCLib/src/xmc_vadc.c **** 
1894:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] &= ~((uint32_t)VADC_G_CHCTR_BNDSELL_Msk << boundary_sel);
 4937              	 .loc 2 1894 0
 4938 0016 FB68     	 ldr r3,[r7,#12]
 4939 0018 BA68     	 ldr r2,[r7,#8]
 4940 001a 8032     	 adds r2,r2,#128
 4941 001c 53F82220 	 ldr r2,[r3,r2,lsl#2]
 4942 0020 FB79     	 ldrb r3,[r7,#7]
 4943 0022 3021     	 movs r1,#48
 4944 0024 01FA03F3 	 lsl r3,r1,r3
 4945 0028 DB43     	 mvns r3,r3
 4946 002a 02EA0301 	 and r1,r2,r3
 4947 002e FB68     	 ldr r3,[r7,#12]
 4948 0030 BA68     	 ldr r2,[r7,#8]
 4949 0032 8032     	 adds r2,r2,#128
 4950 0034 43F82210 	 str r1,[r3,r2,lsl#2]
1895:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] |= (selection<< ((uint32_t)VADC_G_CHCTR_BNDSELL_Pos + (uint32_t)boundary
 4951              	 .loc 2 1895 0
 4952 0038 FB68     	 ldr r3,[r7,#12]
 4953 003a BA68     	 ldr r2,[r7,#8]
 4954 003c 8032     	 adds r2,r2,#128
 4955 003e 53F82230 	 ldr r3,[r3,r2,lsl#2]
 4956 0042 BA79     	 ldrb r2,[r7,#6]
 4957 0044 F979     	 ldrb r1,[r7,#7]
 4958 0046 0431     	 adds r1,r1,#4
 4959 0048 8A40     	 lsls r2,r2,r1
 4960 004a 43EA0201 	 orr r1,r3,r2
 4961 004e FB68     	 ldr r3,[r7,#12]
 4962 0050 BA68     	 ldr r2,[r7,#8]
 4963 0052 8032     	 adds r2,r2,#128
 4964 0054 43F82210 	 str r1,[r3,r2,lsl#2]
1896:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4965              	 .loc 2 1896 0
 4966 0058 1437     	 adds r7,r7,#20
 4967              	.LCFI394:
 4968              	 .cfi_def_cfa_offset 4
 4969 005a BD46     	 mov sp,r7
 4970              	.LCFI395:
 4971              	 .cfi_def_cfa_register 13
 4972              	 
 4973 005c 5DF8047B 	 ldr r7,[sp],#4
 4974              	.LCFI396:
 4975              	 .cfi_restore 7
 4976              	 .cfi_def_cfa_offset 0
 4977 0060 7047     	 bx lr
 4978              	 .cfi_endproc
 4979              	.LFE299:
 4981 0062 00BF     	 .section .text.XMC_VADC_GROUP_AddResultToFifo,"ax",%progbits
 4982              	 .align 2
 4983              	 .global XMC_VADC_GROUP_AddResultToFifo
 4984              	 .thumb
 4985              	 .thumb_func
 4987              	XMC_VADC_GROUP_AddResultToFifo:
 4988              	.LFB300:
1897:../Libraries/XMCLib/src/xmc_vadc.c **** 
1898:../Libraries/XMCLib/src/xmc_vadc.c **** /* Make the specified result register part of Result FIFO */ 
1899:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_AddResultToFifo(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg)
1900:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4989              	 .loc 2 1900 0
 4990              	 .cfi_startproc
 4991              	 
 4992              	 
 4993              	 
 4994 0000 80B4     	 push {r7}
 4995              	.LCFI397:
 4996              	 .cfi_def_cfa_offset 4
 4997              	 .cfi_offset 7,-4
 4998 0002 85B0     	 sub sp,sp,#20
 4999              	.LCFI398:
 5000              	 .cfi_def_cfa_offset 24
 5001 0004 00AF     	 add r7,sp,#0
 5002              	.LCFI399:
 5003              	 .cfi_def_cfa_register 7
 5004 0006 7860     	 str r0,[r7,#4]
 5005 0008 3960     	 str r1,[r7]
1901:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t fen;
1902:../Libraries/XMCLib/src/xmc_vadc.c **** 
1903:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_AddResultToFifo:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
1904:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_AddResultToFifo:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESU
1905:../Libraries/XMCLib/src/xmc_vadc.c **** 
1906:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract and clear the FIFO enable field */
1907:../Libraries/XMCLib/src/xmc_vadc.c ****   fen = group_ptr->RCR[res_reg];
 5006              	 .loc 2 1907 0
 5007 000a 7B68     	 ldr r3,[r7,#4]
 5008 000c 3A68     	 ldr r2,[r7]
 5009 000e A032     	 adds r2,r2,#160
 5010 0010 53F82230 	 ldr r3,[r3,r2,lsl#2]
 5011 0014 FB60     	 str r3,[r7,#12]
1908:../Libraries/XMCLib/src/xmc_vadc.c ****   fen &= ~((uint32_t)VADC_G_RCR_FEN_Msk);
 5012              	 .loc 2 1908 0
 5013 0016 FB68     	 ldr r3,[r7,#12]
 5014 0018 23F0C063 	 bic r3,r3,#100663296
 5015 001c FB60     	 str r3,[r7,#12]
1909:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set this register up as a FIFO member */
1910:../Libraries/XMCLib/src/xmc_vadc.c ****   fen |= (uint32_t)((uint32_t)1 << VADC_G_RCR_FEN_Pos);
 5016              	 .loc 2 1910 0
 5017 001e FB68     	 ldr r3,[r7,#12]
 5018 0020 43F00073 	 orr r3,r3,#33554432
 5019 0024 FB60     	 str r3,[r7,#12]
1911:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RCR[res_reg] = fen;
 5020              	 .loc 2 1911 0
 5021 0026 7B68     	 ldr r3,[r7,#4]
 5022 0028 3A68     	 ldr r2,[r7]
 5023 002a A032     	 adds r2,r2,#160
 5024 002c F968     	 ldr r1,[r7,#12]
 5025 002e 43F82210 	 str r1,[r3,r2,lsl#2]
1912:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5026              	 .loc 2 1912 0
 5027 0032 1437     	 adds r7,r7,#20
 5028              	.LCFI400:
 5029              	 .cfi_def_cfa_offset 4
 5030 0034 BD46     	 mov sp,r7
 5031              	.LCFI401:
 5032              	 .cfi_def_cfa_register 13
 5033              	 
 5034 0036 5DF8047B 	 ldr r7,[sp],#4
 5035              	.LCFI402:
 5036              	 .cfi_restore 7
 5037              	 .cfi_def_cfa_offset 0
 5038 003a 7047     	 bx lr
 5039              	 .cfi_endproc
 5040              	.LFE300:
 5042              	 .section .text.XMC_VADC_GROUP_SetResultFastCompareValue,"ax",%progbits
 5043              	 .align 2
 5044              	 .global XMC_VADC_GROUP_SetResultFastCompareValue
 5045              	 .thumb
 5046              	 .thumb_func
 5048              	XMC_VADC_GROUP_SetResultFastCompareValue:
 5049              	.LFB301:
1913:../Libraries/XMCLib/src/xmc_vadc.c **** 
1914:../Libraries/XMCLib/src/xmc_vadc.c **** 
1915:../Libraries/XMCLib/src/xmc_vadc.c **** /* Applicable to fast compare mode, this API sets up the value which is to be compared against conv
1916:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultFastCompareValue(XMC_VADC_GROUP_t *const group_ptr,
1917:../Libraries/XMCLib/src/xmc_vadc.c ****                                               const uint32_t res_reg,
1918:../Libraries/XMCLib/src/xmc_vadc.c ****                                               const XMC_VADC_RESULT_SIZE_t compare_val)
1919:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5050              	 .loc 2 1919 0
 5051              	 .cfi_startproc
 5052              	 
 5053              	 
 5054              	 
 5055 0000 80B4     	 push {r7}
 5056              	.LCFI403:
 5057              	 .cfi_def_cfa_offset 4
 5058              	 .cfi_offset 7,-4
 5059 0002 87B0     	 sub sp,sp,#28
 5060              	.LCFI404:
 5061              	 .cfi_def_cfa_offset 32
 5062 0004 00AF     	 add r7,sp,#0
 5063              	.LCFI405:
 5064              	 .cfi_def_cfa_register 7
 5065 0006 F860     	 str r0,[r7,#12]
 5066 0008 B960     	 str r1,[r7,#8]
 5067 000a 1346     	 mov r3,r2
 5068 000c FB80     	 strh r3,[r7,#6]
1920:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res = group_ptr->RES[res_reg];
 5069              	 .loc 2 1920 0
 5070 000e FB68     	 ldr r3,[r7,#12]
 5071 0010 BA68     	 ldr r2,[r7,#8]
 5072 0012 C032     	 adds r2,r2,#192
 5073 0014 53F82230 	 ldr r3,[r3,r2,lsl#2]
 5074 0018 7B61     	 str r3,[r7,#20]
1921:../Libraries/XMCLib/src/xmc_vadc.c **** 
1922:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultFastCompareValue:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1923:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultFastCompareValue:Wrong Result Register",
1924:../Libraries/XMCLib/src/xmc_vadc.c ****             ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
1925:../Libraries/XMCLib/src/xmc_vadc.c **** 
1926:../Libraries/XMCLib/src/xmc_vadc.c ****   res &= ~((uint32_t)VADC_G_RES_RESULT_Msk);
 5075              	 .loc 2 1926 0
 5076 001a 7B69     	 ldr r3,[r7,#20]
 5077 001c 1B0C     	 lsrs r3,r3,#16
 5078 001e 1B04     	 lsls r3,r3,#16
 5079 0020 7B61     	 str r3,[r7,#20]
1927:../Libraries/XMCLib/src/xmc_vadc.c ****   res |= (uint32_t)((uint32_t)compare_val << XMC_VADC_RESULT_LEFT_ALIGN_10BIT);
 5080              	 .loc 2 1927 0
 5081 0022 FB88     	 ldrh r3,[r7,#6]
 5082 0024 9B00     	 lsls r3,r3,#2
 5083 0026 7A69     	 ldr r2,[r7,#20]
 5084 0028 1343     	 orrs r3,r3,r2
 5085 002a 7B61     	 str r3,[r7,#20]
1928:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RES[res_reg] = res;
 5086              	 .loc 2 1928 0
 5087 002c FB68     	 ldr r3,[r7,#12]
 5088 002e BA68     	 ldr r2,[r7,#8]
 5089 0030 C032     	 adds r2,r2,#192
 5090 0032 7969     	 ldr r1,[r7,#20]
 5091 0034 43F82210 	 str r1,[r3,r2,lsl#2]
1929:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5092              	 .loc 2 1929 0
 5093 0038 1C37     	 adds r7,r7,#28
 5094              	.LCFI406:
 5095              	 .cfi_def_cfa_offset 4
 5096 003a BD46     	 mov sp,r7
 5097              	.LCFI407:
 5098              	 .cfi_def_cfa_register 13
 5099              	 
 5100 003c 5DF8047B 	 ldr r7,[sp],#4
 5101              	.LCFI408:
 5102              	 .cfi_restore 7
 5103              	 .cfi_def_cfa_offset 0
 5104 0040 7047     	 bx lr
 5105              	 .cfi_endproc
 5106              	.LFE301:
 5108 0042 00BF     	 .section .text.XMC_VADC_GROUP_GetFastCompareResult,"ax",%progbits
 5109              	 .align 2
 5110              	 .global XMC_VADC_GROUP_GetFastCompareResult
 5111              	 .thumb
 5112              	 .thumb_func
 5114              	XMC_VADC_GROUP_GetFastCompareResult:
 5115              	.LFB302:
1930:../Libraries/XMCLib/src/xmc_vadc.c **** 
1931:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result of fast mode comparison */
1932:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GROUP_GetFastCompareResult(XMC_VADC_GROUP_t *const group_ptr, cons
1933:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5116              	 .loc 2 1933 0
 5117              	 .cfi_startproc
 5118              	 
 5119              	 
 5120              	 
 5121 0000 80B4     	 push {r7}
 5122              	.LCFI409:
 5123              	 .cfi_def_cfa_offset 4
 5124              	 .cfi_offset 7,-4
 5125 0002 85B0     	 sub sp,sp,#20
 5126              	.LCFI410:
 5127              	 .cfi_def_cfa_offset 24
 5128 0004 00AF     	 add r7,sp,#0
 5129              	.LCFI411:
 5130              	 .cfi_def_cfa_register 7
 5131 0006 7860     	 str r0,[r7,#4]
 5132 0008 3960     	 str r1,[r7]
1934:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_FAST_COMPARE_t result;
1935:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
1936:../Libraries/XMCLib/src/xmc_vadc.c **** 
1937:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetFastCompareResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
1938:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetFastCompareResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM
1939:../Libraries/XMCLib/src/xmc_vadc.c **** 
1940:../Libraries/XMCLib/src/xmc_vadc.c ****   res = group_ptr->RES[res_reg];
 5133              	 .loc 2 1940 0
 5134 000a 7B68     	 ldr r3,[r7,#4]
 5135 000c 3A68     	 ldr r2,[r7]
 5136 000e C032     	 adds r2,r2,#192
 5137 0010 53F82230 	 ldr r3,[r3,r2,lsl#2]
 5138 0014 BB60     	 str r3,[r7,#8]
1941:../Libraries/XMCLib/src/xmc_vadc.c **** 
1942:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res & (uint32_t)VADC_G_RES_VF_Msk)
 5139              	 .loc 2 1942 0
 5140 0016 BB68     	 ldr r3,[r7,#8]
 5141 0018 002B     	 cmp r3,#0
 5142 001a 06DA     	 bge .L180
1943:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1944:../Libraries/XMCLib/src/xmc_vadc.c ****     result = (XMC_VADC_FAST_COMPARE_t)((uint32_t)(res >> (uint32_t)VADC_G_RES_FCR_Pos) & (uint32_t)
 5143              	 .loc 2 1944 0
 5144 001c BB68     	 ldr r3,[r7,#8]
 5145 001e 9B0F     	 lsrs r3,r3,#30
 5146 0020 DBB2     	 uxtb r3,r3
 5147 0022 03F00103 	 and r3,r3,#1
 5148 0026 FB73     	 strb r3,[r7,#15]
 5149 0028 01E0     	 b .L181
 5150              	.L180:
1945:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1946:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1947:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1948:../Libraries/XMCLib/src/xmc_vadc.c ****     result = XMC_VADC_FAST_COMPARE_UNKNOWN;
 5151              	 .loc 2 1948 0
 5152 002a 0223     	 movs r3,#2
 5153 002c FB73     	 strb r3,[r7,#15]
 5154              	.L181:
1949:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1950:../Libraries/XMCLib/src/xmc_vadc.c **** 
1951:../Libraries/XMCLib/src/xmc_vadc.c ****   return result;
 5155              	 .loc 2 1951 0
 5156 002e FB7B     	 ldrb r3,[r7,#15]
1952:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5157              	 .loc 2 1952 0
 5158 0030 1846     	 mov r0,r3
 5159 0032 1437     	 adds r7,r7,#20
 5160              	.LCFI412:
 5161              	 .cfi_def_cfa_offset 4
 5162 0034 BD46     	 mov sp,r7
 5163              	.LCFI413:
 5164              	 .cfi_def_cfa_register 13
 5165              	 
 5166 0036 5DF8047B 	 ldr r7,[sp],#4
 5167              	.LCFI414:
 5168              	 .cfi_restore 7
 5169              	 .cfi_def_cfa_offset 0
 5170 003a 7047     	 bx lr
 5171              	 .cfi_endproc
 5172              	.LFE302:
 5174              	 .section .text.XMC_VADC_GROUP_SetResultSubtractionValue,"ax",%progbits
 5175              	 .align 2
 5176              	 .global XMC_VADC_GROUP_SetResultSubtractionValue
 5177              	 .thumb
 5178              	 .thumb_func
 5180              	XMC_VADC_GROUP_SetResultSubtractionValue:
 5181              	.LFB303:
1953:../Libraries/XMCLib/src/xmc_vadc.c **** 
1954:../Libraries/XMCLib/src/xmc_vadc.c **** /* Applicable to fast compare mode, this API sets up the value which is to be compared against conv
1955:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultSubtractionValue(XMC_VADC_GROUP_t *const group_ptr,
1956:../Libraries/XMCLib/src/xmc_vadc.c ****                                               const uint16_t subtraction_val)
1957:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5182              	 .loc 2 1957 0
 5183              	 .cfi_startproc
 5184              	 
 5185              	 
 5186              	 
 5187 0000 80B4     	 push {r7}
 5188              	.LCFI415:
 5189              	 .cfi_def_cfa_offset 4
 5190              	 .cfi_offset 7,-4
 5191 0002 85B0     	 sub sp,sp,#20
 5192              	.LCFI416:
 5193              	 .cfi_def_cfa_offset 24
 5194 0004 00AF     	 add r7,sp,#0
 5195              	.LCFI417:
 5196              	 .cfi_def_cfa_register 7
 5197 0006 7860     	 str r0,[r7,#4]
 5198 0008 0B46     	 mov r3,r1
 5199 000a 7B80     	 strh r3,[r7,#2]
1958:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
1959:../Libraries/XMCLib/src/xmc_vadc.c **** 
1960:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultSubtractionValue:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1961:../Libraries/XMCLib/src/xmc_vadc.c **** 
1962:../Libraries/XMCLib/src/xmc_vadc.c ****   res = group_ptr->RES[0];
 5200              	 .loc 2 1962 0
 5201 000c 7B68     	 ldr r3,[r7,#4]
 5202 000e D3F80033 	 ldr r3,[r3,#768]
 5203 0012 FB60     	 str r3,[r7,#12]
1963:../Libraries/XMCLib/src/xmc_vadc.c ****   res &= ~((uint32_t)VADC_G_RES_RESULT_Msk);
 5204              	 .loc 2 1963 0
 5205 0014 FB68     	 ldr r3,[r7,#12]
 5206 0016 1B0C     	 lsrs r3,r3,#16
 5207 0018 1B04     	 lsls r3,r3,#16
 5208 001a FB60     	 str r3,[r7,#12]
1964:../Libraries/XMCLib/src/xmc_vadc.c ****   res |= (uint32_t)subtraction_val;
 5209              	 .loc 2 1964 0
 5210 001c 7B88     	 ldrh r3,[r7,#2]
 5211 001e FA68     	 ldr r2,[r7,#12]
 5212 0020 1343     	 orrs r3,r3,r2
 5213 0022 FB60     	 str r3,[r7,#12]
1965:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RES[0] = res;
 5214              	 .loc 2 1965 0
 5215 0024 7B68     	 ldr r3,[r7,#4]
 5216 0026 FA68     	 ldr r2,[r7,#12]
 5217 0028 C3F80023 	 str r2,[r3,#768]
1966:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5218              	 .loc 2 1966 0
 5219 002c 1437     	 adds r7,r7,#20
 5220              	.LCFI418:
 5221              	 .cfi_def_cfa_offset 4
 5222 002e BD46     	 mov sp,r7
 5223              	.LCFI419:
 5224              	 .cfi_def_cfa_register 13
 5225              	 
 5226 0030 5DF8047B 	 ldr r7,[sp],#4
 5227              	.LCFI420:
 5228              	 .cfi_restore 7
 5229              	 .cfi_def_cfa_offset 0
 5230 0034 7047     	 bx lr
 5231              	 .cfi_endproc
 5232              	.LFE303:
 5234 0036 00BF     	 .section .text.XMC_VADC_GROUP_SetResultInterruptNode,"ax",%progbits
 5235              	 .align 2
 5236              	 .global XMC_VADC_GROUP_SetResultInterruptNode
 5237              	 .thumb
 5238              	 .thumb_func
 5240              	XMC_VADC_GROUP_SetResultInterruptNode:
 5241              	.LFB304:
1967:../Libraries/XMCLib/src/xmc_vadc.c **** 
1968:../Libraries/XMCLib/src/xmc_vadc.c **** 
1969:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select a service request line (NVIC Node) for result event of specified unit of result ha
1970:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
1971:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const uint32_t res_reg,
1972:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const XMC_VADC_SR_t sr)
1973:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5242              	 .loc 2 1973 0
 5243              	 .cfi_startproc
 5244              	 
 5245              	 
 5246              	 
 5247 0000 80B4     	 push {r7}
 5248              	.LCFI421:
 5249              	 .cfi_def_cfa_offset 4
 5250              	 .cfi_offset 7,-4
 5251 0002 87B0     	 sub sp,sp,#28
 5252              	.LCFI422:
 5253              	 .cfi_def_cfa_offset 32
 5254 0004 00AF     	 add r7,sp,#0
 5255              	.LCFI423:
 5256              	 .cfi_def_cfa_register 7
 5257 0006 F860     	 str r0,[r7,#12]
 5258 0008 B960     	 str r1,[r7,#8]
 5259 000a 1346     	 mov r3,r2
 5260 000c FB71     	 strb r3,[r7,#7]
1974:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t route_mask;
1975:../Libraries/XMCLib/src/xmc_vadc.c **** 
1976:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
1977:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Result Register", ((res_reg) < XMC_VADC_N
1978:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_S
1979:../Libraries/XMCLib/src/xmc_vadc.c **** 
1980:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res_reg <= 7U)
 5261              	 .loc 2 1980 0
 5262 000e BB68     	 ldr r3,[r7,#8]
 5263 0010 072B     	 cmp r3,#7
 5264 0012 18D8     	 bhi .L185
1981:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1982:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask  = group_ptr->REVNP0;
 5265              	 .loc 2 1982 0
 5266 0014 FB68     	 ldr r3,[r7,#12]
 5267 0016 D3F8B031 	 ldr r3,[r3,#432]
 5268 001a 7B61     	 str r3,[r7,#20]
1983:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask &= ~((uint32_t)((uint32_t)15 << (res_reg * (uint32_t)4) ));
 5269              	 .loc 2 1983 0
 5270 001c BB68     	 ldr r3,[r7,#8]
 5271 001e 9B00     	 lsls r3,r3,#2
 5272 0020 1A46     	 mov r2,r3
 5273 0022 0F23     	 movs r3,#15
 5274 0024 9340     	 lsls r3,r3,r2
 5275 0026 DB43     	 mvns r3,r3
 5276 0028 7A69     	 ldr r2,[r7,#20]
 5277 002a 1340     	 ands r3,r3,r2
 5278 002c 7B61     	 str r3,[r7,#20]
1984:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask |= (uint32_t)((uint32_t)sr << (res_reg * (uint32_t)4));
 5279              	 .loc 2 1984 0
 5280 002e FB79     	 ldrb r3,[r7,#7]
 5281 0030 BA68     	 ldr r2,[r7,#8]
 5282 0032 9200     	 lsls r2,r2,#2
 5283 0034 9340     	 lsls r3,r3,r2
 5284 0036 7A69     	 ldr r2,[r7,#20]
 5285 0038 1343     	 orrs r3,r3,r2
 5286 003a 7B61     	 str r3,[r7,#20]
1985:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->REVNP0 = route_mask;
 5287              	 .loc 2 1985 0
 5288 003c FB68     	 ldr r3,[r7,#12]
 5289 003e 7A69     	 ldr r2,[r7,#20]
 5290 0040 C3F8B021 	 str r2,[r3,#432]
 5291 0044 1EE0     	 b .L184
 5292              	.L185:
1986:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1987:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1988:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1989:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask = group_ptr->REVNP1;
 5293              	 .loc 2 1989 0
 5294 0046 FB68     	 ldr r3,[r7,#12]
 5295 0048 D3F8B431 	 ldr r3,[r3,#436]
 5296 004c 7B61     	 str r3,[r7,#20]
1990:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
 5297              	 .loc 2 1990 0
 5298 004e BB68     	 ldr r3,[r7,#8]
 5299 0050 03F18043 	 add r3,r3,#1073741824
 5300 0054 083B     	 subs r3,r3,#8
 5301 0056 9B00     	 lsls r3,r3,#2
 5302 0058 1A46     	 mov r2,r3
 5303 005a 0F23     	 movs r3,#15
 5304 005c 9340     	 lsls r3,r3,r2
 5305 005e DB43     	 mvns r3,r3
 5306 0060 7A69     	 ldr r2,[r7,#20]
 5307 0062 1340     	 ands r3,r3,r2
 5308 0064 7B61     	 str r3,[r7,#20]
1991:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
 5309              	 .loc 2 1991 0
 5310 0066 FA79     	 ldrb r2,[r7,#7]
 5311 0068 BB68     	 ldr r3,[r7,#8]
 5312 006a 03F18043 	 add r3,r3,#1073741824
 5313 006e 083B     	 subs r3,r3,#8
 5314 0070 9B00     	 lsls r3,r3,#2
 5315 0072 02FA03F3 	 lsl r3,r2,r3
 5316 0076 7A69     	 ldr r2,[r7,#20]
 5317 0078 1343     	 orrs r3,r3,r2
 5318 007a 7B61     	 str r3,[r7,#20]
1992:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->REVNP1 = route_mask;
 5319              	 .loc 2 1992 0
 5320 007c FB68     	 ldr r3,[r7,#12]
 5321 007e 7A69     	 ldr r2,[r7,#20]
 5322 0080 C3F8B421 	 str r2,[r3,#436]
 5323              	.L184:
1993:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1994:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5324              	 .loc 2 1994 0
 5325 0084 1C37     	 adds r7,r7,#28
 5326              	.LCFI424:
 5327              	 .cfi_def_cfa_offset 4
 5328 0086 BD46     	 mov sp,r7
 5329              	.LCFI425:
 5330              	 .cfi_def_cfa_register 13
 5331              	 
 5332 0088 5DF8047B 	 ldr r7,[sp],#4
 5333              	.LCFI426:
 5334              	 .cfi_restore 7
 5335              	 .cfi_def_cfa_offset 0
 5336 008c 7047     	 bx lr
 5337              	 .cfi_endproc
 5338              	.LFE304:
 5340 008e 00BF     	 .section .text.XMC_VADC_GROUP_GetResultFifoTail,"ax",%progbits
 5341              	 .align 2
 5342              	 .global XMC_VADC_GROUP_GetResultFifoTail
 5343              	 .thumb
 5344              	 .thumb_func
 5346              	XMC_VADC_GROUP_GetResultFifoTail:
 5347              	.LFB305:
1995:../Libraries/XMCLib/src/xmc_vadc.c **** 
1996:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the tail of the fifo which the specified result register is a part of */
1997:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_GetResultFifoTail(XMC_VADC_GROUP_t *const group_ptr, uint32_t res_reg)
1998:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5348              	 .loc 2 1998 0
 5349              	 .cfi_startproc
 5350              	 
 5351              	 
 5352 0000 80B5     	 push {r7,lr}
 5353              	.LCFI427:
 5354              	 .cfi_def_cfa_offset 8
 5355              	 .cfi_offset 7,-8
 5356              	 .cfi_offset 14,-4
 5357 0002 86B0     	 sub sp,sp,#24
 5358              	.LCFI428:
 5359              	 .cfi_def_cfa_offset 32
 5360 0004 00AF     	 add r7,sp,#0
 5361              	.LCFI429:
 5362              	 .cfi_def_cfa_register 7
 5363 0006 7860     	 str r0,[r7,#4]
 5364 0008 3960     	 str r1,[r7]
1999:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t tail;
2000:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr;
2001:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t i;
2002:../Libraries/XMCLib/src/xmc_vadc.c ****   bool exit_flag;
2003:../Libraries/XMCLib/src/xmc_vadc.c **** 
2004:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoTail:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2005:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoTail:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
2006:../Libraries/XMCLib/src/xmc_vadc.c **** 
2007:../Libraries/XMCLib/src/xmc_vadc.c ****   tail = 0U;
 5365              	 .loc 2 2007 0
 5366 000a 0023     	 movs r3,#0
 5367 000c 7B61     	 str r3,[r7,#20]
2008:../Libraries/XMCLib/src/xmc_vadc.c ****   exit_flag= (bool)false;
 5368              	 .loc 2 2008 0
 5369 000e 0023     	 movs r3,#0
 5370 0010 FB73     	 strb r3,[r7,#15]
2009:../Libraries/XMCLib/src/xmc_vadc.c **** 
2010:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((bool)true == XMC_VADC_GROUP_IsResultRegisterFifoHead(group_ptr, res_reg))
 5371              	 .loc 2 2010 0
 5372 0012 7868     	 ldr r0,[r7,#4]
 5373 0014 3968     	 ldr r1,[r7]
 5374 0016 FFF7FEFF 	 bl XMC_VADC_GROUP_IsResultRegisterFifoHead
 5375 001a 0346     	 mov r3,r0
 5376 001c 002B     	 cmp r3,#0
 5377 001e 02D0     	 beq .L188
2011:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2012:../Libraries/XMCLib/src/xmc_vadc.c ****     res_reg = res_reg - 1U;
 5378              	 .loc 2 2012 0
 5379 0020 3B68     	 ldr r3,[r7]
 5380 0022 013B     	 subs r3,r3,#1
 5381 0024 3B60     	 str r3,[r7]
 5382              	.L188:
2013:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2014:../Libraries/XMCLib/src/xmc_vadc.c **** 
2015:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Border condition */
2016:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == res_reg)
 5383              	 .loc 2 2016 0
 5384 0026 3B68     	 ldr r3,[r7]
 5385 0028 002B     	 cmp r3,#0
 5386 002a 02D1     	 bne .L189
2017:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2018:../Libraries/XMCLib/src/xmc_vadc.c ****     tail = 0U;
 5387              	 .loc 2 2018 0
 5388 002c 0023     	 movs r3,#0
 5389 002e 7B61     	 str r3,[r7,#20]
 5390 0030 26E0     	 b .L190
 5391              	.L189:
2019:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2020:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2021:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2022:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Stop either at a node that does not have FEN set or at Node-0 */
2023:../Libraries/XMCLib/src/xmc_vadc.c ****     for(i = (int32_t)res_reg; i >= (int32_t)0; i--)
 5392              	 .loc 2 2023 0
 5393 0032 3B68     	 ldr r3,[r7]
 5394 0034 3B61     	 str r3,[r7,#16]
 5395 0036 20E0     	 b .L191
 5396              	.L196:
2024:../Libraries/XMCLib/src/xmc_vadc.c ****     {
2025:../Libraries/XMCLib/src/xmc_vadc.c ****        rcr = group_ptr->RCR[i];
 5397              	 .loc 2 2025 0
 5398 0038 7B68     	 ldr r3,[r7,#4]
 5399 003a 3A69     	 ldr r2,[r7,#16]
 5400 003c A032     	 adds r2,r2,#160
 5401 003e 53F82230 	 ldr r3,[r3,r2,lsl#2]
 5402 0042 BB60     	 str r3,[r7,#8]
2026:../Libraries/XMCLib/src/xmc_vadc.c ****        rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5403              	 .loc 2 2026 0
 5404 0044 BB68     	 ldr r3,[r7,#8]
 5405 0046 03F0C063 	 and r3,r3,#100663296
 5406 004a BB60     	 str r3,[r7,#8]
2027:../Libraries/XMCLib/src/xmc_vadc.c **** 
2028:../Libraries/XMCLib/src/xmc_vadc.c ****        if (rcr)
 5407              	 .loc 2 2028 0
 5408 004c BB68     	 ldr r3,[r7,#8]
 5409 004e 002B     	 cmp r3,#0
 5410 0050 07D0     	 beq .L192
2029:../Libraries/XMCLib/src/xmc_vadc.c ****        {
2030:../Libraries/XMCLib/src/xmc_vadc.c ****          if ((int32_t)0 == i)
 5411              	 .loc 2 2030 0
 5412 0052 3B69     	 ldr r3,[r7,#16]
 5413 0054 002B     	 cmp r3,#0
 5414 0056 09D1     	 bne .L194
2031:../Libraries/XMCLib/src/xmc_vadc.c ****          {
2032:../Libraries/XMCLib/src/xmc_vadc.c ****           /* No more nodes. Stop here */
2033:../Libraries/XMCLib/src/xmc_vadc.c ****           tail = (uint32_t)0;
 5415              	 .loc 2 2033 0
 5416 0058 0023     	 movs r3,#0
 5417 005a 7B61     	 str r3,[r7,#20]
2034:../Libraries/XMCLib/src/xmc_vadc.c ****           exit_flag = (bool)true;
 5418              	 .loc 2 2034 0
 5419 005c 0123     	 movs r3,#1
 5420 005e FB73     	 strb r3,[r7,#15]
 5421 0060 04E0     	 b .L194
 5422              	.L192:
2035:../Libraries/XMCLib/src/xmc_vadc.c ****          }
2036:../Libraries/XMCLib/src/xmc_vadc.c ****        }
2037:../Libraries/XMCLib/src/xmc_vadc.c ****        else
2038:../Libraries/XMCLib/src/xmc_vadc.c ****        {
2039:../Libraries/XMCLib/src/xmc_vadc.c ****          /* The preceding register forms the tail of the FIFO */
2040:../Libraries/XMCLib/src/xmc_vadc.c ****          tail = (uint32_t)i + (uint32_t)1;
 5423              	 .loc 2 2040 0
 5424 0062 3B69     	 ldr r3,[r7,#16]
 5425 0064 0133     	 adds r3,r3,#1
 5426 0066 7B61     	 str r3,[r7,#20]
2041:../Libraries/XMCLib/src/xmc_vadc.c ****          exit_flag = (bool)true;
 5427              	 .loc 2 2041 0
 5428 0068 0123     	 movs r3,#1
 5429 006a FB73     	 strb r3,[r7,#15]
 5430              	.L194:
2042:../Libraries/XMCLib/src/xmc_vadc.c ****        }
2043:../Libraries/XMCLib/src/xmc_vadc.c ****        if (exit_flag)
 5431              	 .loc 2 2043 0
 5432 006c FB7B     	 ldrb r3,[r7,#15]
 5433 006e 002B     	 cmp r3,#0
 5434 0070 00D0     	 beq .L195
2044:../Libraries/XMCLib/src/xmc_vadc.c ****        {
2045:../Libraries/XMCLib/src/xmc_vadc.c ****          break;
 5435              	 .loc 2 2045 0
 5436 0072 05E0     	 b .L190
 5437              	.L195:
2023:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 5438              	 .loc 2 2023 0 discriminator 2
 5439 0074 3B69     	 ldr r3,[r7,#16]
 5440 0076 013B     	 subs r3,r3,#1
 5441 0078 3B61     	 str r3,[r7,#16]
 5442              	.L191:
2023:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 5443              	 .loc 2 2023 0 is_stmt 0 discriminator 1
 5444 007a 3B69     	 ldr r3,[r7,#16]
 5445 007c 002B     	 cmp r3,#0
 5446 007e DBDA     	 bge .L196
 5447              	.L190:
2046:../Libraries/XMCLib/src/xmc_vadc.c ****        }
2047:../Libraries/XMCLib/src/xmc_vadc.c ****     }
2048:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2049:../Libraries/XMCLib/src/xmc_vadc.c ****   return tail;
 5448              	 .loc 2 2049 0 is_stmt 1
 5449 0080 7B69     	 ldr r3,[r7,#20]
2050:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5450              	 .loc 2 2050 0
 5451 0082 1846     	 mov r0,r3
 5452 0084 1837     	 adds r7,r7,#24
 5453              	.LCFI430:
 5454              	 .cfi_def_cfa_offset 8
 5455 0086 BD46     	 mov sp,r7
 5456              	.LCFI431:
 5457              	 .cfi_def_cfa_register 13
 5458              	 
 5459 0088 80BD     	 pop {r7,pc}
 5460              	 .cfi_endproc
 5461              	.LFE305:
 5463              	 .section .text.XMC_VADC_GROUP_GetResultFifoHead,"ax",%progbits
 5464              	 .align 2
 5465              	 .global XMC_VADC_GROUP_GetResultFifoHead
 5466              	 .thumb
 5467              	 .thumb_func
 5469              	XMC_VADC_GROUP_GetResultFifoHead:
 5470              	.LFB306:
2051:../Libraries/XMCLib/src/xmc_vadc.c **** 
2052:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the head of the fifo which the specified result register is a part of */
2053:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_GetResultFifoHead(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg
2054:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5471              	 .loc 2 2054 0
 5472              	 .cfi_startproc
 5473              	 
 5474              	 
 5475 0000 80B5     	 push {r7,lr}
 5476              	.LCFI432:
 5477              	 .cfi_def_cfa_offset 8
 5478              	 .cfi_offset 7,-8
 5479              	 .cfi_offset 14,-4
 5480 0002 86B0     	 sub sp,sp,#24
 5481              	.LCFI433:
 5482              	 .cfi_def_cfa_offset 32
 5483 0004 00AF     	 add r7,sp,#0
 5484              	.LCFI434:
 5485              	 .cfi_def_cfa_register 7
 5486 0006 7860     	 str r0,[r7,#4]
 5487 0008 3960     	 str r1,[r7]
2055:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t head;
2056:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr;
2057:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
2058:../Libraries/XMCLib/src/xmc_vadc.c **** 
2059:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoHead:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2060:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoHead:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
2061:../Libraries/XMCLib/src/xmc_vadc.c **** 
2062:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((bool)true == XMC_VADC_GROUP_IsResultRegisterFifoHead(group_ptr, res_reg))
 5488              	 .loc 2 2062 0
 5489 000a 7868     	 ldr r0,[r7,#4]
 5490 000c 3968     	 ldr r1,[r7]
 5491 000e FFF7FEFF 	 bl XMC_VADC_GROUP_IsResultRegisterFifoHead
 5492 0012 0346     	 mov r3,r0
 5493 0014 002B     	 cmp r3,#0
 5494 0016 02D0     	 beq .L199
2063:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2064:../Libraries/XMCLib/src/xmc_vadc.c ****       head = res_reg;
 5495              	 .loc 2 2064 0
 5496 0018 3B68     	 ldr r3,[r7]
 5497 001a 7B61     	 str r3,[r7,#20]
 5498 001c 1AE0     	 b .L200
 5499              	.L199:
2065:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2066:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2067:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2068:../Libraries/XMCLib/src/xmc_vadc.c ****     head = XMC_VADC_NUM_RESULT_REGISTERS - (uint32_t)1;
 5500              	 .loc 2 2068 0
 5501 001e 0F23     	 movs r3,#15
 5502 0020 7B61     	 str r3,[r7,#20]
2069:../Libraries/XMCLib/src/xmc_vadc.c **** 
2070:../Libraries/XMCLib/src/xmc_vadc.c ****     for(i = res_reg; i < XMC_VADC_NUM_RESULT_REGISTERS ; i++)
 5503              	 .loc 2 2070 0
 5504 0022 3B68     	 ldr r3,[r7]
 5505 0024 3B61     	 str r3,[r7,#16]
 5506 0026 12E0     	 b .L201
 5507              	.L203:
2071:../Libraries/XMCLib/src/xmc_vadc.c ****     {
2072:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr = group_ptr->RCR[i];
 5508              	 .loc 2 2072 0
 5509 0028 7B68     	 ldr r3,[r7,#4]
 5510 002a 3A69     	 ldr r2,[r7,#16]
 5511 002c A032     	 adds r2,r2,#160
 5512 002e 53F82230 	 ldr r3,[r3,r2,lsl#2]
 5513 0032 FB60     	 str r3,[r7,#12]
2073:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5514              	 .loc 2 2073 0
 5515 0034 FB68     	 ldr r3,[r7,#12]
 5516 0036 03F0C063 	 and r3,r3,#100663296
 5517 003a FB60     	 str r3,[r7,#12]
2074:../Libraries/XMCLib/src/xmc_vadc.c **** 
2075:../Libraries/XMCLib/src/xmc_vadc.c ****       if (!rcr)
 5518              	 .loc 2 2075 0
 5519 003c FB68     	 ldr r3,[r7,#12]
 5520 003e 002B     	 cmp r3,#0
 5521 0040 02D1     	 bne .L202
2076:../Libraries/XMCLib/src/xmc_vadc.c ****       {
2077:../Libraries/XMCLib/src/xmc_vadc.c ****         /* This node forms the head of the FIFO */
2078:../Libraries/XMCLib/src/xmc_vadc.c ****         head = i ;
 5522              	 .loc 2 2078 0
 5523 0042 3B69     	 ldr r3,[r7,#16]
 5524 0044 7B61     	 str r3,[r7,#20]
2079:../Libraries/XMCLib/src/xmc_vadc.c ****         break;
 5525              	 .loc 2 2079 0
 5526 0046 05E0     	 b .L200
 5527              	.L202:
2070:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 5528              	 .loc 2 2070 0 discriminator 2
 5529 0048 3B69     	 ldr r3,[r7,#16]
 5530 004a 0133     	 adds r3,r3,#1
 5531 004c 3B61     	 str r3,[r7,#16]
 5532              	.L201:
2070:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 5533              	 .loc 2 2070 0 is_stmt 0 discriminator 1
 5534 004e 3B69     	 ldr r3,[r7,#16]
 5535 0050 0F2B     	 cmp r3,#15
 5536 0052 E9D9     	 bls .L203
 5537              	.L200:
2080:../Libraries/XMCLib/src/xmc_vadc.c ****       }
2081:../Libraries/XMCLib/src/xmc_vadc.c ****     }
2082:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2083:../Libraries/XMCLib/src/xmc_vadc.c ****   return head;
 5538              	 .loc 2 2083 0 is_stmt 1
 5539 0054 7B69     	 ldr r3,[r7,#20]
2084:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5540              	 .loc 2 2084 0
 5541 0056 1846     	 mov r0,r3
 5542 0058 1837     	 adds r7,r7,#24
 5543              	.LCFI435:
 5544              	 .cfi_def_cfa_offset 8
 5545 005a BD46     	 mov sp,r7
 5546              	.LCFI436:
 5547              	 .cfi_def_cfa_register 13
 5548              	 
 5549 005c 80BD     	 pop {r7,pc}
 5550              	 .cfi_endproc
 5551              	.LFE306:
 5553 005e 00BF     	 .section .text.XMC_VADC_GROUP_IsResultRegisterFifoHead,"ax",%progbits
 5554              	 .align 2
 5555              	 .global XMC_VADC_GROUP_IsResultRegisterFifoHead
 5556              	 .thumb
 5557              	 .thumb_func
 5559              	XMC_VADC_GROUP_IsResultRegisterFifoHead:
 5560              	.LFB307:
2085:../Libraries/XMCLib/src/xmc_vadc.c **** 
2086:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine if the specified result register is the head of a result fifo */
2087:../Libraries/XMCLib/src/xmc_vadc.c **** bool XMC_VADC_GROUP_IsResultRegisterFifoHead(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_
2088:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5561              	 .loc 2 2088 0
 5562              	 .cfi_startproc
 5563              	 
 5564              	 
 5565              	 
 5566 0000 80B4     	 push {r7}
 5567              	.LCFI437:
 5568              	 .cfi_def_cfa_offset 4
 5569              	 .cfi_offset 7,-4
 5570 0002 87B0     	 sub sp,sp,#28
 5571              	.LCFI438:
 5572              	 .cfi_def_cfa_offset 32
 5573 0004 00AF     	 add r7,sp,#0
 5574              	.LCFI439:
 5575              	 .cfi_def_cfa_register 7
 5576 0006 7860     	 str r0,[r7,#4]
 5577 0008 3960     	 str r1,[r7]
2089:../Libraries/XMCLib/src/xmc_vadc.c ****   bool ret_val;
2090:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr_head;
2091:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr_next;
2092:../Libraries/XMCLib/src/xmc_vadc.c **** 
2093:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsResultRegisterFifoHead:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
2094:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsResultRegisterFifoHead:Wrong Result Register",
2095:../Libraries/XMCLib/src/xmc_vadc.c ****              ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
2096:../Libraries/XMCLib/src/xmc_vadc.c **** 
2097:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_head = group_ptr->RCR[res_reg];
 5578              	 .loc 2 2097 0
 5579 000a 7B68     	 ldr r3,[r7,#4]
 5580 000c 3A68     	 ldr r2,[r7]
 5581 000e A032     	 adds r2,r2,#160
 5582 0010 53F82230 	 ldr r3,[r3,r2,lsl#2]
 5583 0014 3B61     	 str r3,[r7,#16]
2098:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_head &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5584              	 .loc 2 2098 0
 5585 0016 3B69     	 ldr r3,[r7,#16]
 5586 0018 03F0C063 	 and r3,r3,#100663296
 5587 001c 3B61     	 str r3,[r7,#16]
2099:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_next = group_ptr->RCR[res_reg - (uint32_t)1];
 5588              	 .loc 2 2099 0
 5589 001e 3B68     	 ldr r3,[r7]
 5590 0020 5A1E     	 subs r2,r3,#1
 5591 0022 7B68     	 ldr r3,[r7,#4]
 5592 0024 A032     	 adds r2,r2,#160
 5593 0026 53F82230 	 ldr r3,[r3,r2,lsl#2]
 5594 002a FB60     	 str r3,[r7,#12]
2100:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_next &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5595              	 .loc 2 2100 0
 5596 002c FB68     	 ldr r3,[r7,#12]
 5597 002e 03F0C063 	 and r3,r3,#100663296
 5598 0032 FB60     	 str r3,[r7,#12]
2101:../Libraries/XMCLib/src/xmc_vadc.c **** 
2102:../Libraries/XMCLib/src/xmc_vadc.c ****   if (rcr_head)
 5599              	 .loc 2 2102 0
 5600 0034 3B69     	 ldr r3,[r7,#16]
 5601 0036 002B     	 cmp r3,#0
 5602 0038 02D0     	 beq .L206
2103:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2104:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)false;
 5603              	 .loc 2 2104 0
 5604 003a 0023     	 movs r3,#0
 5605 003c FB75     	 strb r3,[r7,#23]
 5606 003e 07E0     	 b .L207
 5607              	.L206:
2105:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2106:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (rcr_next)
 5608              	 .loc 2 2106 0
 5609 0040 FB68     	 ldr r3,[r7,#12]
 5610 0042 002B     	 cmp r3,#0
 5611 0044 02D0     	 beq .L208
2107:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2108:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)true;
 5612              	 .loc 2 2108 0
 5613 0046 0123     	 movs r3,#1
 5614 0048 FB75     	 strb r3,[r7,#23]
 5615 004a 01E0     	 b .L207
 5616              	.L208:
2109:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2110:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2111:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2112:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)false;
 5617              	 .loc 2 2112 0
 5618 004c 0023     	 movs r3,#0
 5619 004e FB75     	 strb r3,[r7,#23]
 5620              	.L207:
2113:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2114:../Libraries/XMCLib/src/xmc_vadc.c **** 
2115:../Libraries/XMCLib/src/xmc_vadc.c ****   return ret_val;
 5621              	 .loc 2 2115 0
 5622 0050 FB7D     	 ldrb r3,[r7,#23]
2116:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5623              	 .loc 2 2116 0
 5624 0052 1846     	 mov r0,r3
 5625 0054 1C37     	 adds r7,r7,#28
 5626              	.LCFI440:
 5627              	 .cfi_def_cfa_offset 4
 5628 0056 BD46     	 mov sp,r7
 5629              	.LCFI441:
 5630              	 .cfi_def_cfa_register 13
 5631              	 
 5632 0058 5DF8047B 	 ldr r7,[sp],#4
 5633              	.LCFI442:
 5634              	 .cfi_restore 7
 5635              	 .cfi_def_cfa_offset 0
 5636 005c 7047     	 bx lr
 5637              	 .cfi_endproc
 5638              	.LFE307:
 5640 005e 00BF     	 .text
 5641              	.Letext0:
 5642              	 .file 3 "c:\\davev4\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 5643              	 .file 4 "c:\\davev4\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 5644              	 .file 5 "D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 5645              	 .file 6 "D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/XMCLib/inc/xmc4_scu.h"
 5646              	 .file 7 "D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/CMSIS/Include/core_cm4.h"
 5647              	 .file 8 "D:/XMC_HandController/DAVE_HandController/Test_FlexSensor/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_vadc.c
    {standard input}:20     .text.XMC_VADC_GROUP_ExternalMuxControlInit:00000000 $t
    {standard input}:24     .text.XMC_VADC_GROUP_ExternalMuxControlInit:00000000 XMC_VADC_GROUP_ExternalMuxControlInit
    {standard input}:106    .text.XMC_VADC_GROUP_ScanEnableArbitrationSlot:00000000 $t
    {standard input}:110    .text.XMC_VADC_GROUP_ScanEnableArbitrationSlot:00000000 XMC_VADC_GROUP_ScanEnableArbitrationSlot
    {standard input}:151    .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot:00000000 $t
    {standard input}:155    .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot:00000000 XMC_VADC_GROUP_ScanDisableArbitrationSlot
    {standard input}:196    .text.XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:00000000 $t
    {standard input}:200    .text.XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:00000000 XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
    {standard input}:241    .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:00000000 $t
    {standard input}:245    .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:00000000 XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
    {standard input}:286    .text.XMC_VADC_GROUP_QueueEnableArbitrationSlot:00000000 $t
    {standard input}:290    .text.XMC_VADC_GROUP_QueueEnableArbitrationSlot:00000000 XMC_VADC_GROUP_QueueEnableArbitrationSlot
    {standard input}:331    .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot:00000000 $t
    {standard input}:335    .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot:00000000 XMC_VADC_GROUP_QueueDisableArbitrationSlot
    {standard input}:376    .text.XMC_VADC_GROUP_QueueFlushEntries:00000000 $t
    {standard input}:380    .text.XMC_VADC_GROUP_QueueFlushEntries:00000000 XMC_VADC_GROUP_QueueFlushEntries
    {standard input}:430    .rodata.g_xmc_vadc_group_array:00000000 $d
    {standard input}:433    .rodata.g_xmc_vadc_group_array:00000000 g_xmc_vadc_group_array
    {standard input}:439    .text.XMC_VADC_GLOBAL_EnableModule:00000000 $t
    {standard input}:444    .text.XMC_VADC_GLOBAL_EnableModule:00000000 XMC_VADC_GLOBAL_EnableModule
    {standard input}:468    .text.XMC_VADC_GLOBAL_DisableModule:00000000 $t
    {standard input}:473    .text.XMC_VADC_GLOBAL_DisableModule:00000000 XMC_VADC_GLOBAL_DisableModule
    {standard input}:496    .text.XMC_VADC_GLOBAL_Init:00000000 $t
    {standard input}:501    .text.XMC_VADC_GLOBAL_Init:00000000 XMC_VADC_GLOBAL_Init
    {standard input}:566    .text.XMC_VADC_GLOBAL_InputClassInit:00000000 $t
    {standard input}:571    .text.XMC_VADC_GLOBAL_InputClassInit:00000000 XMC_VADC_GLOBAL_InputClassInit
    {standard input}:632    .text.XMC_VADC_GLOBAL_InputClassInit:00000044 $d
    {standard input}:637    .text.XMC_VADC_GLOBAL_StartupCalibration:00000000 $t
    {standard input}:642    .text.XMC_VADC_GLOBAL_StartupCalibration:00000000 XMC_VADC_GLOBAL_StartupCalibration
    {standard input}:717    .text.XMC_VADC_GLOBAL_StartupCalibration:0000005c $d
    {standard input}:722    .text.XMC_VADC_GLOBAL_SetBoundaries:00000000 $t
    {standard input}:727    .text.XMC_VADC_GLOBAL_SetBoundaries:00000000 XMC_VADC_GLOBAL_SetBoundaries
    {standard input}:782    .text.XMC_VADC_GLOBAL_SetIndividualBoundary:00000000 $t
    {standard input}:787    .text.XMC_VADC_GLOBAL_SetIndividualBoundary:00000000 XMC_VADC_GLOBAL_SetIndividualBoundary
    {standard input}:866    .text.XMC_VADC_GLOBAL_SetCompareValue:00000000 $t
    {standard input}:871    .text.XMC_VADC_GLOBAL_SetCompareValue:00000000 XMC_VADC_GLOBAL_SetCompareValue
    {standard input}:923    .text.XMC_VADC_GLOBAL_GetCompareResult:00000000 $t
    {standard input}:928    .text.XMC_VADC_GLOBAL_GetCompareResult:00000000 XMC_VADC_GLOBAL_GetCompareResult
    {standard input}:986    .text.XMC_VADC_GLOBAL_BindGroupToEMux:00000000 $t
    {standard input}:991    .text.XMC_VADC_GLOBAL_BindGroupToEMux:00000000 XMC_VADC_GLOBAL_BindGroupToEMux
    {standard input}:1064   .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode:00000000 $t
    {standard input}:1069   .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode:00000000 XMC_VADC_GLOBAL_SetResultEventInterruptNode
    {standard input}:1134   .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:1139   .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:00000000 XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode
    {standard input}:1203   .text.XMC_VADC_GROUP_Init:00000000 $t
    {standard input}:1208   .text.XMC_VADC_GROUP_Init:00000000 XMC_VADC_GROUP_Init
    {standard input}:1288   .text.XMC_VADC_GROUP_InputClassInit:00000000 XMC_VADC_GROUP_InputClassInit
    {standard input}:1283   .text.XMC_VADC_GROUP_InputClassInit:00000000 $t
    {standard input}:1416   .text.XMC_VADC_GROUP_SetPowerMode:00000000 $t
    {standard input}:1421   .text.XMC_VADC_GROUP_SetPowerMode:00000000 XMC_VADC_GROUP_SetPowerMode
    {standard input}:1475   .text.XMC_VADC_GROUP_SetSyncSlave:00000000 $t
    {standard input}:1480   .text.XMC_VADC_GROUP_SetSyncSlave:00000000 XMC_VADC_GROUP_SetSyncSlave
    {standard input}:1544   .text.XMC_VADC_GROUP_SetSyncMaster:00000000 $t
    {standard input}:1549   .text.XMC_VADC_GROUP_SetSyncMaster:00000000 XMC_VADC_GROUP_SetSyncMaster
    {standard input}:1596   .text.XMC_VADC_GROUP_CheckSlaveReadiness:00000000 $t
    {standard input}:1601   .text.XMC_VADC_GROUP_CheckSlaveReadiness:00000000 XMC_VADC_GROUP_CheckSlaveReadiness
    {standard input}:1685   .text.XMC_VADC_GROUP_CheckSlaveReadiness:00000064 $d
    {standard input}:1690   .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:00000000 $t
    {standard input}:1695   .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:00000000 XMC_VADC_GROUP_IgnoreSlaveReadiness
    {standard input}:1780   .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:00000064 $d
    {standard input}:1785   .text.XMC_VADC_GROUP_SetSyncSlaveReadySignal:00000000 $t
    {standard input}:1790   .text.XMC_VADC_GROUP_SetSyncSlaveReadySignal:00000000 XMC_VADC_GROUP_SetSyncSlaveReadySignal
    {standard input}:1848   .text.XMC_VADC_GROUP_EnableChannelSyncRequest:00000000 $t
    {standard input}:1853   .text.XMC_VADC_GROUP_EnableChannelSyncRequest:00000000 XMC_VADC_GROUP_EnableChannelSyncRequest
    {standard input}:1909   .text.XMC_VADC_GROUP_DisableChannelSyncRequest:00000000 $t
    {standard input}:1914   .text.XMC_VADC_GROUP_DisableChannelSyncRequest:00000000 XMC_VADC_GROUP_DisableChannelSyncRequest
    {standard input}:1970   .text.XMC_VADC_GROUP_IsConverterBusy:00000000 $t
    {standard input}:1975   .text.XMC_VADC_GROUP_IsConverterBusy:00000000 XMC_VADC_GROUP_IsConverterBusy
    {standard input}:2026   .text.XMC_VADC_GROUP_SetBoundaries:00000000 $t
    {standard input}:2031   .text.XMC_VADC_GROUP_SetBoundaries:00000000 XMC_VADC_GROUP_SetBoundaries
    {standard input}:2097   .text.XMC_VADC_GROUP_SetIndividualBoundary:00000000 $t
    {standard input}:2102   .text.XMC_VADC_GROUP_SetIndividualBoundary:00000000 XMC_VADC_GROUP_SetIndividualBoundary
    {standard input}:2181   .text.XMC_VADC_GROUP_TriggerServiceRequest:00000000 $t
    {standard input}:2186   .text.XMC_VADC_GROUP_TriggerServiceRequest:00000000 XMC_VADC_GROUP_TriggerServiceRequest
    {standard input}:2255   .text.XMC_VADC_GROUP_ScanInit:00000000 $t
    {standard input}:2260   .text.XMC_VADC_GROUP_ScanInit:00000000 XMC_VADC_GROUP_ScanInit
    {standard input}:2358   .text.XMC_VADC_GROUP_ScanSelectTrigger:00000000 $t
    {standard input}:2363   .text.XMC_VADC_GROUP_ScanSelectTrigger:00000000 XMC_VADC_GROUP_ScanSelectTrigger
    {standard input}:2422   .text.XMC_VADC_GROUP_ScanSelectTriggerEdge:00000000 $t
    {standard input}:2427   .text.XMC_VADC_GROUP_ScanSelectTriggerEdge:00000000 XMC_VADC_GROUP_ScanSelectTriggerEdge
    {standard input}:2486   .text.XMC_VADC_GROUP_ScanSelectGating:00000000 $t
    {standard input}:2491   .text.XMC_VADC_GROUP_ScanSelectGating:00000000 XMC_VADC_GROUP_ScanSelectGating
    {standard input}:2550   .text.XMC_VADC_GROUP_ScanSequenceAbort:00000000 $t
    {standard input}:2555   .text.XMC_VADC_GROUP_ScanSequenceAbort:00000000 XMC_VADC_GROUP_ScanSequenceAbort
    {standard input}:2633   .text.XMC_VADC_GROUP_ScanSequenceAbort:0000007c $d
    {standard input}:2638   .text.XMC_VADC_GROUP_ScanGetNumChannelsPending:00000000 $t
    {standard input}:2643   .text.XMC_VADC_GROUP_ScanGetNumChannelsPending:00000000 XMC_VADC_GROUP_ScanGetNumChannelsPending
    {standard input}:2722   .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:2727   .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:00000000 XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode
    {standard input}:2782   .text.XMC_VADC_GROUP_ScanRemoveChannel:00000000 $t
    {standard input}:2787   .text.XMC_VADC_GROUP_ScanRemoveChannel:00000000 XMC_VADC_GROUP_ScanRemoveChannel
    {standard input}:2840   .text.XMC_VADC_GLOBAL_BackgroundInit:00000000 $t
    {standard input}:2845   .text.XMC_VADC_GLOBAL_BackgroundInit:00000000 XMC_VADC_GLOBAL_BackgroundInit
    {standard input}:3001   .text.XMC_VADC_GLOBAL_BackgroundInit:000000f8 $d
    {standard input}:3006   .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger:00000000 $t
    {standard input}:3011   .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger:00000000 XMC_VADC_GLOBAL_BackgroundSelectTrigger
    {standard input}:3069   .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:00000000 $t
    {standard input}:3074   .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:00000000 XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge
    {standard input}:3133   .text.XMC_VADC_GLOBAL_BackgroundSelectGating:00000000 $t
    {standard input}:3138   .text.XMC_VADC_GLOBAL_BackgroundSelectGating:00000000 XMC_VADC_GLOBAL_BackgroundSelectGating
    {standard input}:3196   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:00000000 $t
    {standard input}:3201   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:00000000 XMC_VADC_GLOBAL_BackgroundAbortSequence
    {standard input}:3311   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:000000a8 $d
    {standard input}:3317   .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:00000000 $t
    {standard input}:3322   .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:00000000 XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending
    {standard input}:3419   .text.XMC_VADC_GROUP_QueueInit:00000000 $t
    {standard input}:3424   .text.XMC_VADC_GROUP_QueueInit:00000000 XMC_VADC_GROUP_QueueInit
    {standard input}:3522   .text.XMC_VADC_GROUP_QueueSelectTrigger:00000000 $t
    {standard input}:3527   .text.XMC_VADC_GROUP_QueueSelectTrigger:00000000 XMC_VADC_GROUP_QueueSelectTrigger
    {standard input}:3586   .text.XMC_VADC_GROUP_QueueSelectTriggerEdge:00000000 $t
    {standard input}:3591   .text.XMC_VADC_GROUP_QueueSelectTriggerEdge:00000000 XMC_VADC_GROUP_QueueSelectTriggerEdge
    {standard input}:3650   .text.XMC_VADC_GROUP_QueueSelectGating:00000000 $t
    {standard input}:3655   .text.XMC_VADC_GROUP_QueueSelectGating:00000000 XMC_VADC_GROUP_QueueSelectGating
    {standard input}:3714   .text.XMC_VADC_GROUP_QueueGetLength:00000000 $t
    {standard input}:3719   .text.XMC_VADC_GROUP_QueueGetLength:00000000 XMC_VADC_GROUP_QueueGetLength
    {standard input}:3791   .text.XMC_VADC_GROUP_QueueAbortSequence:00000000 $t
    {standard input}:3796   .text.XMC_VADC_GROUP_QueueAbortSequence:00000000 XMC_VADC_GROUP_QueueAbortSequence
    {standard input}:3865   .text.XMC_VADC_GROUP_QueueAbortSequence:00000064 $d
    {standard input}:3870   .text.XMC_VADC_GROUP_QueueRemoveChannel:00000000 $t
    {standard input}:3875   .text.XMC_VADC_GROUP_QueueRemoveChannel:00000000 XMC_VADC_GROUP_QueueRemoveChannel
    {standard input}:3973   .text.XMC_VADC_GROUP_QueueRemoveChannel:00000094 $d
    {standard input}:3978   .text.XMC_VADC_GROUP_QueueGetNextChannel:00000000 $t
    {standard input}:3983   .text.XMC_VADC_GROUP_QueueGetNextChannel:00000000 XMC_VADC_GROUP_QueueGetNextChannel
    {standard input}:4051   .text.XMC_VADC_GROUP_QueueGetInterruptedChannel:00000000 $t
    {standard input}:4056   .text.XMC_VADC_GROUP_QueueGetInterruptedChannel:00000000 XMC_VADC_GROUP_QueueGetInterruptedChannel
    {standard input}:4111   .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:4116   .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:00000000 XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode
    {standard input}:4170   .text.XMC_VADC_GROUP_ChannelInit:00000000 $t
    {standard input}:4175   .text.XMC_VADC_GROUP_ChannelInit:00000000 XMC_VADC_GROUP_ChannelInit
    {standard input}:4304   .text.XMC_VADC_GROUP_SetChannelAlias:00000000 $t
    {standard input}:4309   .text.XMC_VADC_GROUP_SetChannelAlias:00000000 XMC_VADC_GROUP_SetChannelAlias
    {standard input}:4386   .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds:00000000 $t
    {standard input}:4391   .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds:00000000 XMC_VADC_GROUP_ChannelIsResultOutOfBounds
    {standard input}:4472   .text.XMC_VADC_GROUP_ChannelSetInputReference:00000000 $t
    {standard input}:4477   .text.XMC_VADC_GROUP_ChannelSetInputReference:00000000 XMC_VADC_GROUP_ChannelSetInputReference
    {standard input}:4537   .text.XMC_VADC_GROUP_ChannelSetResultRegister:00000000 $t
    {standard input}:4542   .text.XMC_VADC_GROUP_ChannelSetResultRegister:00000000 XMC_VADC_GROUP_ChannelSetResultRegister
    {standard input}:4601   .text.XMC_VADC_GROUP_ChannelSetIclass:00000000 $t
    {standard input}:4606   .text.XMC_VADC_GROUP_ChannelSetIclass:00000000 XMC_VADC_GROUP_ChannelSetIclass
    {standard input}:4665   .text.XMC_VADC_GROUP_ChannelGetResultRegister:00000000 $t
    {standard input}:4670   .text.XMC_VADC_GROUP_ChannelGetResultRegister:00000000 XMC_VADC_GROUP_ChannelGetResultRegister
    {standard input}:4717   .text.XMC_VADC_GROUP_ChannelTriggerEvent:00000000 $t
    {standard input}:4722   .text.XMC_VADC_GROUP_ChannelTriggerEvent:00000000 XMC_VADC_GROUP_ChannelTriggerEvent
    {standard input}:4773   .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode:00000000 $t
    {standard input}:4778   .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode:00000000 XMC_VADC_GROUP_ChannelSetEventInterruptNode
    {standard input}:4842   .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:00000000 $t
    {standard input}:4847   .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:00000000 XMC_VADC_GROUP_ChannelTriggerEventGenCriteria
    {standard input}:4907   .text.XMC_VADC_GROUP_ChannelSetBoundarySelection:00000000 $t
    {standard input}:4912   .text.XMC_VADC_GROUP_ChannelSetBoundarySelection:00000000 XMC_VADC_GROUP_ChannelSetBoundarySelection
    {standard input}:4982   .text.XMC_VADC_GROUP_AddResultToFifo:00000000 $t
    {standard input}:4987   .text.XMC_VADC_GROUP_AddResultToFifo:00000000 XMC_VADC_GROUP_AddResultToFifo
    {standard input}:5043   .text.XMC_VADC_GROUP_SetResultFastCompareValue:00000000 $t
    {standard input}:5048   .text.XMC_VADC_GROUP_SetResultFastCompareValue:00000000 XMC_VADC_GROUP_SetResultFastCompareValue
    {standard input}:5109   .text.XMC_VADC_GROUP_GetFastCompareResult:00000000 $t
    {standard input}:5114   .text.XMC_VADC_GROUP_GetFastCompareResult:00000000 XMC_VADC_GROUP_GetFastCompareResult
    {standard input}:5175   .text.XMC_VADC_GROUP_SetResultSubtractionValue:00000000 $t
    {standard input}:5180   .text.XMC_VADC_GROUP_SetResultSubtractionValue:00000000 XMC_VADC_GROUP_SetResultSubtractionValue
    {standard input}:5235   .text.XMC_VADC_GROUP_SetResultInterruptNode:00000000 $t
    {standard input}:5240   .text.XMC_VADC_GROUP_SetResultInterruptNode:00000000 XMC_VADC_GROUP_SetResultInterruptNode
    {standard input}:5341   .text.XMC_VADC_GROUP_GetResultFifoTail:00000000 $t
    {standard input}:5346   .text.XMC_VADC_GROUP_GetResultFifoTail:00000000 XMC_VADC_GROUP_GetResultFifoTail
    {standard input}:5559   .text.XMC_VADC_GROUP_IsResultRegisterFifoHead:00000000 XMC_VADC_GROUP_IsResultRegisterFifoHead
    {standard input}:5464   .text.XMC_VADC_GROUP_GetResultFifoHead:00000000 $t
    {standard input}:5469   .text.XMC_VADC_GROUP_GetResultFifoHead:00000000 XMC_VADC_GROUP_GetResultFifoHead
    {standard input}:5554   .text.XMC_VADC_GROUP_IsResultRegisterFifoHead:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset
